<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>현수쓰</title>
  
  <subtitle>하루를 기록하다</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://khs9628.github.io/"/>
  <updated>2019-09-19T06:08:27.245Z</updated>
  <id>https://khs9628.github.io/</id>
  
  <author>
    <name>현수쓰</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>React5</title>
    <link href="https://khs9628.github.io/2019/09/19/React5/"/>
    <id>https://khs9628.github.io/2019/09/19/React5/</id>
    <published>2019-09-19T04:11:40.000Z</published>
    <updated>2019-09-19T06:08:27.245Z</updated>
    
    <summary type="html">
    
    </summary>
    
    
    
      <category term="React" scheme="https://khs9628.github.io/tags/React/"/>
    
  </entry>
  
  <entry>
    <title>Event &amp; Lifecycle</title>
    <link href="https://khs9628.github.io/2019/09/17/React4/"/>
    <id>https://khs9628.github.io/2019/09/17/React4/</id>
    <published>2019-09-17T09:34:21.000Z</published>
    <updated>2019-09-19T04:04:46.130Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Event"><a href="#Event" class="headerlink" title="Event"></a>Event</h2><p>== 웹상에서의 모든 행위</p><h3 id="Event-Handling"><a href="#Event-Handling" class="headerlink" title="Event Handling?"></a>Event Handling?</h3><p>Web에서 인터렉션 ? - EVENT의 핵심</p><ul><li>State를 만든다</li><li>Handling 함수를 만든다.</li><li>이벤트가 발생하는 HTML 태그에서 onEvent명을 통해 handling 함수를 부른다.</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React <span class="keyword">from</span> <span class="string">'react'</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="string">'./App.css'</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 요구사항 1. 시간과 분이 변화하는 것을 보고 싶다.</span></span><br><span class="line"><span class="comment">// 요구사항 2. 동적으로 보고싶다.</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">WorldClock</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</span><br><span class="line">  <span class="keyword">constructor</span>(props)&#123;</span><br><span class="line">    <span class="keyword">super</span>(props)</span><br><span class="line">    <span class="keyword">this</span>.state = &#123;</span><br><span class="line">      hour: <span class="keyword">this</span>.props.time,</span><br><span class="line">      minute : <span class="number">0</span>,</span><br><span class="line">      stop : <span class="literal">false</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// this.setState</span></span><br><span class="line">    <span class="comment">// this.state.minute += 1; -&gt; 절대 불가</span></span><br><span class="line">    <span class="keyword">this</span>.timer = setInterval(<span class="function"><span class="params">()</span>=&gt;</span>&#123;</span><br><span class="line">      <span class="keyword">this</span>.setState(<span class="function">(<span class="params">state</span>)=&gt;</span>(</span><br><span class="line">        state.minute === <span class="number">59</span></span><br><span class="line">        ?&#123;<span class="attr">hour</span>: state.hour + <span class="number">1</span>, <span class="attr">minute</span> :<span class="number">0</span>&#125;</span><br><span class="line">        : &#123;<span class="attr">minute</span>: state.minute + <span class="number">1</span>&#125;</span><br><span class="line">        ))</span><br><span class="line">    &#125;, <span class="number">100</span>)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">//1-2.handling 함수를 만든다</span></span><br><span class="line">  handlingClick = <span class="function">(<span class="params">event</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(event.target)</span><br><span class="line">    <span class="keyword">this</span>.setState(&#123;<span class="attr">stop</span>: event.target.value&#125;)</span><br><span class="line">    clearInterval(<span class="keyword">this</span>.timer);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// render 미리 약속되있는 함수</span></span><br><span class="line">  render()&#123;</span><br><span class="line">    <span class="keyword">return</span>(</span><br><span class="line">      &lt;div className=&#123;<span class="string">"WorldClock"</span>&#125;&gt;</span><br><span class="line">        &lt;h2&gt; 도시 : &#123;<span class="keyword">this</span>.props.city&#125; &lt;<span class="regexp">/h2&gt;</span></span><br><span class="line"><span class="regexp">        &lt;p&gt; 시간 : &#123;this.state.hour&#125;시 &#123;this.state.minute&#125;분&lt;/</span>p&gt;</span><br><span class="line">        &#123;<span class="comment">/* 1-3. onEvent명을 통해 handling 함수를 부른다. */</span>&#125;</span><br><span class="line">        &lt;button value=&#123;<span class="literal">true</span>&#125; onClick=&#123;<span class="keyword">this</span>.handlingClick&#125;&gt;멈춰!<span class="xml"><span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line">      &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">    )</span></span><br><span class="line"><span class="regexp">  &#125;</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">class App extends React.Component  &#123;</span></span><br><span class="line"><span class="regexp">  constructor(props)&#123;</span></span><br><span class="line"><span class="regexp">    super(props)</span></span><br><span class="line"><span class="regexp">    /</span><span class="regexp">/1-1. state를 만든다</span></span><br><span class="line"><span class="regexp">    this.cityTimeData= [</span></span><br><span class="line"><span class="regexp">      ['서울', 10],</span></span><br><span class="line"><span class="regexp">      ['북한', 11],</span></span><br><span class="line"><span class="regexp">      ['도쿄', 12],</span></span><br><span class="line"><span class="regexp">      ['베이징', 1],</span></span><br><span class="line"><span class="regexp">    ]</span></span><br><span class="line"><span class="regexp">    /</span><span class="regexp">/2-1. state를 만든다</span></span><br><span class="line"><span class="regexp">    this.state =&#123;</span></span><br><span class="line"><span class="regexp">      content: ''</span></span><br><span class="line"><span class="regexp">    &#125;</span></span><br><span class="line"><span class="regexp">  &#125;</span></span><br><span class="line"><span class="regexp">  /</span><span class="regexp">/2-2. handling 함수를 만든다</span></span><br><span class="line"><span class="regexp">  handlingChange = (event) =&gt; &#123;</span></span><br><span class="line"><span class="regexp">    this.setState(&#123;content: event.target.value&#125;)</span></span><br><span class="line"><span class="regexp">  &#125;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">  render() &#123;</span></span><br><span class="line"><span class="regexp">  return (</span></span><br><span class="line"><span class="regexp">    &lt;div className="App"&gt;</span></span><br><span class="line"><span class="regexp">      &lt;h1 className = &#123;'myStyle'&#125;&gt;안녕하세요&lt;/</span>h1&gt;</span><br><span class="line">      &lt;div className= &#123;<span class="string">'post'</span>&#125;&gt;</span><br><span class="line">        첫 게시글입니다.</span><br><span class="line">        &#123;<span class="comment">/* 2-3.onEvent명을 통해 handling 함수를 부른다. */</span>&#125;</span><br><span class="line">        &lt;textarea value=&#123;<span class="keyword">this</span>.state.content&#125; onChange=&#123;<span class="keyword">this</span>.handlingChange&#125;&gt;<span class="xml"><span class="tag">&lt;/<span class="name">textarea</span>&gt;</span></span></span><br><span class="line">      &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">      &#123;this.cityTimeData.map((citytime,index)=&gt;</span></span><br><span class="line"><span class="regexp">      &lt;WorldClock city=&#123;citytime[0]&#125; time =&#123;citytime[1]&#125; key =&#123;index&#125; /</span>&gt;</span><br><span class="line">      )</span><br><span class="line">      &#125;</span><br><span class="line">    &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">  );</span></span><br><span class="line"><span class="regexp">  &#125;</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">/</span><span class="regexp">/컴포넌트 수출</span></span><br><span class="line"><span class="regexp">export default App; /</span><span class="regexp">/ -&gt; index.js</span></span><br></pre></td></tr></table></figure><h2 id="Lifecycle"><a href="#Lifecycle" class="headerlink" title="Lifecycle"></a>Lifecycle</h2><p>컴포넌트가 계속 변화하기 때문에 중요</p><p><img alt="State" data-src="/assets/img/React/Lifecycle.PNG" class="lozad"></p><ol><li><p>Constructor<br>State 구조 설정<br>컴포넌트가 Mount 하기전에 할 설정<br>setState X</p></li><li><p>ComponentDidMount<br>필요한 데이터 요청<br>각종 비동기 요청(Subscription)</p></li><li><p>ComponentDidUpdate<br>업데이트 이후 수정할 때<br>If() { setState() }</p></li><li><p>ComponentWillUnmount<br>데이터 요청 / 비동기 함수 / 타이머 종료<br>setState X</p></li><li><p>자식 컴포넌트 + 부모의 Update + 최적화<br>ShouldComponetUpdate<br>PureComponent</p></li></ol><h2 id="HOOK-참고사이트"><a href="#HOOK-참고사이트" class="headerlink" title="HOOK?참고사이트"></a><a href="https://ko.reactjs.org/docs/hooks-intro.html" rel="external nofollow noopener noreferrer" target="_blank">HOOK?참고사이트</a></h2><p><a href="https://divjoy.com/?ref=stackshare" rel="external nofollow noopener noreferrer" target="_blank">React컴포넌트참고사이트</a></p><blockquote><p>하루를 기록하다</p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;Event&quot;&gt;&lt;a href=&quot;#Event&quot; class=&quot;headerlink&quot; title=&quot;Event&quot;&gt;&lt;/a&gt;Event&lt;/h2&gt;&lt;p&gt;== 웹상에서의 모든 행위&lt;/p&gt;
&lt;h3 id=&quot;Event-Handling&quot;&gt;&lt;a href=&quot;#Event
      
    
    </summary>
    
    
    
      <category term="React" scheme="https://khs9628.github.io/tags/React/"/>
    
  </entry>
  
  <entry>
    <title>Props &amp; State</title>
    <link href="https://khs9628.github.io/2019/09/17/React3/"/>
    <id>https://khs9628.github.io/2019/09/17/React3/</id>
    <published>2019-09-17T08:49:49.000Z</published>
    <updated>2019-09-17T13:05:46.933Z</updated>
    
    <content type="html"><![CDATA[<h2 id="컴포넌트-실습-Feat-map"><a href="#컴포넌트-실습-Feat-map" class="headerlink" title="컴포넌트 실습 (Feat.map)"></a>컴포넌트 실습 (Feat.map)</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React <span class="keyword">from</span> <span class="string">'react'</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="string">'./App.css'</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// JSX -&gt; HTML 태그</span></span><br><span class="line"><span class="comment">// JSX -&gt; style을 통해 css (JSX)</span></span><br><span class="line"><span class="comment">// JSX -&gt; className을 통해 css (css -&gt; App.css)</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">WorldClock</span>(<span class="params">props</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">return</span>(</span><br><span class="line">  &lt;div className=&#123;<span class="string">"WorldClock"</span>&#125;&gt;</span><br><span class="line">    &lt;h2&gt; 도시 : &#123;props.city&#125; &lt;<span class="regexp">/h2&gt;</span></span><br><span class="line"><span class="regexp">    &lt;p&gt; 시간 : &#123;props.time&#125; 시&lt;/</span>p&gt;</span><br><span class="line">  &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">    );</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">function App() &#123;</span></span><br><span class="line"><span class="regexp">    /</span><span class="regexp">/list 타입의 Data</span></span><br><span class="line"><span class="regexp">  const cityTimeData= [</span></span><br><span class="line"><span class="regexp">    ['서울', 10],</span></span><br><span class="line"><span class="regexp">    ['북한', 11],</span></span><br><span class="line"><span class="regexp">    ['도쿄', 12],</span></span><br><span class="line"><span class="regexp">    ['베이징', 1],</span></span><br><span class="line"><span class="regexp">  ]</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">  const WorldClockList = cityTimeData.map((citytime, index)=&gt;</span></span><br><span class="line"><span class="regexp">    &lt;WorldClock city=&#123;citytime[0]&#125; time =&#123;citytime[1]&#125; key =&#123;index&#125; /</span>&gt;</span><br><span class="line">  )</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    &lt;div className=<span class="string">"App"</span>&gt;</span><br><span class="line">      &lt;h1 className = &#123;<span class="string">'myStyle'</span>&#125;&gt;안녕하세요&lt;<span class="regexp">/h1&gt;</span></span><br><span class="line"><span class="regexp">    &lt;div className= &#123;'post'&#125;&gt;첫 게시글입니다.&lt;/</span>div&gt;</span><br><span class="line">    &#123;WorldClockList&#125;</span><br><span class="line">    &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">  );</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">/</span><span class="regexp">/컴포넌트 수출</span></span><br><span class="line"><span class="regexp">export default App;</span></span><br></pre></td></tr></table></figure><h1 id="오류"><a href="#오류" class="headerlink" title="오류"></a>오류</h1><blockquote><p>index.js:1375 Warning: Each child in a list should have a unique “key” prop.</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">-&gt; <span class="keyword">const</span> WorldClockList = cityTimeData.map(<span class="function">(<span class="params">citytime, index</span>)=&gt;</span></span><br><span class="line">    &lt;WorldClock city=&#123;citytime[<span class="number">0</span>]&#125; time =&#123;citytime[<span class="number">1</span>]&#125; key =&#123;index&#125; /&gt;</span><br><span class="line">  )</span><br></pre></td></tr></table></figure><h2 id="State"><a href="#State" class="headerlink" title="State"></a>State</h2><p>Props만으로도 표현 불가능 / Render로 표시 불가능  -&gt; State 사용</p><table><thead><tr><th align="center">–</th><th align="center">state</th><th align="center">stateless</th></tr></thead><tbody><tr><td align="center">function</td><td align="center">O(hook기술)</td><td align="center">O</td></tr><tr><td align="center">Class</td><td align="center">O</td><td align="center">O</td></tr></tbody></table><p>State는 좋지만 무겁고 어렵기 때문에 되도록 사용안함</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 요구사항 1. 시간과 분이 변화하는 것을 보고 싶다.</span></span><br><span class="line"><span class="comment">// 요구사항 2. 동적으로 보고싶다.</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">WorldClock</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</span><br><span class="line">  <span class="keyword">constructor</span>(props)&#123;</span><br><span class="line">    <span class="keyword">super</span>(props)</span><br><span class="line">    <span class="keyword">this</span>.state = &#123;</span><br><span class="line">      hour: <span class="keyword">this</span>.props.time,</span><br><span class="line">      minute : <span class="number">0</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// this.setState</span></span><br><span class="line">    <span class="comment">// this.state.minute += 1; -&gt; 절대 불가</span></span><br><span class="line">    setInterval(<span class="function"><span class="params">()</span>=&gt;</span>&#123;</span><br><span class="line">      <span class="keyword">this</span>.setState(<span class="function">(<span class="params">state</span>)=&gt;</span>(</span><br><span class="line">        state.minute === <span class="number">59</span></span><br><span class="line">        ?&#123;<span class="attr">hour</span>: state.hour + <span class="number">1</span>, <span class="attr">minute</span> :<span class="number">0</span>&#125;</span><br><span class="line">        : &#123;<span class="attr">minute</span>: state.minute + <span class="number">1</span>&#125;</span><br><span class="line">        ))</span><br><span class="line">    &#125;, <span class="number">100</span>)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// render 미리 약속되있는 함수</span></span><br><span class="line">  render()&#123;</span><br><span class="line">    <span class="keyword">return</span>(</span><br><span class="line">      &lt;div className=&#123;<span class="string">"WorldClock"</span>&#125;&gt;</span><br><span class="line">        &lt;h2&gt; 도시 : &#123;<span class="keyword">this</span>.props.city&#125; &lt;<span class="regexp">/h2&gt;</span></span><br><span class="line"><span class="regexp">        &lt;p&gt; 시간 : &#123;this.state.hour&#125;시 &#123;this.state.minute&#125;분&lt;/</span>p&gt;</span><br><span class="line">      &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">    )</span></span><br><span class="line"><span class="regexp">  &#125;</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br></pre></td></tr></table></figure><h2 id="실행-결과"><a href="#실행-결과" class="headerlink" title="실행 결과"></a>실행 결과</h2><p><img alt="State" data-src="/assets/img/React/state.PNG" class="lozad"></p><blockquote><p>하루를 기록하다</p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;컴포넌트-실습-Feat-map&quot;&gt;&lt;a href=&quot;#컴포넌트-실습-Feat-map&quot; class=&quot;headerlink&quot; title=&quot;컴포넌트 실습 (Feat.map)&quot;&gt;&lt;/a&gt;컴포넌트 실습 (Feat.map)&lt;/h2&gt;&lt;figure class
      
    
    </summary>
    
    
    
      <category term="React" scheme="https://khs9628.github.io/tags/React/"/>
    
  </entry>
  
  <entry>
    <title>React와 Django 프로젝트</title>
    <link href="https://khs9628.github.io/2019/09/17/Django5/"/>
    <id>https://khs9628.github.io/2019/09/17/Django5/</id>
    <published>2019-09-17T05:45:17.000Z</published>
    <updated>2019-09-17T11:36:20.900Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://velog.io/@killi8n/Django%EC%99%80-React%EB%A1%9C-%ED%95%9C%EC%A4%84-%EB%85%B8%ED%8A%B8-%EC%95%B1-%EB%A7%8C%EB%93%A4%EC%96%B4%EB%B3%B4%EA%B8%B0-2.-React-Django-%ED%94%84%EB%A1%9C%EC%A0%9D%ED%8A%B8-%EC%83%9D%EC%84%B1.-najmam6ds2" rel="external nofollow noopener noreferrer" target="_blank">참고 블로그</a></p><h1 id="폴더-구조"><a href="#폴더-구조" class="headerlink" title="폴더 구조"></a>폴더 구조</h1><h2 id="초기-설정"><a href="#초기-설정" class="headerlink" title="초기 설정"></a>초기 설정</h2><h3 id="Django-앱생성"><a href="#Django-앱생성" class="headerlink" title="Django 앱생성"></a>Django 앱생성</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 가상환경 생성</span></span><br><span class="line">python –m venv venv</span><br><span class="line"></span><br><span class="line"><span class="comment"># 가상환경 접속</span></span><br><span class="line"><span class="built_in">source</span> venv/Scripts/activate</span><br><span class="line"></span><br><span class="line"><span class="comment"># django 프로젝트 생성</span></span><br><span class="line">(venv) pip install django</span><br><span class="line">(venv) django-admin startproject dnote</span><br><span class="line">(venv) <span class="built_in">cd</span> dnote</span><br><span class="line">(venv) python manage.py migrate</span><br><span class="line">(venv) python manage.py runserver <span class="comment"># 실행확인</span></span><br></pre></td></tr></table></figure><h3 id="react-앱생성"><a href="#react-앱생성" class="headerlink" title="react 앱생성"></a>react 앱생성</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">npm install -g create-react-app</span><br><span class="line">create-react-app frontend</span><br><span class="line"><span class="built_in">cd</span> frontend</span><br><span class="line">npm start <span class="comment"># 실행확인</span></span><br></pre></td></tr></table></figure><h3 id="React-개발-환경-설정-및-구조-잡기-sass-설정"><a href="#React-개발-환경-설정-및-구조-잡기-sass-설정" class="headerlink" title="React - 개발 환경 설정 및 구조 잡기.(sass 설정)"></a>React - 개발 환경 설정 및 구조 잡기.(sass 설정)</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="built_in">cd</span> frontend</span><br><span class="line"><span class="comment"># 관련 패키지 다운</span></span><br><span class="line">npm install</span><br><span class="line">npm run eject</span><br><span class="line"><span class="comment"># 오류시 git add. / git commit -m "" 해줘야함 </span></span><br><span class="line"><span class="comment"># -&gt; 최상 디렉터리에(해당 폴더 git이 있어서 충돌)</span></span><br><span class="line">npm start <span class="comment"># react 시작하기</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># sass 설정</span></span><br><span class="line">npm install --save node-sass sass-loader</span><br><span class="line">npm install --save-dev node-sass</span><br><span class="line">npm install --save-dev sass-loader</span><br></pre></td></tr></table></figure><h2 id="config-paths-js"><a href="#config-paths-js" class="headerlink" title="config/paths.js"></a>config/paths.js</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// config after eject: we're in ./config/</span></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  ...</span><br><span class="line">  <span class="comment">// 추가해줍니다.</span></span><br><span class="line">  styles: resolveApp(<span class="string">"src/styles"</span>)</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h1 id="React-개발-환경-설정-및-구조-잡기-프로젝트-구조잡기"><a href="#React-개발-환경-설정-및-구조-잡기-프로젝트-구조잡기" class="headerlink" title="React - 개발 환경 설정 및 구조 잡기.(프로젝트 구조잡기)"></a>React - 개발 환경 설정 및 구조 잡기.(프로젝트 구조잡기)</h1><h3 id="Module-not-found-에러"><a href="#Module-not-found-에러" class="headerlink" title="Module not found 에러"></a>Module not found 에러</h3><h3 id="폴더-구조-src"><a href="#폴더-구조-src" class="headerlink" title="폴더 구조 src/.."></a>폴더 구조 src/..</h3><p>containers: 리액트 컨테이너 파일들 집합<br>components: 리액트 컴포넌트 파일들 집합<br>pages: Routing에서 사용될 page 파일들 집합<br>store: redux모듈들과 configure파일들 집합</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;a href=&quot;https://velog.io/@killi8n/Django%EC%99%80-React%EB%A1%9C-%ED%95%9C%EC%A4%84-%EB%85%B8%ED%8A%B8-%EC%95%B1-%EB%A7%8C%EB%93%A4%EC%9
      
    
    </summary>
    
    
    
      <category term="Django" scheme="https://khs9628.github.io/tags/Django/"/>
    
  </entry>
  
  <entry>
    <title>RESTful API 프로젝트</title>
    <link href="https://khs9628.github.io/2019/09/17/Django4/"/>
    <id>https://khs9628.github.io/2019/09/17/Django4/</id>
    <published>2019-09-16T15:49:13.000Z</published>
    <updated>2019-09-16T16:19:59.522Z</updated>
    
    <content type="html"><![CDATA[<h2 id="프로젝트-소개"><a href="#프로젝트-소개" class="headerlink" title="프로젝트 소개"></a>프로젝트 소개</h2><p>RESTful API를 가지고 3개의 게시판을 만들어보자</p><ul><li>글을 쓸 수 있는 Essay</li><li>이미지를 올릴 수 있는 Album</li><li>파일을 올릴 수 있는 Files</li></ul><h1 id="코드"><a href="#코드" class="headerlink" title="코드"></a>코드</h1><h2 id="settings-py"><a href="#settings-py" class="headerlink" title="settings.py"></a>settings.py</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">INSTALLED_APPS = [</span><br><span class="line">    <span class="comment">#rest_framework 등록</span></span><br><span class="line">    <span class="string">'rest_framework'</span>,</span><br><span class="line">    <span class="comment"># app 등록</span></span><br><span class="line">    <span class="string">'mystorage'</span></span><br><span class="line">]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 이미지를 등록하기위해 Media 경로지정</span></span><br><span class="line">MEDIA_URL = <span class="string">'/media/'</span></span><br><span class="line">MEDIA_ROOT = os.path.join(BASE_DIR,<span class="string">'media'</span>)</span><br></pre></td></tr></table></figure><h2 id="models-py"><a href="#models-py" class="headerlink" title="models.py"></a>models.py</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.db <span class="keyword">import</span> models</span><br><span class="line"><span class="keyword">from</span> django.conf <span class="keyword">import</span> settings</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Essay</span><span class="params">(models.Model)</span>:</span></span><br><span class="line">    author = models.ForeignKey(settings.AUTH_USER_MODEL, default =<span class="number">1</span>, on_delete = models.CASCADE)</span><br><span class="line">    title = models.CharField(max_length=<span class="number">100</span>)</span><br><span class="line">    body = models.TextField()</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Album</span><span class="params">(models.Model)</span>:</span></span><br><span class="line">    author = models.ForeignKey(settings.AUTH_USER_MODEL, default =<span class="number">1</span>, on_delete = models.CASCADE)</span><br><span class="line">    image = models.ImageField(upload_to=<span class="string">"images"</span>)</span><br><span class="line">    desc = models.CharField(max_length=<span class="number">100</span>)</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Files</span><span class="params">(models.Model)</span>:</span></span><br><span class="line">    author = models.ForeignKey(settings.AUTH_USER_MODEL, default =<span class="number">1</span>, on_delete = models.CASCADE)</span><br><span class="line">    myfile = models.FileField(upload_to=<span class="string">"files"</span>, blank=<span class="literal">False</span>, null= <span class="literal">False</span>)</span><br><span class="line">    desc = models.CharField(max_length=<span class="number">100</span>)</span><br></pre></td></tr></table></figure><h2 id="DB-적용"><a href="#DB-적용" class="headerlink" title="DB 적용"></a>DB 적용</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">python manage.py makemigrations</span><br><span class="line">python manage.py migrate</span><br></pre></td></tr></table></figure><h2 id="serializers-py"><a href="#serializers-py" class="headerlink" title="serializers.py"></a>serializers.py</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> .models <span class="keyword">import</span> Essay, Album, Files</span><br><span class="line"><span class="keyword">from</span> rest_framework <span class="keyword">import</span> serializers</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">EssaySerializer</span><span class="params">(serializers.ModelSerializer)</span>:</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 글쓴이를 자동적으로 등록함</span></span><br><span class="line">    author_name = serializers.ReadOnlyField(source=<span class="string">'author.username'</span>)</span><br><span class="line"></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Meta</span>:</span></span><br><span class="line">        model = Essay</span><br><span class="line">        <span class="comment"># fields = '__all__'</span></span><br><span class="line">        fields = (<span class="string">'pk'</span>, <span class="string">'title'</span> , <span class="string">'body'</span>, <span class="string">'author_name'</span>)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># def perform_create(self, serializer):</span></span><br><span class="line">        <span class="comment">#     serializer.save(author = self.request.user)</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">AlbumSerializer</span><span class="params">(serializers.ModelSerializer)</span>:</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 글쓴이를 자동적으로 등록함</span></span><br><span class="line">    author_name = serializers.ReadOnlyField(source=<span class="string">'author.username'</span>)</span><br><span class="line">    <span class="comment"># 이미지를 업로드하고 결과값을 url로 하겠다</span></span><br><span class="line">    image = serializers.ImageField(use_url=<span class="literal">True</span>)</span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Meta</span>:</span></span><br><span class="line">        model = Album</span><br><span class="line">        fields = (<span class="string">'pk'</span>, <span class="string">'author_name'</span> , <span class="string">'image'</span>, <span class="string">'desc'</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">FilesSerializer</span><span class="params">(serializers.ModelSerializer)</span>:</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 글쓴이를 자동적으로 등록함</span></span><br><span class="line">    author_name = serializers.ReadOnlyField(source=<span class="string">'author.username'</span>)</span><br><span class="line">    myfile = serializers.FileField(use_url= <span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Meta</span>:</span></span><br><span class="line">        model = Files</span><br><span class="line">        fields = (<span class="string">'pk'</span>, <span class="string">'author_name'</span> , <span class="string">'myfile'</span>, <span class="string">'desc'</span>)</span><br></pre></td></tr></table></figure><h2 id="urls-py-PROJECT"><a href="#urls-py-PROJECT" class="headerlink" title="urls.py (PROJECT)"></a>urls.py (PROJECT)</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.contrib <span class="keyword">import</span> admin</span><br><span class="line"><span class="keyword">from</span> django.urls <span class="keyword">import</span> path, include</span><br><span class="line"><span class="keyword">from</span> mystorage <span class="keyword">import</span> urls</span><br><span class="line"><span class="keyword">from</span> django.conf <span class="keyword">import</span> settings</span><br><span class="line"><span class="keyword">from</span> django.conf.urls.static <span class="keyword">import</span> static</span><br><span class="line"></span><br><span class="line">urlpatterns = [</span><br><span class="line">    path(<span class="string">'admin/'</span>, admin.site.urls),</span><br><span class="line">    <span class="comment"># url 연결</span></span><br><span class="line">    path(<span class="string">''</span>, include(<span class="string">'mystorage.urls'</span>)),</span><br><span class="line">]</span><br><span class="line">urlpatterns += static(settings.MEDIA_URL, document_root=settings.MEDIA_ROOT)</span><br></pre></td></tr></table></figure><h2 id="urls-py-APP"><a href="#urls-py-APP" class="headerlink" title="urls.py (APP)"></a>urls.py (APP)</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> rest_framework.routers <span class="keyword">import</span> DefaultRouter</span><br><span class="line"><span class="keyword">from</span> mystorage <span class="keyword">import</span> views</span><br><span class="line"><span class="keyword">from</span> django.urls <span class="keyword">import</span> path, include</span><br><span class="line"><span class="keyword">from</span> rest_framework <span class="keyword">import</span> urls</span><br><span class="line"></span><br><span class="line"><span class="comment"># DefaultRouter기반의 라우터 등록 </span></span><br><span class="line">router = DefaultRouter()</span><br><span class="line"></span><br><span class="line">router.register(<span class="string">'essay'</span>, views.PostViewSet)</span><br><span class="line">router.register(<span class="string">'album'</span>, views.ImgViewSet)</span><br><span class="line">router.register(<span class="string">'files'</span>, views.FileViewSet)</span><br><span class="line"></span><br><span class="line">urlpatterns = [</span><br><span class="line">    path(<span class="string">''</span>, include(router.urls)),</span><br><span class="line">    path(<span class="string">'api-auth/'</span>, include(<span class="string">'rest_framework.urls'</span>)),</span><br><span class="line">]</span><br></pre></td></tr></table></figure><h2 id="views-py"><a href="#views-py" class="headerlink" title="views.py"></a>views.py</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> rest_framework <span class="keyword">import</span> viewsets</span><br><span class="line"><span class="keyword">from</span> .models <span class="keyword">import</span> Essay , Album, Files</span><br><span class="line"><span class="keyword">from</span> .serializers <span class="keyword">import</span> EssaySerializer, AlbumSerializer, FilesSerializer</span><br><span class="line"><span class="keyword">from</span> rest_framework.filters <span class="keyword">import</span> SearchFilter</span><br><span class="line"><span class="keyword">from</span> rest_framework.parsers <span class="keyword">import</span> MultiPartParser, FormParser</span><br><span class="line"><span class="keyword">from</span> rest_framework.response <span class="keyword">import</span> Response</span><br><span class="line"><span class="keyword">from</span> rest_framework <span class="keyword">import</span> status</span><br><span class="line"></span><br><span class="line"><span class="comment"># ModelViewSet 두가지 객체 - queryset / serializer_class</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">PostViewSet</span><span class="params">(viewsets.ModelViewSet)</span>:</span></span><br><span class="line">    queryset = Essay.objects.all()</span><br><span class="line">    serializer_class = EssaySerializer</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 검색 기능</span></span><br><span class="line">    filter_backends = [SearchFilter]</span><br><span class="line">    search_fields = (<span class="string">'title'</span>, <span class="string">'body'</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 현재 request를 보낸 유저</span></span><br><span class="line">    <span class="comment"># == self.request.user</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_queryset</span><span class="params">(self)</span>:</span></span><br><span class="line">        qs = super().get_queryset()</span><br><span class="line">        <span class="keyword">if</span> self.request.user.is_authenticated:</span><br><span class="line">            qs = qs.filter(author= self.request.user)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            qs = qs.none()</span><br><span class="line">        <span class="keyword">return</span> qs</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ImgViewSet</span><span class="params">(viewsets.ModelViewSet)</span>:</span></span><br><span class="line">    </span><br><span class="line">    queryset = Album.objects.all()</span><br><span class="line">    serializer_class = AlbumSerializer</span><br><span class="line"></span><br><span class="line"><span class="comment"># 다양한 미디어 파일을 받아야하기 때문에 지정해줘야함</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">FileViewSet</span><span class="params">(viewsets.ModelViewSet)</span>:</span></span><br><span class="line">    queryset = Files.objects.all()</span><br><span class="line">    serializer_class = FilesSerializer</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># parser_class 지정</span></span><br><span class="line">    parser_classes = (MultiPartParser, FormParser)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># create() 오버라이딩 / API HTTP -&gt; get() post() 오버라이딩</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">post</span><span class="params">(self, request, *arg, **kwargs)</span>:</span></span><br><span class="line">        serializer = FilesSerializer(data=request.data)</span><br><span class="line">        <span class="keyword">if</span> serializer.is_valid():</span><br><span class="line">            serializer.save()</span><br><span class="line">            <span class="keyword">return</span> Response(serializer.data, status= HTTP_201_CREATED)</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">return</span> Response(serializer.error, status = HTTP_400_BAD_REQUEST)</span><br></pre></td></tr></table></figure><h2 id="실행화면"><a href="#실행화면" class="headerlink" title="실행화면"></a>실행화면</h2><p><img alt="Main" data-src="/assets/img/Django/Rest_Main.PNG" class="lozad"><br><img alt="Result" data-src="/assets/img/Django/Rest_result.PNG" class="lozad"></p><blockquote><p>하루를 기록하다</p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;프로젝트-소개&quot;&gt;&lt;a href=&quot;#프로젝트-소개&quot; class=&quot;headerlink&quot; title=&quot;프로젝트 소개&quot;&gt;&lt;/a&gt;프로젝트 소개&lt;/h2&gt;&lt;p&gt;RESTful API를 가지고 3개의 게시판을 만들어보자&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;글을 쓸 
      
    
    </summary>
    
    
    
      <category term="Django" scheme="https://khs9628.github.io/tags/Django/"/>
    
  </entry>
  
  <entry>
    <title>수라상</title>
    <link href="https://khs9628.github.io/2019/09/16/royalTable/"/>
    <id>https://khs9628.github.io/2019/09/16/royalTable/</id>
    <published>2019-09-16T11:01:03.000Z</published>
    <updated>2019-09-16T15:02:26.092Z</updated>
    
    <content type="html"><![CDATA[<p><img alt="LOGO" data-src="/assets/img/PORTFOLIO/RoyalTable/LOGO.PNG" class="lozad"></p><h1 id="수라상"><a href="#수라상" class="headerlink" title="수라상"></a><a href="https://github.com/khs9628/NewbieThon" rel="external nofollow noopener noreferrer" target="_blank">수라상</a></h1><p><img alt="LOGO" data-src="/assets/img/PORTFOLIO/RoyalTable/intro.PNG" class="lozad"></p><h2 id="프로젝트"><a href="#프로젝트" class="headerlink" title="프로젝트"></a>프로젝트</h2><pre><code>프로젝트 이름 : 수라상 사용언어 : JavaScript , Html , Css [ Django ]사용Tool : vsCode</code></pre><h2 id="프로젝트-소개"><a href="#프로젝트-소개" class="headerlink" title="프로젝트 소개"></a>프로젝트 소개</h2><pre><code>저희가 뽑은 키워드는 백종원, 건강식품, 오타쿠 입니다. 저희는 그 중 건강식품과 오타쿠 키워드를 선택하였습니다.저희가 제공할 서비스의 이름은 수라상입니다.수라상은 건강식품 정보 공유 커뮤니티로 수라상이라 지은 이유는수는 나아갈 수와 라 는 LIFE 상은 위 상을 사용하여서 음식을 통해 나의 라이프를 높게 수(나아갈수) 나가가자 라는 뜻과건강에 좋은 임금님 밥상을 생각하여 밥을 제공하자는 두 가지 의미를 담고 있습니다.  건강에 좋은 임금님 밥상을 생각하여 좋은 밥을 제공하려는 움직임각 분야의 오타쿠별(자전거, 다이어트, 음주 등)로 게시판을 나누어 취미가  맞는 사람들끼리 각 분야에 관련되어 좋은 건강식품 및 건강정보를 공유하는 커뮤니티입니다.</code></pre><h3 id="일정"><a href="#일정" class="headerlink" title="일정"></a>일정</h3><p>2019.05.04 ~ 05.05</p><h3 id="서비스-소개"><a href="#서비스-소개" class="headerlink" title="서비스 소개"></a>서비스 소개</h3><p><img alt="서ꈰ스1" data-src="/assets/img/PORTFOLIO/RoyalTable/service1.PNG" class="lozad"><br><img alt="서ꈰ스1" data-src="/assets/img/PORTFOLIO/RoyalTable/service2.PNG" class="lozad"><br><img alt="서ꈰ스1" data-src="/assets/img/PORTFOLIO/RoyalTable/service3.PNG" class="lozad"></p><h3 id="수익성"><a href="#수익성" class="headerlink" title="수익성"></a>수익성</h3><p><img alt="수익" data-src="/assets/img/PORTFOLIO/RoyalTable/cost.png" class="lozad"></p><h3 id="발전가능성"><a href="#발전가능성" class="headerlink" title="발전가능성"></a>발전가능성</h3><p><img alt="TOBE" data-src="/assets/img/PORTFOLIO/RoyalTable/TOBE.png" class="lozad"></p><blockquote><p>하루를 기록하다</p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;img alt=&quot;LOGO&quot; data-src=&quot;/assets/img/PORTFOLIO/RoyalTable/LOGO.PNG&quot; class=&quot;lozad&quot;&gt;&lt;/p&gt;
&lt;h1 id=&quot;수라상&quot;&gt;&lt;a href=&quot;#수라상&quot; class=&quot;headerlink&quot; ti
      
    
    </summary>
    
    
    
      <category term="PORTFOLIO" scheme="https://khs9628.github.io/tags/PORTFOLIO/"/>
    
  </entry>
  
  <entry>
    <title>알고리즘 개념정리</title>
    <link href="https://khs9628.github.io/2019/09/10/codingtest/"/>
    <id>https://khs9628.github.io/2019/09/10/codingtest/</id>
    <published>2019-09-10T09:24:15.000Z</published>
    <updated>2019-09-10T09:39:46.078Z</updated>
    
    <content type="html"><![CDATA[<h2 id="알고리즘-기본-개념-정리"><a href="#알고리즘-기본-개념-정리" class="headerlink" title="알고리즘 기본 개념 정리"></a>알고리즘 기본 개념 정리</h2><h3 id="cf-HASH란"><a href="#cf-HASH란" class="headerlink" title="cf) HASH란?"></a>cf) HASH란?</h3><p>임의의 크기를 가진 데이터를 고정된 데이터의 크기로 변환시키는 것<br>-&gt; 특정한 배열의 인덱스나 위치를 입력하고자 하는 데이터의 값을 이용해 저장하거나 찾을 수 있음</p><h3 id="cf-HashMap이란"><a href="#cf-HashMap이란" class="headerlink" title="cf) HashMap이란?"></a>cf) HashMap이란?</h3><p>Key와 value를 묶어 하나의 entry로 저장하는 Map이다.<br>hashing을 사용하기 때문에 많은양의 데이터를 검색하는데 뛰어난 성능을 보여준다.</p><ul><li>map의 인터페이스중 하나로 (“Key”, “Value”)로 이루어져 있다.</li><li>key 값은 중복이 불가능 / value는 중복이 가능</li><li>멀티쓰레드에서 동시에 HashMap을 건드려 Key-value값을 사용하면 문제가 생긴다 -&gt; 충돌</li></ul><h3 id="HashMap-생성자-메서드"><a href="#HashMap-생성자-메서드" class="headerlink" title="HashMap 생성자/메서드"></a>HashMap 생성자/메서드</h3><table><thead><tr><th align="center">생성자/메서드</th><th align="center">설명</th></tr></thead><tbody><tr><td align="center">HashMap()</td><td align="center">HashMap 객체를 생성</td></tr><tr><td align="center">void clear()</td><td align="center">HashMap에 저장된 모든 요소를 제거한다.</td></tr><tr><td align="center">Object clone()</td><td align="center">현재 HashMap을 복제하여 반환한다.</td></tr><tr><td align="center">boolean containsKey(Object key)</td><td align="center">HashMap에 지정된 키(key)가 포함되어 있는지 알려준다.</td></tr><tr><td align="center">boolean containsValue(Object value)</td><td align="center">HashMap에 지정된 값(Value)이 포함되어 있는지 알려준다.</td></tr><tr><td align="center">Set entrySet()</td><td align="center">HashMap에 저장된 Key-Value값을 엔트리(키와 값을 결함)의 형태로 Set에 저장하여 반환</td></tr><tr><td align="center">Object get(Object Key)</td><td align="center">지정된 키의 값을 반환한다.</td></tr><tr><td align="center">boolean isEmpty()</td><td align="center">HashMap이 비어있는지 확인한다.</td></tr><tr><td align="center">Set keySet()</td><td align="center">HashMap에 저장된 모든 키가 저장된 Set을 반환한다.</td></tr><tr><td align="center">Object put(Object key, Object Value)</td><td align="center">HashMap에 키와 값을 저장</td></tr><tr><td align="center">void putAll(Map m)</td><td align="center">Map에 해당하는 모든 요소를 HashMap에 저장한다.</td></tr><tr><td align="center">Object remove(Object key)</td><td align="center">HashMap에서 지정된 키로 지정된 값을 제거한다.</td></tr><tr><td align="center">int size()</td><td align="center">HashMap에 저장된 요소의 개수를 반환한다.</td></tr></tbody></table>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;알고리즘-기본-개념-정리&quot;&gt;&lt;a href=&quot;#알고리즘-기본-개념-정리&quot; class=&quot;headerlink&quot; title=&quot;알고리즘 기본 개념 정리&quot;&gt;&lt;/a&gt;알고리즘 기본 개념 정리&lt;/h2&gt;&lt;h3 id=&quot;cf-HASH란&quot;&gt;&lt;a href=&quot;#c
      
    
    </summary>
    
    
    
      <category term="알고리즘" scheme="https://khs9628.github.io/tags/%EC%95%8C%EA%B3%A0%EB%A6%AC%EC%A6%98/"/>
    
  </entry>
  
  <entry>
    <title>기능 개발</title>
    <link href="https://khs9628.github.io/2019/09/10/codingtest3/"/>
    <id>https://khs9628.github.io/2019/09/10/codingtest3/</id>
    <published>2019-09-10T08:58:39.000Z</published>
    <updated>2019-09-11T06:58:24.275Z</updated>
    
    <content type="html"><![CDATA[<h2 id="기능-개발"><a href="#기능-개발" class="headerlink" title="기능 개발"></a><a href="https://programmers.co.kr/learn/courses/30/lessons/42586" rel="external nofollow noopener noreferrer" target="_blank">기능 개발</a></h2><p><strong>스택/큐</strong><br>프로그래머스 팀에서는 기능 개선 작업을 수행 중입니다. 각 기능은 진도가 100%일 때 서비스에 반영할 수 있습니다.</p><p>또, 각 기능의 개발속도는 모두 다르기 때문에 뒤에 있는 기능이 앞에 있는 기능보다 먼저 개발될 수 있고, 이때 뒤에 있는 기능은 앞에 있는 기능이 배포될 때 함께 배포됩니다.</p><p>먼저 배포되어야 하는 순서대로 작업의 진도가 적힌 정수 배열 progresses와 각 작업의 개발 속도가 적힌 정수 배열 speeds가 주어질 때 각 배포마다 몇 개의 기능이 배포되는지를 return 하도록 solution 함수를 완성하세요.</p><h2 id="제한사항"><a href="#제한사항" class="headerlink" title="제한사항"></a>제한사항</h2><blockquote><ul><li>작업의 개수(progresses, speeds배열의 길이)는 100개 이하입니다.</li><li>작업 진도는 100 미만의 자연수입니다.</li><li>작업 속도는 100 이하의 자연수입니다.</li><li>배포는 하루에 한 번만 할 수 있으며, 하루의 끝에 이루어진다고 가정합니다. 예를 들어 진도율이 95%인 작업의 개발 속도가 하루에 4%라면 배포는 2일 뒤에 이루어집니다.</li></ul></blockquote><h2 id="입출력-예"><a href="#입출력-예" class="headerlink" title="입출력 예"></a>입출력 예</h2><table><thead><tr><th>progresses</th><th>speeds</th><th>return</th></tr></thead><tbody><tr><td>[93,30,55]</td><td>[1,30,5]</td><td>[2,1]</td></tr></tbody></table><p>첫 번째 기능은 93% 완료되어 있고 하루에 1%씩 작업이 가능하므로 7일간 작업 후 배포가 가능합니다.<br>두 번째 기능은 30%가 완료되어 있고 하루에 30%씩 작업이 가능하므로 3일간 작업 후 배포가 가능합니다. 하지만 이전 첫 번째 기능이 아직 완성된 상태가 아니기 때문에 첫 번째 기능이 배포되는 7일째 배포됩니다.<br>세 번째 기능은 55%가 완료되어 있고 하루에 5%씩 작업이 가능하므로 9일간 작업 후 배포가 가능합니다.</p><p>따라서 7일째에 2개의 기능, 9일째에 1개의 기능이 배포됩니다.</p><h2 id="1차-답안"><a href="#1차-답안" class="headerlink" title="1차 답안"></a>1차 답안</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">solution</span><span class="params">(String[] phone_book)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">boolean</span> answer = <span class="keyword">true</span>;</span><br><span class="line">        <span class="keyword">return</span> answer;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>하루를 기록하다</p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;기능-개발&quot;&gt;&lt;a href=&quot;#기능-개발&quot; class=&quot;headerlink&quot; title=&quot;기능 개발&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://programmers.co.kr/learn/courses/30/lessons/42586&quot; rel=
      
    
    </summary>
    
    
    
      <category term="알고리즘" scheme="https://khs9628.github.io/tags/%EC%95%8C%EA%B3%A0%EB%A6%AC%EC%A6%98/"/>
    
  </entry>
  
  <entry>
    <title>ViewSet &amp; Router</title>
    <link href="https://khs9628.github.io/2019/09/10/Django3/"/>
    <id>https://khs9628.github.io/2019/09/10/Django3/</id>
    <published>2019-09-10T08:11:12.000Z</published>
    <updated>2019-09-16T15:39:39.054Z</updated>
    
    <content type="html"><![CDATA[<h2 id="ViewSet-amp-Router"><a href="#ViewSet-amp-Router" class="headerlink" title="ViewSet &amp; Router"></a>ViewSet &amp; Router</h2><h3 id="Pagination"><a href="#Pagination" class="headerlink" title="Pagination"></a>Pagination</h3><h4 id="API-서버의-페이지네이션의-의의"><a href="#API-서버의-페이지네이션의-의의" class="headerlink" title="API 서버의 페이지네이션의 의의"></a>API 서버의 페이지네이션의 의의</h4><p>하나의 request만으로 처리하기 어려운 레코드들을<br>여러 request로 나누어 전송</p><p>DRF (장고 Rest Framework)의 Pagination</p><ol><li><strong>PageNumberPagination</strong> - Default</li><li>LimitOffsetPagination</li><li>CusorPagination</li><li><strong>CustomizedPagination</strong> </li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Pagenation 설정 </span></span><br><span class="line"></span><br><span class="line"><span class="comment"># settings.py - 전역으로 설정 (Default)</span></span><br><span class="line">REST_FRAMEWORK = &#123;</span><br><span class="line">    <span class="string">'DEFAULT_PAGINATION_CLASS'</span>: <span class="string">'rest_framework.pagination.PageNumberPagination'</span>,</span><br><span class="line">    <span class="string">'PAGE_SIZE'</span>: <span class="number">100</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment"># views.py - 뷰단 별로 설정(CustomizedPagination)</span></span><br><span class="line"><span class="keyword">from</span> rest_framework <span class="keyword">import</span> PageNumberPagination</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">myPagination</span><span class="params">(PageNumberPagination)</span></span></span><br><span class="line">    page_size = 100</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ViewSet</span><span class="params">(viewsets.ModelViewSet)</span>:</span></span><br><span class="line">    queryset = UserPost.objects.all()</span><br><span class="line">    serializer_class = UserSerializer</span><br><span class="line">    pagination_class = myPagination</span><br></pre></td></tr></table></figure><h3 id="Filtering-vs-Search"><a href="#Filtering-vs-Search" class="headerlink" title="Filtering vs Search ?"></a>Filtering vs Search ?</h3><table><thead><tr><th align="center">Filtering</th><th align="center">Search</th></tr></thead><tbody><tr><td align="center">Request 걸러보내기</td><td align="center">Response 걸러보내기</td></tr></tbody></table><p><strong><em>cf) Request 가져오는법</em></strong></p><table><thead><tr><th align="center">내용</th><th align="center">명령어</th></tr></thead><tbody><tr><td align="center">내가 보낸 request</td><td align="center">self.request</td></tr><tr><td align="center">내가보낸 request의 user</td><td align="center">Self.request.user</td></tr><tr><td align="center">내가보낸 GET request</td><td align="center">Self.request.GET (= self.request.query_param)</td></tr><tr><td align="center">내가보낸 POST request</td><td align="center">self.request.POST</td></tr></tbody></table><h3 id="Authentication-amp-Permission"><a href="#Authentication-amp-Permission" class="headerlink" title="Authentication &amp; Permission"></a>Authentication &amp; Permission</h3><p><strong><em>Authentication</em></strong><br>서비스를 이용하는데 있어 내가 어느정도의 권한이 있음을  알려주는 과정<br><strong><em>Permission</em></strong><br>서비스를 어느 정도로 이용할 수 있는지에 대한 권한</p><ol><li><p>Authentication</p><ul><li><p>BasicAuthentication<br>HTTP 자체 기본인증에 기반한 인증방식<br>HTTP 제어 헤더로 넘긴 ID, PW를 BASE64 ENCODING</p></li><li><p>TokenAuthentication<br>인증요청 -&gt; 유일한 key값을 발급</p></li><li><p>SessionAuthentication<br>로그인이 될 때마다 저장되는 Session 정보를 참조하여 인증</p><p>cf) Session을 관리하는 곳</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#settings.py</span></span><br><span class="line">MIDDLEWARE = [</span><br><span class="line"><span class="string">'django.contrib.sessions.middleware.SessionMiddleware'</span>,</span><br><span class="line">]</span><br></pre></td></tr></table></figure></li><li><p>RemoteUserAuthentication<br>User정보가 다른 서비스에서 관리될 떄 사용되는 인증방식</p></li></ul></li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#settings.py</span></span><br><span class="line">REST_FRAMEWORK = &#123;</span><br><span class="line">    <span class="string">'DEFAULT_AUTHENTICATION_CLASSES'</span>: [</span><br><span class="line">        <span class="string">'rest_framework.authentication.BasicAuthentication'</span>,</span><br><span class="line">        <span class="string">'rest_framework.authentication.SessionAuthentication'</span>,</span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># views.py</span></span><br><span class="line"><span class="keyword">from</span> rest_framework.authentication <span class="keyword">import</span> SessionAuthentication, BasicAuthentication, TokenAuthentication</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ViewSet</span><span class="params">(viewsets.ModelViewSet)</span>:</span></span><br><span class="line">    authentication_classes = [TokenAuthentication,</span><br></pre></td></tr></table></figure><ol start="2"><li><p>Permission</p><ul><li><p>AllowAny - default<br>인증된 요청이든 비인증 요청이든 모든 허용하겠다.</p></li><li><p>IsAuthenticated<br>인증된 요청에 대해서만 View 호출을 허용하겠다.</p></li><li><p>IsAdminUser<br>Staff User에 대해서만 요청을 허용하겠다.</p></li><li><p>IsAuthenticatedOrReadOnly<br>비인증요청에 대해서는 읽기만 허용하겠다.</p></li><li><p>ETC<br>DjangoModelPermissions<br>DjangoModelPermissionsORAnonReadOnly<br>DjangoObjectPermissions</p></li></ul></li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#settings.py</span></span><br><span class="line">REST_FRAMEWORK = &#123;</span><br><span class="line">    <span class="string">'DEFAULT_PERMISSION_CLASSES'</span>: [</span><br><span class="line">        <span class="string">'rest_framework.permissions.IsAuthenticated'</span>,</span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># views.py</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> rest_framework.permissions <span class="keyword">import</span> AllowAny, IsAuthenticated, IsAuthenticatedOrReadOnly, IsAdminUser</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">UserPostViewSet</span><span class="params">(viewsets.ModelViewSet)</span>:</span></span><br><span class="line">    authentication_classes = [TokenAuthentication, SessionAuthentication]</span><br><span class="line">    permission_classes = [IsAuthenticated]</span><br><span class="line"></span><br><span class="line"><span class="comment">#FBV -&gt; decorator를 이용한 설정</span></span><br><span class="line"><span class="keyword">from</span> rest_framework.permissions <span class="keyword">import</span> AllowAny, IsAuthenticated, IsAuthenticatedOrReadOnly, IsAdminUser</span><br><span class="line"></span><br><span class="line"><span class="meta">@api_view(&#123;'GET'&#125;)</span></span><br><span class="line"><span class="meta">@permission_classes(&#123;'IsAuthenticated'&#125;)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> 함수명<span class="params">(request, format=None)</span>:</span></span><br><span class="line">...</span><br></pre></td></tr></table></figure><h3 id="Token-Authentication"><a href="#Token-Authentication" class="headerlink" title="Token Authentication"></a>Token Authentication</h3><p>BasicAuthentication, SessionAuthentication의 한계<br>Mobile Client에 적합</p><h4 id="수행-과정"><a href="#수행-과정" class="headerlink" title="수행 과정"></a>수행 과정</h4><ol><li><p>username, password와 1:1 매칭되는 고유 key 생성 / 발급</p><ul><li><p>rest_framework/authtoken/views.py의 ObtaionAuthToken을 이용한 생성</p></li><li><p>Python 명령어를 통한 생성</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">python manage.py drf_create_token &lt;username&gt;</span><br><span class="line"><span class="comment"># 강제로 재 생성</span></span><br><span class="line">python manage.py drf_create_token -r &lt;username&gt;</span><br></pre></td></tr></table></figure></li><li><p>Signal을 이용한 Token 획득</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.conf <span class="keyword">import</span> settings</span><br><span class="line"><span class="keyword">from</span> django.db.models.signals <span class="keyword">import</span> post_save</span><br><span class="line"><span class="keyword">from</span> django.dispatch <span class="keyword">import</span> receiver</span><br><span class="line"><span class="keyword">from</span> rest_framework.authentication.models <span class="keyword">import</span> Token</span><br><span class="line"></span><br><span class="line"><span class="comment">#post_save = DB에 뭔가 저장된 직후에 특정 동작 수행</span></span><br><span class="line"><span class="meta">@receiver(post_save, sender = settings.AUTH_USER_MODEL)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">create_auth_token</span><span class="params">(sender, instance = None, created=False, **kwargs)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> created:</span><br><span class="line">        Token.objects.create(user=instance)</span><br></pre></td></tr></table></figure></li></ul></li><li><p>발급받은 Token을 API요청에 담아 인증을 처리</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http POST http://127.0.0.1:8000/userpost/ <span class="string">"Authorization Token 토큰번호"</span> title =<span class="string">"토큰글"</span> body =<span class="string">"토큰내용"</span></span><br></pre></td></tr></table></figure></li></ol><h3 id="실습"><a href="#실습" class="headerlink" title="실습"></a>실습</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#settings.py</span></span><br><span class="line"><span class="comment"># 1:1 매칭 -&gt; OneToOneField를 이용해 Token을 발급</span></span><br><span class="line">INSTALLED_APPS = [</span><br><span class="line">    <span class="string">'rest_framework.authtoken'</span></span><br><span class="line">]</span><br><span class="line"><span class="comment">#bash</span></span><br><span class="line">python manage.py migrate</span><br><span class="line"><span class="comment">#현수 계정에 대한 토큰 생성</span></span><br><span class="line">python manage.py drf_create_token hyunsoo</span><br><span class="line"></span><br><span class="line"><span class="comment">#urls.py</span></span><br><span class="line"><span class="keyword">from</span> rest_framework.authtoken.views <span class="keyword">import</span> obtain_auth_token</span><br><span class="line"></span><br><span class="line">urlpatterns = [</span><br><span class="line">    path(<span class="string">'api-token-auth/'</span>, obtain_auth_token),</span><br><span class="line">]</span><br></pre></td></tr></table></figure><blockquote><p>하루를 기록하다</p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;ViewSet-amp-Router&quot;&gt;&lt;a href=&quot;#ViewSet-amp-Router&quot; class=&quot;headerlink&quot; title=&quot;ViewSet &amp;amp; Router&quot;&gt;&lt;/a&gt;ViewSet &amp;amp; Router&lt;/h2&gt;&lt;h3 i
      
    
    </summary>
    
    
    
      <category term="Django" scheme="https://khs9628.github.io/tags/Django/"/>
    
  </entry>
  
  <entry>
    <title>5Ducku</title>
    <link href="https://khs9628.github.io/2019/09/10/5Ducku/"/>
    <id>https://khs9628.github.io/2019/09/10/5Ducku/</id>
    <published>2019-09-10T04:35:01.000Z</published>
    <updated>2019-09-10T05:50:34.136Z</updated>
    
    <summary type="html">
    
    </summary>
    
    
    
      <category term="PORTFOLIO" scheme="https://khs9628.github.io/tags/PORTFOLIO/"/>
    
  </entry>
  
  <entry>
    <title>나왐마</title>
    <link href="https://khs9628.github.io/2019/09/10/%EB%82%98%EC%99%90%EB%A7%88/"/>
    <id>https://khs9628.github.io/2019/09/10/나왐마/</id>
    <published>2019-09-10T04:34:43.000Z</published>
    <updated>2019-09-16T15:16:46.942Z</updated>
    
    <content type="html"><![CDATA[<h2 id="나왐마"><a href="#나왐마" class="headerlink" title="나왐마!"></a><a href="https://github.com/khs9628/NawamMa" rel="external nofollow noopener noreferrer" target="_blank">나왐마!</a></h2><p><img alt="LOGO" data-src="/assets/img/PORTFOLIO/NawamMa/index.PNG" class="lozad"></p><h3 id="라이브러리"><a href="#라이브러리" class="headerlink" title="라이브러리"></a>라이브러리</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">pip install django-allauth : 소셜로그인 구현</span><br><span class="line">pip install pySerial : 아두이노 시리얼 통신 구현</span><br><span class="line">pip install Pillow : 게시판 사진 업로드 구현</span><br></pre></td></tr></table></figure><h3 id="Project-구조"><a href="#Project-구조" class="headerlink" title="Project 구조"></a>Project 구조</h3><pre><code>프로젝트 이름 : project* appboard : 게시판 관련 APPmember : 계정 관련 APPaccounts : 소셜 계정 관련 APPNawamMa : 전체적인 기능 관련 APP</code></pre><h3 id="Project-소개"><a href="#Project-소개" class="headerlink" title="Project 소개"></a>Project 소개</h3><pre><code>지하철 자리를 효율적으로 관리하고 사용자들이 쉽게 자리를 찾을 수 있도록 도와주는 임산부들이 자리를 양보받을 수 있게 환경을 만들어주는서비스가 되는 것이 목표입니다.WEB 과 APP Arduino 3가지를 활용하여 구성WEB : 지하철 전광판 등에 표시 가능APP : 주 사용자들이 사용Arduino : 서버와 통신을 통해 신호를 보내고 값을 가져옴</code></pre><h2 id="주요-기능-2가지"><a href="#주요-기능-2가지" class="headerlink" title="주요 기능 2가지"></a>주요 기능 2가지</h2><p><img alt="LOGO" data-src="/assets/img/PORTFOLIO/NawamMa/NawamMa_ex.PNG" class="lozad"></p><ol><li><strong>지하철 자리 현황</strong></li></ol><p><img alt="LOGO" data-src="/assets/img/PORTFOLIO/NawamMa/NawamMa_1.PNG" class="lozad"></p><ol start="2"><li><strong>임산부 자리 요청</strong></li></ol><p><img alt="LOGO" data-src="/assets/img/PORTFOLIO/NawamMa/NawamMa_2.PNG" class="lozad"></p><h2 id="완성-화면"><a href="#완성-화면" class="headerlink" title="완성 화면"></a>완성 화면</h2><p><img alt="LOGO" data-src="/assets/img/PORTFOLIO/NawamMa/intro.PNG" class="lozad"></p><p><a href="https://blog.naver.com/seoulsba?Redirect=Log&logNo=221622583365" rel="external nofollow noopener noreferrer" target="_blank">관련 기사</a></p><blockquote><p>하루를 기록하다 </p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;나왐마&quot;&gt;&lt;a href=&quot;#나왐마&quot; class=&quot;headerlink&quot; title=&quot;나왐마!&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://github.com/khs9628/NawamMa&quot; rel=&quot;external nofollow noopener
      
    
    </summary>
    
    
    
      <category term="PORTFOLIO" scheme="https://khs9628.github.io/tags/PORTFOLIO/"/>
    
  </entry>
  
  <entry>
    <title>GuardOwl</title>
    <link href="https://khs9628.github.io/2019/09/10/GuardOwl/"/>
    <id>https://khs9628.github.io/2019/09/10/GuardOwl/</id>
    <published>2019-09-10T04:34:33.000Z</published>
    <updated>2019-09-16T11:25:04.612Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Guard-Owl"><a href="#Guard-Owl" class="headerlink" title="Guard_Owl"></a><a href="https://github.com/khs9628/Guard_Owl" rel="external nofollow noopener noreferrer" target="_blank">Guard_Owl</a></h1><p>아두이노와 NFC 리더기로 만든 이중 보안 기능을 지닌 금고와 이를 사용 및 관리하기 위해 웹과 안드로이드 앱을 활용하는 IOT 물품 보관시스템</p><h2 id="프로젝트"><a href="#프로젝트" class="headerlink" title="프로젝트"></a>프로젝트</h2><pre><code>프로젝트 이름 : Guard Owl 사용언어 = WEB : JavaScript , Html , Css [Spring FrameWork]          APPLICATION : JAVA , XML          DB : ORACLE (AWS RDS Oracle)          Aduino : Raspberry사용Tool : STS , androidStudio</code></pre><h2 id="프로젝트-소개"><a href="#프로젝트-소개" class="headerlink" title="프로젝트 소개"></a>프로젝트 소개</h2><h4 id="1-프로젝트-개발"><a href="#1-프로젝트-개발" class="headerlink" title="1. 프로젝트 개발"></a>1. 프로젝트 개발</h4><pre><code>최근 지하철 역사내 비치된 보관함을 비롯한 공용 보관함을 사전에 신청하여 대여하는 서비스들이 생겨나고 있으나, 개인이나 단체에게 전용 보관함과 이에 대한 서비스를 제공해주는 업체는 아직 많지 않습니다. 그리고 대부분의 보관함들은 개폐장치를 제외한 다른 보안장치는 구현되어 있지 않아 물리적 혹은 전기적으로 외부에서 충격을 줘 부정한 방법으로 보관함의 문을 열 경우, 내부의 물품들의 안전이 위협 받을 수 있습니다. 따라서 보안이 필요한 물품이나 자료들을 독자적으로 보관/관리 하기를 원하는 단체 및 개인에게 2중 보안 장치가 부착된 보관함과 그것을 이용 및 관리할 수 있는 서비스를 제공하면 시장에서 충분한 수요가 있을 것이라고 판단하여 프로젝트 개발을 결심하게 되었습니다.</code></pre><h4 id="2-프로젝트-개발-목표"><a href="#2-프로젝트-개발-목표" class="headerlink" title="2. 프로젝트 개발 목표"></a>2. 프로젝트 개발 목표</h4><pre><code>금고는 금고 문의 잠금/잠금해제를 담당하는 1차 보안장치인 NFC리더기와 이를 무시하고 금고 자체를 탈취하려 하거나, 금고문을 문을 부정한 방법으로 개폐하려고 할 경우를 대비한 2차 보안장치인 아두이노 모듈(압력센서, 카메라 모듈 등)로 구성되어 있습니다. 2차 보안장치는 압력센서에서 측정한 무게 값이 설정 값과 달라지게 되면 금고 상단에 부착된 카메라 모듈을 이용하여 현장 사진을 촬영하고 이 사진과 함께 경고 메시지를 웹과 앱을 통해서 사용자에서 전송합니다. 이러한 기능을 통하여, 각별한 보안이 요구되는 물품이나 서류자료를 독자적으로 관리하고자 하는 관공서, 회사, 단체, 개인 등이 보안을 더욱 철저히 할 수 있게 하며 동시에, 이를 대한 관리 비용을 줄일 수 있게 함을 목표로 하고 있습니다. </code></pre><h4 id="3-프로젝트-수행-일정"><a href="#3-프로젝트-수행-일정" class="headerlink" title="3. 프로젝트 수행 일정"></a>3. 프로젝트 수행 일정</h4><p><img alt="일정" data-src="/assets/img/PORTFOLIO/GuardOwl/%EC%9D%BC%EC%A0%95.PNG" class="lozad"></p><h3 id="구성-요소-및-구현-기능"><a href="#구성-요소-및-구현-기능" class="headerlink" title="구성 요소 및 구현 기능"></a>구성 요소 및 구현 기능</h3><p><img alt="구성도" data-src="/assets/img/PORTFOLIO/GuardOwl/GuardOwl.PNG" class="lozad"></p><ol><li><p>서버 (AWS Ubuntu 16.04)<br> 서버 기본 설정과 Oracle DB 사용을 위한 환경설정 리눅스에서 수행<br> Putty 프로그램을 이용한 서버 구축<br> FileZilla 프로그램으로 프로젝트 파일 임포트<br> 아두이노 웹서버에서 사진 이미지 가져오기<br> 보관함에 충격이 있거나 패스워드 찾기 기능 사용 시 이메일 송신<br> 웹 애플리케이션, 안드로이드 애플리케이션을 위한 DB 및 서비스 제공</p></li><li><p>웹 애플리케이션: 시스템 관리자용 웹 페이지<br> 관리자 추가 및 삭제(관리자, 매니저, 일반 사용자 권한 부여)<br> 관리자 계정 회원 가입, 개인 정보 수정, 패스워드 찾기<br> 신규 사용자 회원 가입 승인<br> 사용자 신청 승인 및 거절 (수령, 보관)<br> 보관함 추가 및 삭제<br> 보관품 목록 조회<br> 아두이노에서 전송된 사진 이미지 조회<br> 게시판 기능 (게시글, 댓글, 첨부 파일 추가, 삭제, 수정)</p></li><li><p>안드로이드 애플리케이션: 일반 사용자용 안드로이드 애플리케이션<br> 일반 사용자용 회원 가입, 패스워드 찾기, 개인정보 수정<br> 게시판 기능 (게시글, 댓글 추가 및 삭제)<br> 관리자에게 보관함 관련 신청 (수령신청, 보관신청)<br> 관리자가 신청을 승인할 시 사용자 알림 백그라운드 서비스<br> 보관품 목록 조회<br> 사용자 신청 내역 조회<br> NFC 리더기를 이용한 사용자 인증<br> TCP 소켓 통신을 이용한 아두이노 보관함 잠금장치 개폐</p></li><li><p>하드웨어: NFC 리더기, 아두이노 및 기타 장치들을 이용한 보관함 모형<br> <strong>Geunuino UNO</strong>: 보관함 문을 개페하기 위한 서보 모터 동작용 보드<br> ESP8266 UNO에서 요청 시 개폐를 위해 서보 모터 동작<br> ESP8266 UNO와 UART 통신<br> <strong>ESP8266 UNO</strong>: WiFi모듈, 카메라모듈, 압력센서를 사용한 메인 보드<br> 압력 센서에 인가되는 압력 값 변화 시 카메라 모듈이 사진 촬영<br> 와이파이 모듈을 이용하여 아두이노 웹서버 구축 및 웹서버에 사진 송신<br> 안드로이드 애플리케이션과 TCP 소켓 통신<br> 안드로이드 애플리케이션에서 요청 시, Genuino UNO에 개폐 신호 송신<br> <strong>NFC 리더기</strong>: 사용자 인증용 NFC 리더기<br> 서버를 통해 안드로이드 애플리케이션과 통신하여 사용자 인증 기능 수행</p></li></ol><h3 id="최종-완성본"><a href="#최종-완성본" class="headerlink" title="최종 완성본"></a>최종 완성본</h3><p><img alt="final" data-src="/assets/img/PORTFOLIO/GuardOwl/GuardOwl_final.PNG" class="lozad"></p><blockquote><p>하루를 기록하다</p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Guard-Owl&quot;&gt;&lt;a href=&quot;#Guard-Owl&quot; class=&quot;headerlink&quot; title=&quot;Guard_Owl&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://github.com/khs9628/Guard_Owl&quot; rel=&quot;externa
      
    
    </summary>
    
    
    
      <category term="PORTFOLIO" scheme="https://khs9628.github.io/tags/PORTFOLIO/"/>
    
  </entry>
  
  <entry>
    <title>WorkManager</title>
    <link href="https://khs9628.github.io/2019/09/10/WorkManager/"/>
    <id>https://khs9628.github.io/2019/09/10/WorkManager/</id>
    <published>2019-09-10T04:34:21.000Z</published>
    <updated>2019-09-10T07:51:26.943Z</updated>
    
    <content type="html"><![CDATA[<h2 id="WorkManager"><a href="#WorkManager" class="headerlink" title="WorkManager"></a><a href="https://github.com/khs9628/WorkManager" rel="external nofollow noopener noreferrer" target="_blank">WorkManager</a></h2><h3 id="프로젝트-개발-배경"><a href="#프로젝트-개발-배경" class="headerlink" title="프로젝트 개발 배경"></a>프로젝트 개발 배경</h3><pre><code>지인을 통해 들은 소규모 사업체에서 각 직원들의 담당 업무와 근태 관리에 대해 파악하기 하기 힘든 관리자의 고충과 조원 김현수의 단기 아르바이트 당시 느꼈던 근로자로써 불편했던 경험을 통해서 소규모 사업체의 관리자 및 근로자가 겪는 근무 일자에 따른 임금 관리가 복잡한 문제임을 깨닫고 각 근로자들의 임금과 사업체의 업무를 관리하는데 도움을 줄 수 있는 프로그램이 있으면 시장에서 충분한 수요가 있을 것이라고 판단하여 이 프로젝트 개발을 결심하게 되었습니다. </code></pre><p>개발 배경의 세부 사항은 아래와 같습니다.</p><blockquote><p>ㄱ. 시간제 혹은 일용직 근로자들을 고용하는 소규모 사업체에서 매번 변하는 인건비 관리가 어려움<br>(ex. 각종 근로 기준법의 각종 수당 및 공제액)<br>ㄴ. 공휴일이나 연휴가 있는 달이나 직원의 지각이나 결근 등에 대하여 그 달의 인건비 지출이 얼마가 될 것인지 계산해야 하기 번거로움 (ex. 직원들의 지각, 조퇴, 결근 등)<br>ㄷ. 근로기준법에 기재되어 있는 각종 수당들에 대해 사업주와 근로자 모두가 그 종류와 계산방법을 모르는 경우가 대부분<br>ㄹ. 임금 체불 등의 이유로 노동청의 도움을 받고자 할 때, 실제 근무를 했는지에 대한 명문(明文)적인 증거가 부족함<br>-&gt;법률 상에 존재하는 수당을 포함한 근로자의 임금을 정확하게 계산하여 근로자의 권리를 지키고 인건비 지출 관련 업무에 편리를 제공하여 사업주가 경영을 더 원활하게 할 수 있기 위함임. </p></blockquote><h3 id="프로젝트-개발-목표"><a href="#프로젝트-개발-목표" class="headerlink" title="프로젝트 개발 목표"></a>프로젝트 개발 목표</h3><pre><code>스마트폰의 NFC 기능(혹은 IC 카드)을 이용한 출퇴근 기록을 작성할 수 있는 웹프로그램을 개발하여 소규모 사업체의 임금 지불에 대한 관리와 소규모 사업체 근로자 및 일용직 근로자들의 임금 수취를 원활하게 하기 위함 입니다. 또한 업무에 관한 기록 조회, 수정, 삭제, 공지, 보고 등, 기타 부수적인 기능들 또한 추가하여 사업체 및 근로자들이 더 원활하게 업무 활동을 할 수 있도록 함을 목적으로 하고 있습니다. </code></pre><h3 id="프로젝트-요구사항-및-설계"><a href="#프로젝트-요구사항-및-설계" class="headerlink" title="프로젝트 요구사항 및 설계"></a>프로젝트 요구사항 및 설계</h3><h4 id="웹-주요-기능"><a href="#웹-주요-기능" class="headerlink" title="웹 주요 기능"></a>웹 주요 기능</h4><blockquote><p>관리자(사업주) 계정 회원가입<br>(앱에서 회원가입한 사원의) 회원 등록 승인 및 고용정보 기록<br>선택 기간별 사원 근무 기록 조회<br>사원 출근 현황 기록 및 조회<br>월간 총 지출 인건비 조회 및 그래프 출력<br>사원 정보 수정 및 삭제<br>사원 근무 기록 추가, 삭제, 수정<br>공지 사항 작성 및 일정표 생성<br>(패스워드 분실 사원에게)새로운 패스워드 이메일 송신</p></blockquote><h4 id="안드로이드-어플-주요-기능"><a href="#안드로이드-어플-주요-기능" class="headerlink" title="안드로이드 어플 주요 기능"></a>안드로이드 어플 주요 기능</h4><blockquote><p>NFC를 이용한 출퇴근 기록<br>회원 가입 및 패스워드 찾기<br>선택 기간별 근무 기록 조회<br>월간 예상 급여 조회<br>일정 수정 요청(ex. 휴가 신청, 조퇴 신청) 및 근무기록 수정 요청<br>공지 사항 열람<br>개인정보 수정<br>고용정보 열람</p></blockquote><h3 id="프로젝트-개발-환경"><a href="#프로젝트-개발-환경" class="headerlink" title="프로젝트 개발 환경"></a>프로젝트 개발 환경</h3><p><strong>WEB</strong><br>IDE: Eclipse<br>사용 언어: JSP, JAVA, JAVASCRIPT, HTML, HTML, CSS 등</p><p><strong>APP</strong><br>IDE: Android Studio, Eclipse<br>사용 언어: XML+JAVA (Android Studio), JSP+JAVA(Eclipse)</p><p><strong>DB</strong><br>DB: Oracle Database<br>Tool: SQL Developer</p><p><strong>기타 장치</strong><br>NFC 리더기</p><h3 id="기대-효과-및-활용-방안"><a href="#기대-효과-및-활용-방안" class="headerlink" title="기대 효과 및 활용 방안"></a>기대 효과 및 활용 방안</h3><pre><code>소규모 업체의 사업주가 해왔던 인사 관리와 회계 관리에 관한 업무들을 웹프로그램과 어플을 이용하여 더 쉽고 정확하게 수행할 수 있습니다.사업주는 당월 총 지출 인건비를 사전에 정확히 알 수 있습니다.사업주는 과거의 총 지출 인건비를 조회하여 당월과 비교할 수 있습니다.근무자들은 각종 공제와 세금을 제한 자신의 당월 임금에 대해서 사전에 정확히 알 수 있습니다.사업주와 근무자들은 언제든지 출퇴근 기록과 업무 기록을 조회하여 업무 및 개인 일정에 활용할 수 있습니다.</code></pre><h3 id="프로젝트-수행-체계"><a href="#프로젝트-수행-체계" class="headerlink" title="프로젝트 수행 체계"></a>프로젝트 수행 체계</h3><p>7-1. 프로젝트 참여 인원 및 역할</p><table><thead><tr><th align="center">이름</th><th align="center">역할</th></tr></thead><tbody><tr><td align="center">김현수</td><td align="center">웹 프로그래밍 일체</td></tr><tr><td align="center">이승현</td><td align="center">NFC 관련 작업 및 앱 프로그래밍 일체</td></tr></tbody></table><h3 id="프로젝트-수행-일정"><a href="#프로젝트-수행-일정" class="headerlink" title="프로젝트 수행 일정"></a>프로젝트 수행 일정</h3><p>08월 27일 ~ 09월 02일: 주제 선정<br>09월 03일 ~ 09월 09일: 개발 계획 수립<br>09월 10일 ~ 09월 16일: 자료 조사 및 DB 설계<br>09월 17일 ~ 09월 30일: 웹, 앱 기본 UI 제작<br>10월 01일 ~ 10월 07일:  웹, 앱 DB 연동 및 기능 구현 (1)<br>10월 08일 ~ 10월 21일: 중간 고사 준비 및 시험(예상)<br>10월 22일 ~ 10월 28일: 웹, 앱 DB 연동 및 기능 구현 (2)<br>10월 29일 ~ 11월 11일: NFC 기능 구현 및 웹서버, DB 통합<br>11월 12일 ~ 11월 25일: 미비 작업 추가, 웹,앱 연동 구현<br>11월 26일 ~ 12월 09일: 결과물 테스트 및 예비 기간</p><blockquote><p>하루를 기록하다</p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;WorkManager&quot;&gt;&lt;a href=&quot;#WorkManager&quot; class=&quot;headerlink&quot; title=&quot;WorkManager&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://github.com/khs9628/WorkManager&quot; rel=
      
    
    </summary>
    
    
    
      <category term="PORTFOLIO" scheme="https://khs9628.github.io/tags/PORTFOLIO/"/>
    
  </entry>
  
  <entry>
    <title>React기본</title>
    <link href="https://khs9628.github.io/2019/09/10/React2/"/>
    <id>https://khs9628.github.io/2019/09/10/React2/</id>
    <published>2019-09-09T15:24:54.000Z</published>
    <updated>2019-09-10T08:06:07.954Z</updated>
    
    <content type="html"><![CDATA[<h3 id="React"><a href="#React" class="headerlink" title="React ?"></a>React ?</h3><p>React전에 Jquery, Backbone, AngularJS가 있었다.<br>Jquery -&gt; DOM을 다루는<br>Backbone과 AngularJS를 위시한 SPA(Single Page Application)</p><p>React는 Angular같은 Framework가 아니라 Library입니다. </p><blockquote><p>DOM은 웹의 핵심으로써, 브라우저가 화면을 그리기 위한 정보가 담겨있는 문서</p></blockquote><h3 id="3가지-특징"><a href="#3가지-특징" class="headerlink" title="3가지 특징"></a>3가지 특징</h3><ol><li><p>Component<br>Component는 UI를 구성하는 개별적인 뷰 단위 (모듈화)</p></li><li><p>JSX<br>React를 위해 태어난 새로운 자바스크립트 문법</p></li><li><p>Virtual DOM</p></li></ol><h2 id="Create-react-app"><a href="#Create-react-app" class="headerlink" title="Create-react-app"></a>Create-react-app</h2><p><strong>NPM</strong> 설치</p><blockquote><ol><li>개별적으로 프로젝트 폴더에 따로 설치 가능</li><li>전체적으로 사용하도록 설치도 가능 (-g global)</li><li>사용은 주로 npm으로 시작</li><li>npx : 따로 모듈 설치 없이 사용할 수 있게 해주는 툴</li></ol></blockquote><h3 id="REACT-프로젝트-생성"><a href="#REACT-프로젝트-생성" class="headerlink" title="REACT 프로젝트  생성"></a>REACT 프로젝트  생성</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">npx create-react-app my-app</span><br><span class="line"><span class="built_in">cd</span> my-app</span><br><span class="line">npm start</span><br></pre></td></tr></table></figure><p>초기구조<br>APP.JS -&gt; INDEX.JS -&gt; INDEX.HTML</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">/* App.js */</span></span><br><span class="line"><span class="comment">//컴포넌트 수입</span></span><br><span class="line"><span class="keyword">import</span> React <span class="keyword">from</span> <span class="string">'react'</span>;</span><br><span class="line"><span class="keyword">import</span> logo <span class="keyword">from</span> <span class="string">'./logo.svg'</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="string">'./App.css'</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//컴포넌트</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">App</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    &lt;div className=<span class="string">"App"</span>&gt;</span><br><span class="line">      &lt;header className=<span class="string">"App-header"</span>&gt;</span><br><span class="line">        &lt;img src=&#123;logo&#125; className=<span class="string">"App-logo"</span> alt=<span class="string">"logo"</span> /&gt;</span><br><span class="line">        &lt;p&gt;</span><br><span class="line">          Edit &lt;code&gt;src/App.js&lt;<span class="regexp">/code&gt; and save to reload.</span></span><br><span class="line"><span class="regexp">        &lt;/</span>p&gt;</span><br><span class="line">        &lt;a</span><br><span class="line">          className=<span class="string">"App-link"</span></span><br><span class="line">          href=<span class="string">"https://reactjs.org"</span></span><br><span class="line">          target=<span class="string">"_blank"</span></span><br><span class="line">          rel=<span class="string">"noopener noreferrer"</span></span><br><span class="line">        &gt;</span><br><span class="line">          Learn React</span><br><span class="line">        &lt;<span class="regexp">/a&gt;</span></span><br><span class="line"><span class="regexp">      &lt;/</span>header&gt;</span><br><span class="line">    &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">  );</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">/</span><span class="regexp">/컴포넌트 수출</span></span><br><span class="line"><span class="regexp">export default App;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">/</span>* index.js *<span class="regexp">/</span></span><br><span class="line"><span class="regexp">/</span><span class="regexp">/ APP - app.js에서 불러온 데이터</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">import App from './</span>App<span class="string">';</span></span><br><span class="line"><span class="string">//id가 root인 곳에 정보를 뿌려준다.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">ReactDOM.render(&lt;App /&gt;, document.getElementById('</span>root<span class="string">'));</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">/* index.html */</span></span><br><span class="line"><span class="string">&lt;div id="root"&gt;&lt;/div&gt;</span></span><br></pre></td></tr></table></figure><h3 id="JSX"><a href="#JSX" class="headerlink" title="JSX"></a>JSX</h3><blockquote><p>Javascript의 HTML - HTML방식과 유사<br>Attrubutes나 css는 낙타 방식이다. (className, textAlign)<br>Js코드를 활용하고 싶으면 {}를 활용한다.</p></blockquote><blockquote><p>하루를 기록하다</p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;React&quot;&gt;&lt;a href=&quot;#React&quot; class=&quot;headerlink&quot; title=&quot;React ?&quot;&gt;&lt;/a&gt;React ?&lt;/h3&gt;&lt;p&gt;React전에 Jquery, Backbone, AngularJS가 있었다.&lt;br&gt;Jquery -&amp;
      
    
    </summary>
    
    
    
      <category term="React" scheme="https://khs9628.github.io/tags/React/"/>
    
  </entry>
  
  <entry>
    <title>JavaScript 기본</title>
    <link href="https://khs9628.github.io/2019/09/09/React1/"/>
    <id>https://khs9628.github.io/2019/09/09/React1/</id>
    <published>2019-09-09T13:21:15.000Z</published>
    <updated>2019-09-09T15:22:01.305Z</updated>
    
    <content type="html"><![CDATA[<h3 id="필수-JavaScript-개념"><a href="#필수-JavaScript-개념" class="headerlink" title="필수 JavaScript 개념"></a>필수 JavaScript 개념</h3><blockquote><p>Arrow Function<br>Class &amp; Super<br>Asynchronous<br>Promise &amp; Async Func  </p></blockquote><h3 id="Arrow-Function"><a href="#Arrow-Function" class="headerlink" title="Arrow Function"></a>Arrow Function</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//Basic</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">plusTwo</span>(<span class="params">s</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> s+<span class="number">2</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// Arrow Function</span></span><br><span class="line">plusTwo = <span class="function">(<span class="params">s</span>)=&gt;</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> s+<span class="number">2</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//함축</span></span><br><span class="line">plusTwo = <span class="function"><span class="params">s</span> =&gt;</span> s+<span class="number">2</span>;</span><br><span class="line"><span class="built_in">console</span>.log(plusTwo(<span class="number">10</span>)) <span class="comment">//12</span></span><br><span class="line">-----------------------------------</span><br><span class="line"><span class="comment">//MAP &amp; FILTER</span></span><br><span class="line">arr = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>,<span class="number">14</span>,<span class="number">323</span>,<span class="number">223</span>]</span><br><span class="line">arr_map = arr.map(<span class="function"><span class="keyword">function</span>(<span class="params">v</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> v*<span class="number">2</span></span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">//Arrow Function</span></span><br><span class="line">arr_map = arr.map(<span class="function"><span class="params">v</span> =&gt;</span> v*<span class="number">2</span>)<span class="comment">//2,4,6,8,10,12,14,16,18,26,646,446</span></span><br><span class="line">arr_filter = arr.filter(<span class="function"><span class="params">v</span>=&gt;</span>v&gt;<span class="number">10</span>)<span class="comment">//14,323,223</span></span><br></pre></td></tr></table></figure><h3 id="Class-amp-Super-클래스-상속"><a href="#Class-amp-Super-클래스-상속" class="headerlink" title="Class &amp; Super (클래스 상속)"></a>Class &amp; Super (클래스 상속)</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//parent</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Animal</span></span>&#123;</span><br><span class="line">    <span class="keyword">constructor</span>(leg)&#123;</span><br><span class="line">        <span class="keyword">this</span>.leg = leg</span><br><span class="line">    &#125;</span><br><span class="line">    printAnimal()&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="keyword">this</span>.name+<span class="string">"은 "</span>+<span class="built_in">String</span>(<span class="keyword">this</span>.leg)+<span class="string">"개의 다리를 가진다."</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//child</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Lion</span> <span class="keyword">extends</span> <span class="title">Animal</span></span>&#123;</span><br><span class="line">    <span class="keyword">constructor</span>(name, leg)&#123;</span><br><span class="line">        <span class="keyword">super</span>(leg) <span class="comment">//부모의 생성자 (constructor)</span></span><br><span class="line">        <span class="keyword">this</span>.name =name</span><br><span class="line">    &#125;</span><br><span class="line">    getName()&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">"내 이름은 "</span>+ <span class="keyword">this</span>.name)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">myLion = <span class="keyword">new</span> Lion(<span class="string">"king"</span>,<span class="number">4</span>)</span><br><span class="line">myLion.getName() <span class="comment">//내 이름은 king</span></span><br><span class="line">myLion.printAnimal() <span class="comment">//king은 4개의 다리를 갖는다.</span></span><br></pre></td></tr></table></figure><h3 id="Asynchronous-비동기성"><a href="#Asynchronous-비동기성" class="headerlink" title="Asynchronous(비동기성)"></a>Asynchronous(비동기성)</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//callback 기본구조</span></span><br><span class="line"><span class="comment">//callBack -&gt; 다 되면 알려줘 : 비동기의 문제점을 알려줌</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">doSomethingElseAsync</span>(<span class="params">callBack</span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'doSomethingElseAsync: Wait for half a sec.'</span>)</span><br><span class="line">    setTimeout()&#123; callBack();,<span class="number">500</span>&#125;</span><br><span class="line">&#125;</span><br><span class="line">------------------------------------</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">sayhello</span>(<span class="params">name,byCallback</span>)</span>&#123;</span><br><span class="line">    setTimeout(<span class="function"><span class="params">()</span>=&gt;</span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(name+<span class="string">" 님 안 녕 하 세 요"</span>);</span><br><span class="line">        byCallback()</span><br><span class="line">    &#125;, <span class="number">2000</span>);<span class="comment">//(2초뒤에 실행)</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">sayhello(<span class="string">'mike'</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"안 녕 히 가 세 요"</span>)</span><br><span class="line">&#125;) <span class="comment">//mike님 안녕하세요 2초뒤 안 녕 히 가 세 요</span></span><br></pre></td></tr></table></figure><h3 id="Promise-amp-Async-Func"><a href="#Promise-amp-Async-Func" class="headerlink" title="Promise &amp; Async Func"></a>Promise &amp; Async Func</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">/*  new Promise((resolve, reject)=&gt;&#123;&#125;)</span></span><br><span class="line"><span class="comment">    Resolve -&gt; 성공 / 해결 -&gt; .then()</span></span><br><span class="line"><span class="comment">    Reject -&gt; 거절 / 실패 -&gt; .catch() */</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">sayhello2</span>(<span class="params">name</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>)=&gt;</span>&#123;</span><br><span class="line">        setTimeout(<span class="function"><span class="params">()</span>=&gt;</span>&#123;</span><br><span class="line">            <span class="built_in">console</span>.log(name+<span class="string">" 님 안 녕 하 세 요"</span>)</span><br><span class="line">            resolve(<span class="string">"그 만"</span>)</span><br><span class="line">        &#125; ,<span class="number">3000</span>)</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line">sayhello2(<span class="string">"Frank"</span>)</span><br><span class="line">    .then(<span class="function">(<span class="params">v</span>)=&gt;</span><span class="built_in">console</span>.log(v+<span class="string">" 안 녕 히 가 세 요"</span>))</span><br><span class="line">    <span class="comment">//Frank 안녕하세요 3초뒤 그 만 안 녕 히 가 세 요 </span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*  </span></span><br><span class="line"><span class="comment">    .then 대신에 씀</span></span><br><span class="line"><span class="comment">    async func_name(p)&#123;</span></span><br><span class="line"><span class="comment">        const result = await get_result()&#123;&#125;</span></span><br><span class="line"><span class="comment">    &#125; </span></span><br><span class="line"><span class="comment">    </span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">sayhelloBye</span>(<span class="params">name</span>)</span>&#123;</span><br><span class="line">    loc = <span class="keyword">await</span> sayhello2(name)</span><br><span class="line">    <span class="built_in">console</span>.log(loc +<span class="string">" 안 녕 히 가 세 요"</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">sayhelloBye(<span class="string">"Hyunsoo"</span>)</span><br><span class="line"><span class="comment">//Hyunsoo 안녕하세요 3초뒤 그 만 안 녕 히 가 세 요</span></span><br></pre></td></tr></table></figure><h3 id="정리"><a href="#정리" class="headerlink" title="정리"></a>정리</h3><blockquote><ol><li>비동기의 문제를 해결하기 위한 callback</li><li>작업이 완료되면 알려주는 callback은 가독성이 좋지 X</li><li>완료를 약속하는 Promise 등장</li><li>Then / Catch로 편리하게 사용</li><li>더 편리한 것  async / await </li></ol></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;필수-JavaScript-개념&quot;&gt;&lt;a href=&quot;#필수-JavaScript-개념&quot; class=&quot;headerlink&quot; title=&quot;필수 JavaScript 개념&quot;&gt;&lt;/a&gt;필수 JavaScript 개념&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;A
      
    
    </summary>
    
    
    
      <category term="React" scheme="https://khs9628.github.io/tags/React/"/>
    
  </entry>
  
  <entry>
    <title>RESTFUL API?</title>
    <link href="https://khs9628.github.io/2019/09/09/Django2/"/>
    <id>https://khs9628.github.io/2019/09/09/Django2/</id>
    <published>2019-09-09T08:06:04.000Z</published>
    <updated>2019-09-19T05:52:46.672Z</updated>
    
    <content type="html"><![CDATA[<h4 id="REST란-REpresentational-State-Transfer"><a href="#REST란-REpresentational-State-Transfer" class="headerlink" title="REST란? REpresentational State Transfer"></a>REST란? REpresentational State Transfer</h4><ul><li>HTTP를 이용해 통신하는 네트워크상에서 정한 약속</li><li>분산 하이퍼미디어 시스템을 위한 소프트웨어 설계 형식</li><li>자원을 대표하는 단어 OR 식별자로 자원의 상태를 전송하는 방법</li><li>자원을 이름으로 구분하여 상태를 전송하는 방법</li><li>하위 호환을 깨뜨리지 않고 독립적 발전할 수 있게 도와주는 방법</li></ul><blockquote><p>REST 필요충분조건?</p><ul><li>Server - Client</li><li>STATELESS</li><li>Cache</li><li>Uniform Interface</li><li>Layered System</li><li>Code-On-Demand</li></ul></blockquote><h4 id="API란-Application-Program-Interface"><a href="#API란-Application-Program-Interface" class="headerlink" title="API란? Application Program Interface"></a>API란? Application Program Interface</h4><p><img alt="API" data-src="/assets/img/Django/api.PNG" class="lozad"><br>특정방식으로 response나 request를 보내는 형식</p><h4 id="RESTAPI란-REST-아키텍쳐-스타일을-따르는-API"><a href="#RESTAPI란-REST-아키텍쳐-스타일을-따르는-API" class="headerlink" title="RESTAPI란? REST 아키텍쳐 스타일을 따르는 API"></a>RESTAPI란? REST 아키텍쳐 스타일을 따르는 API</h4><p>HTTP로 CRUD를 구현할 수 있는 API?<br>-&gt; JSON : 모든 태그가 만들어져 있는 것도 아님 만든 이가 정의하기 나름  -&gt; RESTFUL하지 못함</p><h4 id="현재의-RESTFUL-API"><a href="#현재의-RESTFUL-API" class="headerlink" title="현재의 RESTFUL API?"></a>현재의 RESTFUL API?</h4><p>Self-Description (x)  HATROAS(x) -&gt; 잘 지켜지지 않고 있다!</p><h3 id="JSON-직렬화-Serializer"><a href="#JSON-직렬화-Serializer" class="headerlink" title="JSON 직렬화 - Serializer"></a>JSON 직렬화 - Serializer</h3><p>(Model)Form vs (Model)Serializer</p><table><thead><tr><th align="center">Django</th><th align="center">Serializer</th></tr></thead><tbody><tr><td align="center">Form/ModelForm</td><td align="center">Serializer/ModelSerializer</td></tr><tr><td align="center">Model로 부터 Field 읽어옴</td><td align="center">=</td></tr><tr><td align="center">유효성검사</td><td align="center">=</td></tr><tr><td align="center">HTML Form</td><td align="center">JSON 문자열</td></tr></tbody></table><p><img alt="Serializer" data-src="/assets/img/Django/serializer.PNG" class="lozad"></p><h3 id="코드"><a href="#코드" class="headerlink" title="코드"></a>코드</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#bash</span></span><br><span class="line">pip install djangorestframework <span class="comment">#REST설치</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#settings.py</span></span><br><span class="line">INSTALLED_APPS = [</span><br><span class="line"><span class="string">'rest_framework'</span> <span class="comment">#rest installed app 에 등록</span></span><br><span class="line">]</span><br><span class="line"></span><br><span class="line"><span class="comment">#app/urls.py</span></span><br><span class="line"><span class="keyword">from</span> django.urls <span class="keyword">import</span> path, include</span><br><span class="line"><span class="keyword">from</span> rest_framework.routers <span class="keyword">import</span> DefaultRouter</span><br><span class="line"><span class="keyword">from</span> . <span class="keyword">import</span> views</span><br><span class="line"></span><br><span class="line"><span class="comment">#Django rest framework -&gt; router -&gt; url</span></span><br><span class="line"></span><br><span class="line">router = DefaultRouter()</span><br><span class="line">router.register(<span class="string">'post'</span>, views.PostViewSet)</span><br><span class="line"></span><br><span class="line">urlpatterns = [</span><br><span class="line">    path(<span class="string">''</span>,include(router.urls)),</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line"><span class="comment">#app/views.py</span></span><br><span class="line"><span class="keyword">from</span> rest_framework <span class="keyword">import</span> viewsets</span><br><span class="line"><span class="keyword">from</span> .models <span class="keyword">import</span> Post</span><br><span class="line"><span class="keyword">from</span> .serializer <span class="keyword">import</span> PostSerializer</span><br><span class="line"></span><br><span class="line"><span class="comment">#CBV (Class Based View)</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">PostViewSet</span><span class="params">(viewsets.ModelViewSet)</span>:</span></span><br><span class="line">    queryset = Post.objects.all()</span><br><span class="line">    serializer_class = PostSerializer</span><br><span class="line"></span><br><span class="line"><span class="comment">#serializer.py &lt;=&gt; forms.py</span></span><br><span class="line"><span class="keyword">from</span> .models <span class="keyword">import</span> Post</span><br><span class="line"><span class="keyword">from</span> rest_framework <span class="keyword">import</span> serializers</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">PostSerializer</span><span class="params">(serializers.ModelSerializer)</span>:</span></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Meta</span>:</span></span><br><span class="line">        model = Post</span><br><span class="line">        <span class="comment">#fields = '__all__'</span></span><br><span class="line">        fields = [<span class="string">'id'</span>,<span class="string">'title'</span>,<span class="string">'body'</span>]</span><br><span class="line">        read_only_fields =(<span class="string">'title'</span>,)</span><br></pre></td></tr></table></figure><h3 id="실행화면"><a href="#실행화면" class="headerlink" title="실행화면"></a>실행화면</h3><p><img alt="실행화면" data-src="/assets/img/Django/%EC%8B%A4%ED%96%89%ED%99%94%EB%A9%B4.PNG" class="lozad"></p><p><a href="https://www.django-rest-framework.org/" rel="external nofollow noopener noreferrer" target="_blank">REST 참고 사이트</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;REST란-REpresentational-State-Transfer&quot;&gt;&lt;a href=&quot;#REST란-REpresentational-State-Transfer&quot; class=&quot;headerlink&quot; title=&quot;REST란? REpresentat
      
    
    </summary>
    
    
    
      <category term="Django" scheme="https://khs9628.github.io/tags/Django/"/>
    
  </entry>
  
  <entry>
    <title>CBV(Class Based View)</title>
    <link href="https://khs9628.github.io/2019/09/09/Django1/"/>
    <id>https://khs9628.github.io/2019/09/09/Django1/</id>
    <published>2019-09-09T07:33:40.000Z</published>
    <updated>2019-09-10T04:57:53.577Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Restful-API-Django"><a href="#Restful-API-Django" class="headerlink" title="Restful API Django"></a>Restful API Django</h2><p><img alt="RESTAPI" data-src="/assets/img/Django/RestAPI.png" class="lozad"></p><h4 id="JSON-JavaScript-Object-Notation"><a href="#JSON-JavaScript-Object-Notation" class="headerlink" title="JSON (JavaScript Object Notation)"></a>JSON (JavaScript Object Notation)</h4><p>데이터의 송수신을 자바스크립트의 객체로서 수행할 수 있게끔하는 가벼운 문자열 데이터 표현식<br>&lt;&gt; XML(Extensible Markup Language)<br>만국 공통 자료형 -&gt; 문자열<br>문자열로 변환해서 전송하는 과정 -&gt; 직렬화(Serializer)</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> json</span><br><span class="line"></span><br><span class="line">diary = &#123;</span><br><span class="line">    <span class="string">'id'</span> : <span class="number">3</span>,</span><br><span class="line">    <span class="string">'title'</span> : <span class="string">'I\'m starving'</span>,</span><br><span class="line">    <span class="string">'body'</span>: <span class="string">' what&gt;??'</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">print(type(diary)) <span class="comment">#dic</span></span><br><span class="line"></span><br><span class="line">json_diary = json.dump(diary) <span class="comment">#dictionary -&gt; json</span></span><br><span class="line">print(type(json_diary)) <span class="comment">#str</span></span><br><span class="line"></span><br><span class="line">back_diary = json.loads(json_diary) <span class="comment">#json -&gt; dictionary</span></span><br><span class="line">print(type(back_diary)) <span class="comment"># dic</span></span><br></pre></td></tr></table></figure><p><a href="http://www.json.org/" rel="external nofollow noopener noreferrer" target="_blank">JSON참고</a></p><h4 id="Http-Request-amp-Method"><a href="#Http-Request-amp-Method" class="headerlink" title="Http Request &amp; Method"></a>Http Request &amp; Method</h4><p>Http Request</p><table><thead><tr><th>Method</th><th>Meaning</th></tr></thead><tbody><tr><td>GET</td><td>요청받은 URL의 정보를 검색하여 응답한다.</td></tr><tr><td>POST</td><td>요청된 자원을 생성(CREATE)한다.</td></tr><tr><td>PUT</td><td>요청된 자원을 수정(UPDATE)한다.</td></tr><tr><td>DELETE</td><td>요청된 자원을 삭제(DELETE)한다.</td></tr><tr><td>PATCH</td><td>요청된 자원의 일부를 교체(수정)한다.</td></tr><tr><td>OPTION</td><td>웹서버에서 지원되는 메소드의 종류 확인</td></tr></tbody></table><p>HTTP Response</p><blockquote><p>1xx(정보) : 요청을 받았으며 프로세스를 계속한다.<br>2xx(성공) : 요청을 성공적으로 받았으며 인식했고 수용하였다.<br>3xx(리다이렉션) : 요청 완료를 위해 추가 작업 조치가 필요하다.<br>4xx(클라이언트 오류) : 요청의 문법이 잘못되었거나 요청을 처리할 수 없다.<br>5xx(서버 오류) : 서버가 명백히 유효한 요청에 대해 충족을 실패했다.</p></blockquote><h4 id="Httpie"><a href="#Httpie" class="headerlink" title="Httpie"></a>Httpie</h4><p>Command Line으로 동작하는 Http Client</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">pip install --upgrade httpie <span class="comment">#설치</span></span><br><span class="line">http [flags] [Method] URL [ITEM[ITME]]</span><br><span class="line"><span class="comment">#flags = 옵션</span></span><br><span class="line"><span class="comment">#Method = Request (GET / POST / PUT / DELETE / PATCH / OPTION)</span></span><br><span class="line"><span class="comment">#ITEM = 인자 #GET -&gt; X == A #POST -&gt; X = A</span></span><br></pre></td></tr></table></figure><p>POST</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#JSON 형식의 요청:</span></span><br><span class="line">http --json POST [주소] GET == 값 / POST = 값</span><br><span class="line"><span class="comment">#HTML form 형식의 요청:</span></span><br><span class="line">http --form POST [주소] GET == 값 / POST = 값</span><br></pre></td></tr></table></figure><p>HTML 방식<br><img alt="예" data-src="/assets/img/Django/httpPost.png" class="lozad"><br>JSON방식<br><img alt="예2" data-src="/assets/img/Django/httpPost2.png" class="lozad"></p><p><a href="https://httpie.org/" rel="external nofollow noopener noreferrer" target="_blank">HTTPIE 참고 사이트</a></p><h4 id="CBV-Generic-View-lt-gt-FBV"><a href="#CBV-Generic-View-lt-gt-FBV" class="headerlink" title="CBV(Generic View) &lt;&gt; FBV"></a>CBV(Generic View) &lt;&gt; FBV</h4><p>Class Based View &lt;&gt; Function Based View<br>3가지 질문<br>왜 클래스?<br>함수로 작성한 것과 무슨 차이?<br>Views.py는 뭘로 채워 넣어야 해? -&gt; callable object</p><p>function or class = callable object<br>class -&gt; 상속이 가능하다! -&gt; 중복의 제거 , 코드의 재사용</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;Restful-API-Django&quot;&gt;&lt;a href=&quot;#Restful-API-Django&quot; class=&quot;headerlink&quot; title=&quot;Restful API Django&quot;&gt;&lt;/a&gt;Restful API Django&lt;/h2&gt;&lt;p&gt;&lt;img a
      
    
    </summary>
    
    
    
      <category term="Django" scheme="https://khs9628.github.io/tags/Django/"/>
    
  </entry>
  
  <entry>
    <title>전화번호 목록</title>
    <link href="https://khs9628.github.io/2019/09/07/codingTest2/"/>
    <id>https://khs9628.github.io/2019/09/07/codingTest2/</id>
    <published>2019-09-07T12:05:57.000Z</published>
    <updated>2019-09-10T09:11:25.899Z</updated>
    
    <content type="html"><![CDATA[<h2 id="전화번호-목록"><a href="#전화번호-목록" class="headerlink" title="전화번호 목록"></a><a href="https://programmers.co.kr/learn/courses/30/lessons/42576" rel="external nofollow noopener noreferrer" target="_blank">전화번호 목록</a></h2><p><strong>HASH</strong></p><p>전화번호부에 적힌 전화번호 중, 한 번호가 다른 번호의 접두어인 경우가 있는지 확인하려 합니다. 전화번호가 다음과 같을 경우,구조대 전화번호는 영석이의 전화번호의 접두사입니다.</p><ul><li>구조대 : 119</li><li>박준영 : 97 674 223</li><li>지영석 : 11 9552 4421</li></ul><p>전화번호부에 적힌 전화번호를 담은 배열 phone_book 이 solution 함수의 매개변수로 주어질 때, 어떤 번호가 다른 번호의 접두어인 경우가 있으면 false를 그렇지 않으면 true를 return 하도록 solution 함수를 작성해주세요.</p><h2 id="제한사항"><a href="#제한사항" class="headerlink" title="제한사항"></a>제한사항</h2><blockquote><ul><li>phone_book의 길이는 1 이상 1,000,000 이하입니다.</li><li>각 전화번호의 길이는 1 이상 20 이하입니다.</li></ul></blockquote><h2 id="입출력-예"><a href="#입출력-예" class="headerlink" title="입출력 예"></a>입출력 예</h2><p><img alt="RESULT" data-src="/assets/img/codingtest/codingtest2.PNG" class="lozad"></p><h2 id="1차-답안-gt-Hash-알고리즘-X"><a href="#1차-답안-gt-Hash-알고리즘-X" class="headerlink" title="1차 답안 -&gt; Hash 알고리즘 X"></a>1차 답안 -&gt; Hash 알고리즘 X</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">solution</span><span class="params">(String[] phone_book)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">boolean</span> answer = <span class="keyword">true</span>;</span><br><span class="line">        <span class="keyword">return</span> answer;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>하루를 기록하다</p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;전화번호-목록&quot;&gt;&lt;a href=&quot;#전화번호-목록&quot; class=&quot;headerlink&quot; title=&quot;전화번호 목록&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://programmers.co.kr/learn/courses/30/lessons/42576
      
    
    </summary>
    
    
    
      <category term="알고리즘" scheme="https://khs9628.github.io/tags/%EC%95%8C%EA%B3%A0%EB%A6%AC%EC%A6%98/"/>
    
  </entry>
  
  <entry>
    <title>NEXT</title>
    <link href="https://khs9628.github.io/2019/09/07/DBtest2/"/>
    <id>https://khs9628.github.io/2019/09/07/DBtest2/</id>
    <published>2019-09-07T09:40:40.000Z</published>
    <updated>2019-09-08T14:19:06.633Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>하루를 기록하다</p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;하루를 기록하다&lt;/p&gt;
&lt;/blockquote&gt;

      
    
    </summary>
    
    
    
      <category term="DB" scheme="https://khs9628.github.io/tags/DB/"/>
    
  </entry>
  
  <entry>
    <title>7DAYSQL Challenge</title>
    <link href="https://khs9628.github.io/2019/09/07/DBtest1/"/>
    <id>https://khs9628.github.io/2019/09/07/DBtest1/</id>
    <published>2019-09-07T07:08:56.000Z</published>
    <updated>2019-09-10T07:16:03.359Z</updated>
    
    <content type="html"><![CDATA[<h1 id="7DAYSQL-Challenge"><a href="#7DAYSQL-Challenge" class="headerlink" title="7DAYSQL Challenge"></a>7DAYSQL Challenge</h1><pre><code>ANIMAL_INS 테이블은 동물 보호소에 들어온 동물의 정보를 담은 테이블입니다.ANIMAL_INS 테이블 구조는 다음과 같으며, ANIMAL_ID, ANIMAL_TYPE, DATETIME,INTAKE_CONDITION, NAME, SEX_UPON_INTAKE는 각각 동물의 아이디, 생물 종,보호 시작일, 보호 시작 시 상태, 이름, 성별 및 중성화 여부를 나타냅니다.</code></pre><h3 id="ANIMAL-INS-TABLE"><a href="#ANIMAL-INS-TABLE" class="headerlink" title="ANIMAL_INS TABLE"></a>ANIMAL_INS TABLE</h3><table><thead><tr><th align="center">NAME</th><th align="center">TYPE</th><th align="center">NULLABLE</th></tr></thead><tbody><tr><td align="center">ANIMAL_ID</td><td align="center">VARCHAR(N)</td><td align="center">FALSE</td></tr><tr><td align="center">ANIMAL_TYPE</td><td align="center">VARCHAR(N)</td><td align="center">FALSE</td></tr><tr><td align="center">DATETIME</td><td align="center">DATETIME</td><td align="center">FALSE</td></tr><tr><td align="center">INTAKE_CONDITION</td><td align="center">VARCHAR(N)</td><td align="center">FALSE</td></tr><tr><td align="center">NAME</td><td align="center">VARCHAR(N)</td><td align="center">TRUE</td></tr><tr><td align="center">SEX_UPON_INTAKE</td><td align="center">VARCHAR(N)</td><td align="center">FALSE</td></tr></tbody></table><p><img alt="inTable" data-src="/assets/img/DB/animalin.PNG" class="lozad"></p><pre><code>ANIMAL_OUTS 테이블은 동물 보호소에서 입양 보낸 동물의 정보를 담은테이블입니다. ANIMAL_OUTS 테이블 구조는 다음과 같으며, ANIMAL_ID,ANIMAL_TYPE, DATETIME, NAME, SEX_UPON_OUTCOME는 각각 동물의 아이디, 생물종, 입양일, 이름, 성별 및 중성화 여부를 나타냅니다. ANIMAL_OUTS 테이블의ANIMAL_ID는 ANIMAL_INS의 ANIMAL_ID의 외래 키입니다.</code></pre><h3 id="ANIMAL-OUTS-TABLE"><a href="#ANIMAL-OUTS-TABLE" class="headerlink" title="ANIMAL_OUTS TABLE"></a>ANIMAL_OUTS TABLE</h3><table><thead><tr><th align="center">NAME</th><th align="center">TYPE</th><th align="center">NULLABLE</th></tr></thead><tbody><tr><td align="center">ANIMAL_ID</td><td align="center">VARCHAR(N)</td><td align="center">FALSE</td></tr><tr><td align="center">ANIMAL_TYPE</td><td align="center">VARCHAR(N)</td><td align="center">FALSE</td></tr><tr><td align="center">DATETIME</td><td align="center">DATETIME</td><td align="center">FALSE</td></tr><tr><td align="center">NAME</td><td align="center">VARCHAR(N)</td><td align="center">TRUE</td></tr><tr><td align="center">SEX_UPON_INTAKE</td><td align="center">VARCHAR(N)</td><td align="center">FALSE</td></tr></tbody></table><p><img alt="outTable" data-src="/assets/img/DB/animalout.PNG" class="lozad"></p><h2 id="1번-모든-레코드-조회하기"><a href="#1번-모든-레코드-조회하기" class="headerlink" title="1번. 모든 레코드 조회하기"></a><a href="https://programmers.co.kr/learn/courses/30/lessons/59043" rel="external nofollow noopener noreferrer" target="_blank">1번. 모든 레코드 조회하기</a></h2><h3 id="A"><a href="#A" class="headerlink" title="A)"></a>A)</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> ANIMAL_INS</span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> ANIMAL_ID</span><br></pre></td></tr></table></figure><h2 id="2번-역순-정렬하기"><a href="#2번-역순-정렬하기" class="headerlink" title="2번. 역순 정렬하기"></a><a href="https://programmers.co.kr/learn/courses/30/lessons/59035" rel="external nofollow noopener noreferrer" target="_blank">2번. 역순 정렬하기</a></h2><pre><code>동물 보호소에 들어온 모든 동물의 이름과 보호 시작일을 조회하는 SQL문을 작성해주세요. 이때 결과는 ANIMAL_ID 역순으로 보여주세요. SQL을 실행하면 다음과 같이 출력되어야 합니다.</code></pre><h3 id="A-1"><a href="#A-1" class="headerlink" title="A)"></a>A)</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="keyword">NAME</span>, DATETIME <span class="keyword">FROM</span> ANIMAL_INS</span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> ANIMAL_ID <span class="keyword">DESC</span></span><br></pre></td></tr></table></figure><h2 id="3번-아픈-동물-찾기"><a href="#3번-아픈-동물-찾기" class="headerlink" title="3번. 아픈 동물 찾기"></a><a href="https://programmers.co.kr/learn/courses/30/lessons/59036" rel="external nofollow noopener noreferrer" target="_blank">3번. 아픈 동물 찾기</a></h2><pre><code>동물 보호소에 들어온 동물 중 아픈 동물의 아이디와 이름을 조회하는 SQL 문을작성해주세요. 이때 결과는 아이디 순으로 조회해주세요.</code></pre><h3 id="A-2"><a href="#A-2" class="headerlink" title="A)"></a>A)</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> ANIMAL_ID,<span class="keyword">NAME</span> <span class="keyword">FROM</span> ANIMAL_INS</span><br><span class="line"><span class="keyword">WHERE</span> INTAKE_CONDITION =<span class="string">'SICK'</span></span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> ANIMAL_ID <span class="keyword">ASC</span></span><br></pre></td></tr></table></figure><h2 id="4번-어린-동물-찾기"><a href="#4번-어린-동물-찾기" class="headerlink" title="4번. 어린 동물 찾기"></a><a href="https://programmers.co.kr/learn/courses/30/lessons/59037" rel="external nofollow noopener noreferrer" target="_blank">4번. 어린 동물 찾기</a></h2><pre><code>동물 보호소에 들어온 동물 중 젊은 동물의 아이디와 이름을 조회하는 SQL 문을   작성해주세요. 이때 결과는 아이디 순으로 조회해주세요.</code></pre><h3 id="A-3"><a href="#A-3" class="headerlink" title="A)"></a>A)</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> ANIMAL_ID , <span class="keyword">NAME</span></span><br><span class="line"><span class="keyword">FROM</span> ANIMAL_INS</span><br><span class="line"><span class="keyword">WHERE</span> INTAKE_CONDITION &lt;&gt; <span class="string">'AGED'</span></span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> ANIMAL_ID</span><br></pre></td></tr></table></figure><h2 id="5번-최솟값-구하기"><a href="#5번-최솟값-구하기" class="headerlink" title="5번. 최솟값 구하기"></a><a href="https://programmers.co.kr/learn/courses/30/lessons/59038" rel="external nofollow noopener noreferrer" target="_blank">5번. 최솟값 구하기</a></h2><pre><code>동물 보호소에 가장 먼저 들어온 동물은 언제 들어왔는지 조회하는 SQL 문을  작성해주세요.</code></pre><h3 id="A-4"><a href="#A-4" class="headerlink" title="A)"></a>A)</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> DATETIME</span><br><span class="line"><span class="keyword">FROM</span> ANIMAL_INS</span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> DATETIME <span class="keyword">ASC</span></span><br><span class="line"><span class="keyword">LIMIT</span> <span class="number">1</span></span><br></pre></td></tr></table></figure><h2 id="6번-이름이-없는-동물의-아이디"><a href="#6번-이름이-없는-동물의-아이디" class="headerlink" title="6번. 이름이 없는 동물의 아이디"></a><a href="https://programmers.co.kr/learn/courses/30/lessons/59039" rel="external nofollow noopener noreferrer" target="_blank">6번. 이름이 없는 동물의 아이디</a></h2><pre><code>동물 보호소에 들어온 동물 중, 이름이 없는 채로 들어온 동물의 ID를 조회하는 SQL 문을 작성해주세요. 단, ID는 오름차순 정렬되어야 합니다.</code></pre><h3 id="A-5"><a href="#A-5" class="headerlink" title="A)"></a>A)</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> ANIMAL_ID </span><br><span class="line"><span class="keyword">FROM</span> ANIMAL_INS</span><br><span class="line"><span class="keyword">WHERE</span> <span class="keyword">NAME</span> <span class="keyword">IS</span> <span class="literal">NULL</span></span><br></pre></td></tr></table></figure><h2 id="7번-고양이와-개는-몇-마리-있을까"><a href="#7번-고양이와-개는-몇-마리-있을까" class="headerlink" title="7번. 고양이와 개는 몇 마리 있을까"></a><a href="https://programmers.co.kr/learn/courses/30/lessons/59039" rel="external nofollow noopener noreferrer" target="_blank">7번. 고양이와 개는 몇 마리 있을까</a></h2><pre><code>동물 보호소에 들어온 동물 중 고양이와 개가 각각 몇 마리인지 조회하는 SQL문을 작성해주세요. 이때 고양이가 개보다 먼저 조회해주세요.</code></pre><h3 id="A-6"><a href="#A-6" class="headerlink" title="A)"></a>A)</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> animal_type, <span class="keyword">count</span>(animal_type) </span><br><span class="line"><span class="keyword">FROM</span> ANIMAL_INS </span><br><span class="line"><span class="keyword">WHERE</span> ANIMAL_TYPE <span class="keyword">IN</span> (<span class="string">'Cat'</span>, <span class="string">'Dog'</span>)</span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> animal_type</span><br></pre></td></tr></table></figure><h2 id="8번-동명-동물-수-찾기"><a href="#8번-동명-동물-수-찾기" class="headerlink" title="8번. 동명 동물 수 찾기"></a><a href="https://programmers.co.kr/learn/courses/30/lessons/59041" rel="external nofollow noopener noreferrer" target="_blank">8번. 동명 동물 수 찾기</a></h2><pre><code>동물 보호소에 들어온 동물 이름 중 두 번 이상 쓰인 이름과 해당 이름이 쓰인횟수를 조회하는 SQL문을 작성해주세요. 이때 결과는 이름이 없는 동물은 집계에서 제외하며, 결과는 이름 순으로 조회해주세요.</code></pre><h3 id="A-7"><a href="#A-7" class="headerlink" title="A)"></a>A)</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="keyword">name</span> ,<span class="keyword">COUNT</span>(<span class="keyword">name</span>)</span><br><span class="line"><span class="keyword">FROM</span> ANIMAL_INS</span><br><span class="line"><span class="keyword">WHERE</span> <span class="keyword">name</span> <span class="keyword">IN</span> (<span class="keyword">SELECT</span> <span class="keyword">DISTINCT</span> <span class="keyword">name</span> <span class="keyword">FROM</span> ANIMAL_INS) </span><br><span class="line"><span class="keyword">AND</span> <span class="keyword">name</span> <span class="keyword">IS</span> <span class="keyword">NOT</span> <span class="literal">NULL</span></span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> <span class="keyword">name</span></span><br><span class="line"><span class="keyword">HAVING</span> <span class="keyword">COUNT</span>(<span class="keyword">name</span>) &gt; <span class="number">1</span>;</span><br></pre></td></tr></table></figure><h2 id="9번-없어진-기록-찾기"><a href="#9번-없어진-기록-찾기" class="headerlink" title="9번. 없어진 기록 찾기"></a><a href="https://programmers.co.kr/learn/courses/30/lessons/59042" rel="external nofollow noopener noreferrer" target="_blank">9번. 없어진 기록 찾기</a></h2><pre><code>천재지변으로 인해 일부 데이터가 유실되었습니다. 입양을 간 기록은 있는데,보호소에 들어온 기록이 없는 동물의 ID와 이름을 ID 순으로 조회하는 SQL문을 작성해주세요.</code></pre><h2 id="A-8"><a href="#A-8" class="headerlink" title="A)"></a>A)</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> animal_id , <span class="keyword">name</span></span><br><span class="line"><span class="keyword">FROM</span> ANIMAL_OUTS</span><br><span class="line"><span class="keyword">WHERE</span>  animal_id  <span class="keyword">NOT</span> <span class="keyword">IN</span>( <span class="keyword">SELECT</span> animal_id</span><br><span class="line">    <span class="keyword">FROM</span> ANIMAL_INS</span><br><span class="line">)</span><br></pre></td></tr></table></figure><h2 id="10번-있었는데-없었습니다"><a href="#10번-있었는데-없었습니다" class="headerlink" title="10번. 있었는데 없었습니다."></a><a href="https://programmers.co.kr/learn/courses/30/lessons/59043" rel="external nofollow noopener noreferrer" target="_blank">10번. 있었는데 없었습니다.</a></h2><pre><code>관리자의 실수로 일부 동물의 입양일이 잘못 입력되었습니다. 보호 시작일보다입양일이 더 빠른 동물의 아이디와 이름을 조회하는 SQL문을 작성해주세요. 이때 결과는 보호 시작일이 빠른 순으로 조회해야합니다.</code></pre><h2 id="A-9"><a href="#A-9" class="headerlink" title="A)"></a>A)</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> o.animal_id, o.name</span><br><span class="line"><span class="keyword">FROM</span> animal_outs <span class="keyword">AS</span> o</span><br><span class="line"><span class="keyword">INNER</span> <span class="keyword">JOIN</span>  animal_ins <span class="keyword">AS</span> i</span><br><span class="line"><span class="keyword">ON</span> o.animal_id = i.animal_id</span><br><span class="line"><span class="keyword">WHERE</span> o.datetime &lt; i.datetime</span><br><span class="line"><span class="keyword">order</span> <span class="keyword">by</span> i.datetime <span class="keyword">asc</span>;</span><br></pre></td></tr></table></figure><h2 id="11번-오래-보호한-동물-1"><a href="#11번-오래-보호한-동물-1" class="headerlink" title="11번. 오래 보호한 동물(1)"></a><a href="https://programmers.co.kr/learn/courses/30/lessons/59044" rel="external nofollow noopener noreferrer" target="_blank">11번. 오래 보호한 동물(1)</a></h2><pre><code>아직 입양을 못 간 동물 중, 가장 오래 보호소에 있었던 동물 3마리의 이름과 보호 시작일을 조회하는 SQL문을 작성해주세요. 이때 결과는 보호 시작일 순으로 조회해야 합니다.</code></pre><h3 id="A-10"><a href="#A-10" class="headerlink" title="A)"></a>A)</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="keyword">name</span> , datetime</span><br><span class="line"><span class="keyword">FROM</span> ANIMAL_INS</span><br><span class="line"><span class="keyword">WHERE</span> animal_id  <span class="keyword">NOT</span> <span class="keyword">IN</span>( <span class="keyword">SELECT</span> animal_id</span><br><span class="line">    <span class="keyword">FROM</span> ANIMAL_OUTS</span><br><span class="line">) </span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> DATETIME <span class="keyword">ASC</span></span><br><span class="line"><span class="keyword">Limit</span> <span class="number">3</span>;</span><br></pre></td></tr></table></figure><h2 id="12번-보호소에서-중성화한-동물"><a href="#12번-보호소에서-중성화한-동물" class="headerlink" title="12번. 보호소에서 중성화한 동물"></a><a href="https://programmers.co.kr/learn/courses/30/lessons/59045" rel="external nofollow noopener noreferrer" target="_blank">12번. 보호소에서 중성화한 동물</a></h2><pre><code>보호소에서 중성화 수술을 거친 동물 정보를 알아보려 합니다. 보호소에 들어올당시에는 중성화1되지 않았지만, 보호소를 나갈 당시에는 중성화된 동물의 아이디와생물 종, 이름을 조회하는 아이디 순으로 조회하는 SQL 문을 작성해주세요.</code></pre><h3 id="A-11"><a href="#A-11" class="headerlink" title="A)"></a>A)</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> o.animal_id,o.animal_type ,o.name</span><br><span class="line"><span class="keyword">FROM</span> animal_outs <span class="keyword">AS</span> o</span><br><span class="line"><span class="keyword">JOIN</span>  animal_ins <span class="keyword">AS</span> i</span><br><span class="line"><span class="keyword">ON</span> o.animal_id = i.animal_id</span><br><span class="line"><span class="keyword">WHERE</span> o.SEX_UPON_OUTCOME &lt;&gt; i.SEX_UPON_INTAKE</span><br></pre></td></tr></table></figure><h2 id="13번-루시와-엘라-찾기"><a href="#13번-루시와-엘라-찾기" class="headerlink" title="13번. 루시와 엘라 찾기"></a><a href="https://programmers.co.kr/learn/courses/30/lessons/59046" rel="external nofollow noopener noreferrer" target="_blank">13번. 루시와 엘라 찾기</a></h2><pre><code>동물 보호소에 들어온 동물 중 이름이 Lucy, Ella, Pickle, Rogan, Sabrina,Mitty인 동물의 아이디와 이름, 성별을 조회하는 SQL 문을 작성해주세요.</code></pre><h3 id="A-12"><a href="#A-12" class="headerlink" title="A)"></a>A)</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> o.animal_id,o.animal_type ,o.name</span><br><span class="line"><span class="keyword">FROM</span> animal_outs <span class="keyword">AS</span> o</span><br><span class="line"><span class="keyword">JOIN</span>  animal_ins <span class="keyword">AS</span> i</span><br><span class="line"><span class="keyword">ON</span> o.animal_id = i.animal_id</span><br><span class="line"><span class="keyword">WHERE</span> o.SEX_UPON_OUTCOME &lt;&gt; i.SEX_UPON_INTAKE</span><br></pre></td></tr></table></figure><h2 id="14번-이름에-el이-들어가는-동물-찾기"><a href="#14번-이름에-el이-들어가는-동물-찾기" class="headerlink" title="14번. 이름에 el이 들어가는 동물 찾기"></a><a href="https://programmers.co.kr/learn/courses/30/lessons/59047" rel="external nofollow noopener noreferrer" target="_blank">14번. 이름에 el이 들어가는 동물 찾기</a></h2><pre><code>보호소에서 중성화 수술을 거친 동물 정보를 알아보려 합니다. 보호소에 들어올당시에는 중성화1되지 않았지만, 보호소를 나갈 당시에는 중성화된 동물의 아이디와생물 종, 이름을 조회하는 아이디 순으로 조회하는 SQL 문을 작성해주세요.</code></pre><h3 id="A-13"><a href="#A-13" class="headerlink" title="A)"></a>A)</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> animal_id, <span class="keyword">name</span> </span><br><span class="line"><span class="keyword">FROM</span> animal_ins </span><br><span class="line"><span class="keyword">WHERE</span> <span class="keyword">name</span> <span class="keyword">LIKE</span> <span class="string">'%el%'</span></span><br><span class="line"><span class="keyword">AND</span> ANIMAL_TYPE = <span class="string">'dog'</span></span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> <span class="keyword">name</span></span><br></pre></td></tr></table></figure><h2 id="15번-이름에-el이-들어가는-동물-찾기"><a href="#15번-이름에-el이-들어가는-동물-찾기" class="headerlink" title="15번. 이름에 el이 들어가는 동물 찾기"></a><a href="https://programmers.co.kr/learn/courses/30/lessons/59047" rel="external nofollow noopener noreferrer" target="_blank">15번. 이름에 el이 들어가는 동물 찾기</a></h2><pre><code>동물 보호소에 들어온 모든 동물의 아이디와 이름, 보호 시작일을 이름 순으로 조회하는 SQL문을 작성해주세요. 단, 이름이 같은 동물 중에서는 보호를 먼저 시작한 동물을 먼저 보여줘야 합니다</code></pre><h3 id="A-14"><a href="#A-14" class="headerlink" title="A)"></a>A)</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> animal_id, <span class="keyword">name</span> , datetime</span><br><span class="line"><span class="keyword">FROM</span> animal_ins</span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> <span class="keyword">NAME</span> <span class="keyword">ASC</span>, datetime <span class="keyword">desc</span></span><br></pre></td></tr></table></figure><h6 id="도움이-이혜민"><a href="#도움이-이혜민" class="headerlink" title="도움이 : 이혜민"></a>도움이 : 이혜민</h6><blockquote><p>하루를 기록하다</p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;7DAYSQL-Challenge&quot;&gt;&lt;a href=&quot;#7DAYSQL-Challenge&quot; class=&quot;headerlink&quot; title=&quot;7DAYSQL Challenge&quot;&gt;&lt;/a&gt;7DAYSQL Challenge&lt;/h1&gt;&lt;pre&gt;&lt;code&gt;AN
      
    
    </summary>
    
    
    
      <category term="DB" scheme="https://khs9628.github.io/tags/DB/"/>
    
  </entry>
  
</feed>
