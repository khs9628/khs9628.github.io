<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>현수쓰</title>
  
  <subtitle>하루를 기록하다</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://khs9628.github.io/"/>
  <updated>2020-11-10T07:24:08.600Z</updated>
  <id>https://khs9628.github.io/</id>
  
  <author>
    <name>현수쓰</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>TIL 11월</title>
    <link href="https://khs9628.github.io/2020/11/30/2011-TIL/"/>
    <id>https://khs9628.github.io/2020/11/30/2011-TIL/</id>
    <published>2020-11-30T07:27:38.000Z</published>
    <updated>2020-11-10T07:24:08.600Z</updated>
    
    <content type="html"><![CDATA[<h1 id="하루를-기록하다"><a href="#하루를-기록하다" class="headerlink" title="하루를 기록하다"></a>하루를 기록하다</h1><h2 id="좋은-습관은-좋은사람을-만든다"><a href="#좋은-습관은-좋은사람을-만든다" class="headerlink" title="좋은 습관은 좋은사람을 만든다."></a>좋은 습관은 좋은사람을 만든다.</h2><h1 id="TO-DO"><a href="#TO-DO" class="headerlink" title="TO-DO"></a>TO-DO</h1><ol><li>일 1회 알고리즘 문제 1개 이상 풀기</li><li>Spring 프로젝트 </li><li>면접 준비 및 자소서 준비</li><li>DB 관련 공부</li></ol><h2 id="2020-11-02"><a href="#2020-11-02" class="headerlink" title="2020-11-02"></a>2020-11-02</h2><ol><li><del>자소서 첨삭</del></li></ol><h2 id="2020-11-03"><a href="#2020-11-03" class="headerlink" title="2020-11-03"></a>2020-11-03</h2><ol><li><del>자소서 첨삭</del></li><li><del>Spring 환경설정 및 기본개념 정리</del></li><li><del>알고리즘 1개 풀이</del></li></ol><h2 id="2020-11-04"><a href="#2020-11-04" class="headerlink" title="2020-11-04"></a>2020-11-04</h2><ol><li><del>Spring 기본 구조(jsp Model 1방식)</del></li><li><del>알고리즘 2개 풀이</del></li></ol><ul><li><del>전화번호부</del></li><li>~~위장</li><li><del>주식가격</del></li></ul><h2 id="2020-11-05"><a href="#2020-11-05" class="headerlink" title="2020-11-05"></a>2020-11-05</h2><ol><li><del>Spring 기본구조()</del></li><li>알고리즘 2개풀이</li></ol><ul><li><del>기능개발</del></li><li><del>다리위의 트럭</del></li></ul><h2 id="2020-11-06"><a href="#2020-11-06" class="headerlink" title="2020-11-06"></a>2020-11-06</h2><ol><li><del>Springboot + myBatis</del></li><li><del>알고리즘 풀기 (더 맵게)</del></li></ol><h2 id="2020-11-09"><a href="#2020-11-09" class="headerlink" title="2020-11-09"></a>2020-11-09</h2><ol><li><del>spring(MyBatis)</del></li><li><del>알고리즘 풀기 ( )</del></li></ol><h2 id="2020-11-10"><a href="#2020-11-10" class="headerlink" title="2020-11-10"></a>2020-11-10</h2><ol><li><del>spring(jpa)</del></li><li><del>알고리즘 풀기 (입국심사)</del></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;하루를-기록하다&quot;&gt;&lt;a href=&quot;#하루를-기록하다&quot; class=&quot;headerlink&quot; title=&quot;하루를 기록하다&quot;&gt;&lt;/a&gt;하루를 기록하다&lt;/h1&gt;&lt;h2 id=&quot;좋은-습관은-좋은사람을-만든다&quot;&gt;&lt;a href=&quot;#좋은-습관은-좋은사람을-
      
    
    </summary>
    
    
      <category term="TIL" scheme="https://khs9628.github.io/categories/TIL/"/>
    
    
      <category term="TIL" scheme="https://khs9628.github.io/tags/TIL/"/>
    
  </entry>
  
  <entry>
    <title>스프링 JPA</title>
    <link href="https://khs9628.github.io/2020/11/10/201110-Spring-jpa/"/>
    <id>https://khs9628.github.io/2020/11/10/201110-Spring-jpa/</id>
    <published>2020-11-10T06:59:42.000Z</published>
    <updated>2020-11-10T07:49:17.076Z</updated>
    
    <content type="html"><![CDATA[<h2 id="JPA-Java-Persistence-API"><a href="#JPA-Java-Persistence-API" class="headerlink" title="JPA(Java Persistence API)"></a>JPA(Java Persistence API)</h2><ul><li><p>제품의 이름이 아니고, API 표준의 이름이다.</p></li><li><p>JPA 표준 규격대로 만들어진 제품 중에서 유명한 것이 Hibernate 오픈소스 라이브러리이다.</p></li><li><p>우리가 사용하는 Spring JPA에 Hibernate 라이브러리가 포함되어 있다.</p></li></ul><h3 id="장점"><a href="#장점" class="headerlink" title="장점"></a>장점</h3><ul><li><p>SQL 명령을 구현할 필요가 없다. DBMS 제품을 교체하더라도 소스코드를 수정할 필요가 없다.</p></li><li><p>자동으로 처리되는 부분이 많아서, 구현할 소스코드의 양이 상대적으로 적다.</p></li><li><p>관계형 데이터베이스가 아니더라도 적용할 수 있다.</p></li></ul><h3 id="단점"><a href="#단점" class="headerlink" title="단점"></a>단점</h3><ul><li>복잡한 조회 명령을 구현해야 할 때, 익숙한 SQL 명령으로 구현할 수가 없고, </li><li>JPA의 고급 기능을 공부해야 한다.</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">employeeRepository.findAll() 메소드</span><br><span class="line">employee 테이블에서 레코드 전체 목록을 조회한다.</span><br><span class="line">List&lt;Employee&gt; 객체가 리턴된다.</span><br><span class="line"></span><br><span class="line">employeeRepository.findById(id)</span><br><span class="line">employee 테이블에서 기본키 필드 값이 id인 레코드를 조회한다.</span><br><span class="line">Optional&lt;Employee&gt; 타입의 객체가 리턴된다. 이 객체의 get 메소드를 호출하면 Employee 객체가 리턴된다.</span><br><span class="line">예: Employee employee = employeeRepository.findById(id).get();</span><br><span class="line"></span><br><span class="line">employeeRepository.save(employee)</span><br><span class="line">Employee 객체를 employee 테이블에 저장한다.</span><br><span class="line">Employee 객체의 id(기본키) 속성값이 <span class="number">0</span> 이면 INSERT 되고, <span class="number">0</span> 이 아니면 UPDATE 된다.</span><br><span class="line"></span><br><span class="line">employeeRepository.saveAll(employeeList)</span><br><span class="line">Employee 객체 목록을 employee 테이블에 저장한다.</span><br><span class="line"></span><br><span class="line">employeeRepository.delete(employee)</span><br><span class="line">Employee 객체의 id(기본키) 값과 일치하는 레코드가 삭제된다.</span><br><span class="line"></span><br><span class="line">employeeRepository.deleteAll(employeeList)</span><br><span class="line">Employee 객체 목록을 테이블에서 삭제한다.</span><br><span class="line"></span><br><span class="line">employeeRepository.count()</span><br><span class="line">employee 테이블의 전체 레코드 수를 리턴한다.</span><br><span class="line"></span><br><span class="line">employeeRepository.exists(id)</span><br><span class="line">employee 테이블에서 id에 해당하는 레코드가 있는지 <span class="keyword">true</span>/<span class="keyword">false</span>를 리턴한다.</span><br><span class="line"></span><br><span class="line">employeeRepository.flush()</span><br><span class="line">지금까지 employee 테이블에 대한 데이터 변경 작업들이 디스크에 모두 기록되도록 한다.</span><br></pre></td></tr></table></figure><h2 id="Rest-API"><a href="#Rest-API" class="headerlink" title="Rest API"></a>Rest API</h2><p>REST API 서비스라는 것은,<br>클라이언트의 URL 요청에 대해서 JSON 형태의 데이터를 출력하는 서버의 메소드를 말한다.</p><p>Spinrg MVC 프레임웍에서 REST API 서비스를 구현할 때,<br>컨트롤러에 <code>@RestController</code> 어노테이션을 붙인다.</p><p>RestController의 액션 메소드가 리턴하는 Java 객체는 자동으로 JSON 포멧으로 변환되어<br>클라이언트에 전송된다.</p><h3 id="RestController"><a href="#RestController" class="headerlink" title="RestController"></a>RestController</h3><p>RestController의 액션 메소드는, 데이터를 클라이언트에 전송하기 때문에, 뷰(view)가 필요 없다.</p><h3 id="예"><a href="#예" class="headerlink" title="예"></a>예</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">// 변환전</span></span><br><span class="line"><span class="meta">@Controller</span> </span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StudentController</span> </span>&#123;</span><br><span class="line">  <span class="keyword">public</span> <span class="meta">@ResponseBody</span> <span class="function">List&lt;Student&gt; <span class="title">students</span><span class="params">()</span> </span>&#123;</span><br><span class="line">     List&lt;Student&gt; list = ...;</span><br><span class="line">     <span class="keyword">return</span> list;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 변환후</span></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StudentController</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> List&lt;Student&gt; <span class="title">students</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    List&lt;Student&gt; list = ...;</span><br><span class="line">    <span class="keyword">return</span> list;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Request-Method"><a href="#Request-Method" class="headerlink" title="Request Method"></a>Request Method</h3><ul><li><p>클라이언트가 서버에 요청(request)을 전달하는 방식(method)을 request <code>method</code> 라고 한다.</p></li><li><p>REST API 서비스를 구현할 때, request method(get,post,put,delete) 들을 전부 잘 활용하는 것이 바람직한다.</p></li><li><p>서버에 데이터를 요청할 때는 <code>GET</code> 방식</p></li><li><p>서버에 저장할 새 데이터를 전송할 때는 <code>POST</code> 방식</p></li><li><p>서버의 기존 데이터를 수정하기 위해 전송할 때는 <code>PUT</code> 방식</p></li><li><p>서버의 데이터 삭제를 요청할 때는 <code>DELETE</code> 방식을 사용하는 것이 바람직하다.</p></li></ul><h3 id="REST-API-URL-패턴"><a href="#REST-API-URL-패턴" class="headerlink" title="REST API URL 패턴"></a>REST API URL 패턴</h3><ul><li><p>query string 사용하지 않기<br>REST API 서비스의 URL에 query string을 사용하지 않는 것이 관례이다.</p><p>  예를 들어 아래 URL은 바람직하지 않다.<br>  <a href="http://localhost:8080/studentServer/api/student?id=3" rel="external nofollow noopener noreferrer" target="_blank">http://localhost:8080/studentServer/api/student?id=3</a></p><p>  아래와 같은 형태이어야 한다.<br>  <a href="http://localhost:8080/studentServer/api/student/3" rel="external nofollow noopener noreferrer" target="_blank">http://localhost:8080/studentServer/api/student/3</a><br>  Request Method = GET</p></li><li><p>동사 사용하지 않기<br>REST API 서비스의 URL에 동사를 사용하지 않는 것이 관례이다.</p><p>  예를 들어 아래 URL은 바람직하지 않다.<br>  <a href="http://localhost:8080/studentServer/studentDelete?id=3" rel="external nofollow noopener noreferrer" target="_blank">http://localhost:8080/studentServer/studentDelete?id=3</a></p><p>  아래와 같은 형태이어야 한다.<br>  <a href="http://localhost:8080/studentServer/api/student/3" rel="external nofollow noopener noreferrer" target="_blank">http://localhost:8080/studentServer/api/student/3</a><br>  Request Method = DELETE</p></li></ul><h3 id="PathVariable"><a href="#PathVariable" class="headerlink" title="@PathVariable"></a>@PathVariable</h3><p>요청된 URL이 아래와 같다면<br><a href="http://localhost:8080/jpa10/api/student/3" rel="external nofollow noopener noreferrer" target="_blank">http://localhost:8080/jpa10/api/student/3</a></p><p>URL에 들어있는 id 값 3을 받기 위한 액션 메소드는 다음과 같이 구현한다.<br>@RequestMapping(“api/student/{id}”)<br>public Student student(@PathVariable(“id”) int id)</p><h3 id="JPA-Entity-클래스"><a href="#JPA-Entity-클래스" class="headerlink" title="JPA Entity 클래스"></a>JPA Entity 클래스</h3><p>JPA Entity 클래스는, 데이터베이스 테이블의 레코드에 해당하는 Java 클래스이다.</p><p>데이터베이스 조회 결과가 자동으로 엔터티 클래스 객체에 채워져 리턴된다.</p><p>@Entity<br>JPA Entity 클래스 앞에 @Entity 어노테이션을 붙여야 한다.</p><p>@Id<br>기본키(primary key)에 해당하는 멤버 변수에 @Id 어노테이션을 붙여야 한다.</p><p>@GeneratedValue(strategy = GenerationType.IDENTITY)<br>기본키가 Auto Increment 필드이거나 Identity 필드인 경우에<br>이 어노테이션을 붙여야 한다.</p><p>@ManyToOne<br>@JoinColumn(name = “departmentId”)<br>Department department;</p><p>Employee 테이블의 departmentId 필드가 외래키(foreign key)이고,<br>이 외래키가 Department 테이블의 레코드를 한 개 가르킨다면,<br>Employee 테이블에 int departmentId 멤버 변수를 만드는 대신에<br>Department department 멤버 변수를 만들고, 위 어노테이션들을 붙어야 한다.<br>Employee 테이블과 Department 테이블의 관계가 다 대 1 이면, @ManyToOne 어노테이션을 붙이고,<br>1 대 1 이면 @OneToOne 어노테이션을 붙인다.</p><h3 id="Eager-Loading-Lazy-Loading"><a href="#Eager-Loading-Lazy-Loading" class="headerlink" title="Eager Loading, Lazy Loading"></a>Eager Loading, Lazy Loading</h3><p>위와 같이 departmentId 외래키 대신 Department department 멤버 변수를<br>Employee 엔터티 클래스에 정의하면 다음과 같은 일이 자동으로 일어난다.</p><p>(1) DB 에서 Employee 레코드가 조회되면,<br>(2) Employee 엔터티 클래스 객체가 생성되고,<br>(3) 이 객체에, 조회된 Employee 레코드가 채워지고,<br>(4) 그 Employee 의 departmentId 외래키가 가르키는 Department 레코드도 같이 조회되고,<br>(5) Department 엔터티 클래스 객체가 생성되고,<br>(6) 이 객체에, 조회된 Department 레코드가 채워지고<br>(7) 이 Department 객체가 Employee 객체의 department 멤버 변수에 대입된다.</p><p><code>Eager Loading</code><br>DB 에서 Employee 레코드를 조회할 때,<br>(1) ~ (7) 절차가 자동으로 실행되는 정책을 Eager Loading 이라고 부른다.<br>보통 Eager Loading 이 기본 정책이다.</p><p><code>Lazy Loading</code><br>DB 에서 Employee 레코드를 조회할 때,<br>(1) ~ (3) 절차만 즉시 자동으로 실행되고 (4) ~ (7) 절차의 실행은 최대한 뒤로 미루는 것을<br>Lazy Loading 정책이라고 부른다.</p><p>Employee 클래스의 getDepartment() 메소드가 호출되기 전에는 (4) ~ (7) 절차의 실행을 미루다가<br>최초로 getDepartment() 메소드가 호출될 때 이 절차를 실행한다.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;JPA-Java-Persistence-API&quot;&gt;&lt;a href=&quot;#JPA-Java-Persistence-API&quot; class=&quot;headerlink&quot; title=&quot;JPA(Java Persistence API)&quot;&gt;&lt;/a&gt;JPA(Java Pers
      
    
    </summary>
    
    
      <category term="Spring" scheme="https://khs9628.github.io/categories/Spring/"/>
    
    
      <category term="Spring" scheme="https://khs9628.github.io/tags/Spring/"/>
    
  </entry>
  
  <entry>
    <title>CodeTest 연습 (이분탐색)</title>
    <link href="https://khs9628.github.io/2020/11/10/201110-codeTest/"/>
    <id>https://khs9628.github.io/2020/11/10/201110-codeTest/</id>
    <published>2020-11-10T05:57:51.000Z</published>
    <updated>2020-11-10T06:51:47.378Z</updated>
    
    <content type="html"><![CDATA[<h1 id="이분탐색"><a href="#이분탐색" class="headerlink" title="이분탐색"></a>이분탐색</h1><ul><li><code>이진 탐색</code>이란 데이터가 정렬돼 있는 배열에서 특정한 값을 찾아내는 알고리즘이다. </li></ul><ol><li><p>이분 탐색을 하고자 할 때 이미 정렬이 되어있어야 합니다.</p></li><li><p>left, right로 미드값을 잡아줍니다.</p></li><li><p>mid 값과 구하고자 하는 값을 비교 합니다.</p></li><li><p>비교할시 mid 값보다 구하고자 하는 값이 높으면 left를 mid+1로 만들어주고 낮으면 right를 mid-1로 만들어 줍니다. </p></li><li><p>left &gt; right 가 될때까지 1~3번을 반복해서 구하고자 하는 값을 찾습니다.</p></li></ol><p>이렇게 검색을 하면 전체를 검색하는 경우인 시간복잡도가 <code>O(n)</code> 인거에 비해서 <code>O(log(n))</code> 으로 적다고 합니다. </p><h1 id="입국심사"><a href="#입국심사" class="headerlink" title="입국심사"></a><a href="https://programmers.co.kr/learn/courses/30/lessons/43238?language=python3" rel="external nofollow noopener noreferrer" target="_blank">입국심사</a></h1><h2 id="1차답안"><a href="#1차답안" class="headerlink" title="1차답안"></a>1차답안</h2><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">solution</span><span class="params">(n, times)</span>:</span><span class="function"><span class="keyword">def</span> <span class="title">solution</span><span class="params">(n, times)</span>:</span></span><br><span class="line">    people = len(times)</span><br><span class="line">    answer = <span class="number">0</span></span><br><span class="line">    min_times = [<span class="number">0</span>] * people</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 처음 사람 들어감</span></span><br><span class="line">    n -= people</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span>(n&gt;<span class="number">0</span>):</span><br><span class="line">        answer += <span class="number">1</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(people):</span><br><span class="line">            <span class="comment"># 시간이 times의 배수라면</span></span><br><span class="line">            <span class="keyword">if</span> answer % times[i] == <span class="number">0</span>:</span><br><span class="line">                <span class="comment"># 사람 감소</span></span><br><span class="line">                <span class="keyword">if</span> n - <span class="number">1</span> == <span class="number">0</span>:</span><br><span class="line">                    min_times = [x + (<span class="number">2</span>*y) <span class="keyword">for</span> x,y <span class="keyword">in</span> zip(min_times,times)]</span><br><span class="line">                    n -= <span class="number">1</span></span><br><span class="line">                    <span class="keyword">return</span> min(min_times)</span><br><span class="line"></span><br><span class="line">                min_times[i] += times[i]</span><br><span class="line">                n -= <span class="number">1</span></span><br></pre></td></tr></table></figure><p>시간 초과</p><h2 id="2차답안"><a href="#2차답안" class="headerlink" title="2차답안"></a>2차답안</h2><p>이분 탐색 구현</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">solution</span><span class="params">(n, times)</span>:</span></span><br><span class="line">    <span class="comment"># 최악의 경우 : 가장 비효율적인 심사관에게 모든 사람이 다 보는것</span></span><br><span class="line">    left, right = <span class="number">1</span>, max(times) * n</span><br><span class="line">    answer = <span class="number">0</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">while</span> left &lt;= right:</span><br><span class="line">        mid = (left + right) // <span class="number">2</span></span><br><span class="line">        people = <span class="number">0</span></span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> times:</span><br><span class="line">            </span><br><span class="line">            people += mid // i</span><br><span class="line">            </span><br><span class="line">            <span class="keyword">if</span> people &gt;= n:</span><br><span class="line">                answer = mid</span><br><span class="line">                right = mid - <span class="number">1</span></span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">            </span><br><span class="line">            <span class="comment"># 모든 사람을 심사할 수 없는 경우</span></span><br><span class="line">            <span class="comment"># 한심사관에게 주어진 시간을 늘려본다.</span></span><br><span class="line">        <span class="keyword">if</span> people &lt; n:</span><br><span class="line">            left = mid + <span class="number">1</span></span><br><span class="line">                </span><br><span class="line">    <span class="keyword">return</span> answer</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;이분탐색&quot;&gt;&lt;a href=&quot;#이분탐색&quot; class=&quot;headerlink&quot; title=&quot;이분탐색&quot;&gt;&lt;/a&gt;이분탐색&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;&lt;code&gt;이진 탐색&lt;/code&gt;이란 데이터가 정렬돼 있는 배열에서 특정한 값을 찾아내는 알고리즘이다
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>Java CodeTest 연습 (이분탐색)</title>
    <link href="https://khs9628.github.io/2020/11/10/201110-codeTest-j/"/>
    <id>https://khs9628.github.io/2020/11/10/201110-codeTest-j/</id>
    <published>2020-11-10T05:57:51.000Z</published>
    <updated>2020-11-10T09:38:28.739Z</updated>
    
    <content type="html"><![CDATA[<h1 id="이분탐색"><a href="#이분탐색" class="headerlink" title="이분탐색"></a>이분탐색</h1><ul><li><code>이진 탐색</code>이란 데이터가 정렬돼 있는 배열에서 특정한 값을 찾아내는 알고리즘이다. </li></ul><ol><li><p>이분 탐색을 하고자 할 때 이미 정렬이 되어있어야 합니다.</p></li><li><p>left, right로 미드값을 잡아줍니다.</p></li><li><p>mid 값과 구하고자 하는 값을 비교 합니다.</p></li><li><p>비교할시 mid 값보다 구하고자 하는 값이 높으면 left를 mid+1로 만들어주고 낮으면 right를 mid-1로 만들어 줍니다. </p></li><li><p>left &gt; right 가 될때까지 1~3번을 반복해서 구하고자 하는 값을 찾습니다.</p></li></ol><p>이렇게 검색을 하면 전체를 검색하는 경우인 시간복잡도가 <code>O(n)</code> 인거에 비해서 <code>O(log(n))</code> 으로 적다고 합니다. </p><h1 id="입국심사"><a href="#입국심사" class="headerlink" title="입국심사"></a><a href="https://programmers.co.kr/learn/courses/30/lessons/43238?language=python3" rel="external nofollow noopener noreferrer" target="_blank">입국심사</a></h1><h2 id="1차답안"><a href="#1차답안" class="headerlink" title="1차답안"></a>1차답안</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">long</span> <span class="title">solution</span><span class="params">(<span class="keyword">int</span> n, <span class="keyword">int</span>[] times)</span> </span>&#123;</span><br><span class="line">        Arrays.sort(times);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">int</span> size = times.length;</span><br><span class="line">    <span class="keyword">int</span> left = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">int</span> right = times[size-<span class="number">1</span>] * n;</span><br><span class="line">        <span class="keyword">int</span> mid;</span><br><span class="line">        <span class="keyword">int</span> people;</span><br><span class="line">        <span class="keyword">long</span> answer = <span class="number">0</span>;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">while</span>(left &lt;= right) &#123;</span><br><span class="line">        mid = (left + right) / <span class="number">2</span>;</span><br><span class="line">        people = <span class="number">0</span>;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> time : times) &#123;</span><br><span class="line">        people += mid/time;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span>(people &gt;= n) &#123;</span><br><span class="line">        answer = mid;</span><br><span class="line">        right = mid - <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(people &lt; n) &#123;</span><br><span class="line">        left = mid + <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> answer;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>테스트 3 시간초과 테스트 5/7/8 실패</code></p><p>=&gt; Answer은 Long 타입이므로 int 타입으로 계산하게된다면 오류발생</p><p>=&gt; Long 타입으로 타입캐스트</p><p><code>times[size-1] * (long) n;</code></p><h2 id="2차-답안"><a href="#2차-답안" class="headerlink" title="2차 답안"></a>2차 답안</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">long</span> <span class="title">solution</span><span class="params">(<span class="keyword">int</span> n, <span class="keyword">int</span>[] times)</span> </span>&#123;</span><br><span class="line">        Arrays.sort(times);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">int</span> size = times.length;</span><br><span class="line">    <span class="keyword">long</span> left = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">long</span> right = times[size-<span class="number">1</span>] * (<span class="keyword">long</span>) n;</span><br><span class="line">        <span class="keyword">long</span> mid;</span><br><span class="line">        <span class="keyword">long</span> people;</span><br><span class="line">        <span class="keyword">long</span> answer = <span class="number">0</span>;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">while</span>(left &lt;= right) &#123;</span><br><span class="line">        mid = (left + right) / <span class="number">2</span>;</span><br><span class="line">        people = <span class="number">0</span>;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> time : times) &#123;</span><br><span class="line">        people += mid/time;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span>(people &gt;= n) &#123;</span><br><span class="line">        answer = mid;</span><br><span class="line">        right = mid - <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(people &lt; n) &#123;</span><br><span class="line">        left = mid + <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> answer;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;이분탐색&quot;&gt;&lt;a href=&quot;#이분탐색&quot; class=&quot;headerlink&quot; title=&quot;이분탐색&quot;&gt;&lt;/a&gt;이분탐색&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;&lt;code&gt;이진 탐색&lt;/code&gt;이란 데이터가 정렬돼 있는 배열에서 특정한 값을 찾아내는 알고리즘이다
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>스프링 Mybatis</title>
    <link href="https://khs9628.github.io/2020/11/06/201106-Spring-mybatis/"/>
    <id>https://khs9628.github.io/2020/11/06/201106-Spring-mybatis/</id>
    <published>2020-11-06T07:22:39.000Z</published>
    <updated>2020-11-10T07:01:12.638Z</updated>
    
    <content type="html"><![CDATA[<h2 id="ORM-Object-Relational-Mapping"><a href="#ORM-Object-Relational-Mapping" class="headerlink" title="ORM(Object Relational Mapping)"></a>ORM(Object Relational Mapping)</h2><ul><li><p>Object 는 객체지향 언어의 객체를 의미한다.</p></li><li><p>Ralational 은 관계형 데이터베이스(Relational Database)의 데이터를 의미한다.</p></li><li><p>Mapping이 의미하는 것은 객체지향 언어의 객체와 관계형 데이터를 서로 변환해 준다는 것이다.</p></li></ul><p><strong><em>관계형 데이터베이스에서 조회한 데이터를 Java 객체로 변환하여 리턴해 주고, Java 객체를 관계형 데이터베이스에 저장해 주는 라이브러리 혹은 기술을 말한다.</em></strong></p><h2 id="JPA-Java-Persistence-API"><a href="#JPA-Java-Persistence-API" class="headerlink" title="JPA(Java Persistence API)"></a>JPA(Java Persistence API)</h2><ul><li><p>제품의 이름이 아니고, API 표준의 이름이다.</p></li><li><p>JPA 표준 규격대로 만들어진 제품 중에서 유명한 것이 Hibernate 오픈소스 라이브러리이다.</p></li><li><p>우리가 사용하는 Spring JPA에 Hibernate 라이브러리가 포함되어 있다.</p></li></ul><h3 id="장점"><a href="#장점" class="headerlink" title="장점"></a>장점</h3><p>-SQL 명령을 구현할 필요가 없다. DBMS 제품을 교체하더라도 소스코드를 수정할 필요가 없다.</p><ul><li><p>자동으로 처리되는 부분이 많아서, 구현할 소스코드의 양이 상대적으로 적다.</p></li><li><p>관계형 데이터베이스가 아니더라도 적용할 수 있다.</p></li></ul><h3 id="단점"><a href="#단점" class="headerlink" title="단점"></a>단점</h3><ul><li>복잡한 조회 명령을 구현해야 할 때, 익숙한 SQL 명령으로 구현할 수가 없고, </li><li>JPA의 고급 기능을 공부해야 한다.</li></ul><h2 id="MyBatis"><a href="#MyBatis" class="headerlink" title="MyBatis"></a>MyBatis</h2><h3 id="장점-1"><a href="#장점-1" class="headerlink" title="장점"></a>장점</h3><ul><li><p>익숙한 SQL 명령으로 구현할 수 있다.</p></li><li><p>DB 조회 결과를 복잡한 객체 구조로 변환해야 할 때 myBatis 기능이 좋다.</p></li><li><p>복잡한 보고서(report)를 출력해야 할 때, 특히 유용하다. (mybatis의 resultMap)</p></li><li><p>SQL 쿼리 분석하기 편하다.</p></li></ul><h3 id="단점-1"><a href="#단점-1" class="headerlink" title="단점"></a>단점</h3><ul><li>구현할 소스코드의 양이 상대적으로 많다.</li><li>관계형 데이터베이스에만 적용할 수 있다.</li><li>DBMS 제품을 교체하면 SQL 소스코드를 수정해야 한다.(Oracle, MS SQL Server, mySQL 등 DBMS 마다 SQL 문법이 약간씩 차이가 있다.)</li></ul><h3 id="mybatis-mapper"><a href="#mybatis-mapper" class="headerlink" title="mybatis mapper"></a>mybatis mapper</h3><h3 id="ResultMap"><a href="#ResultMap" class="headerlink" title="ResultMap"></a>ResultMap</h3><ul><li><p>DB 조회 결과를 복잡한 객체 구조로 변환해야 할 때 mybatis의 resultMap 기능을 사용한다.</p></li><li><p>이 기능은 복잡한 보고서(report)를 출력해야 할 때, 특히 유용하다.</p></li><li><p>여러 테이블의 조인 결과를 여러 자바 객체에 담을 때 resultMap 기능이 유용하다.</p></li></ul><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">  </span><br><span class="line">  &lt;select id=<span class="string">"findAllWithStudents"</span> resultMap=<span class="string">"resultMap1"</span>&gt;</span><br><span class="line">    SELECT d.*, </span><br><span class="line">           s.id studentId, s.studentNumber, s.name, s.year</span><br><span class="line">    FROM Department d LEFT JOIN Student s ON d.id = s.departmentId</span><br><span class="line">  &lt;/select&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 예시</span></span><br><span class="line">  &lt;resultMap id=<span class="string">"resultMap1"</span> type=<span class="string">"Department"</span>&gt;</span><br><span class="line">    &lt;id property=<span class="string">"id"</span> column=<span class="string">"id"</span> /&gt;</span><br><span class="line">    &lt;result property=<span class="string">"departmentName"</span> column=<span class="string">"departmentName"</span> /&gt;</span><br><span class="line">    &lt;collection property=<span class="string">"students"</span> ofType=<span class="string">"Student"</span>&gt;</span><br><span class="line">      &lt;id property=<span class="string">"id"</span> column=<span class="string">"studentId"</span> /&gt;</span><br><span class="line">      &lt;result property=<span class="string">"studentNumber"</span> column=<span class="string">"studentNumber"</span>/&gt;</span><br><span class="line">      &lt;result property=<span class="string">"name"</span> column=<span class="string">"name"</span>/&gt;</span><br><span class="line">      &lt;result property=<span class="string">"year"</span> column=<span class="string">"year"</span>/&gt;</span><br><span class="line">    &lt;/collection&gt;</span><br><span class="line">  &lt;/resultMap&gt;</span><br></pre></td></tr></table></figure><h3 id="Association-VS-Collection"><a href="#Association-VS-Collection" class="headerlink" title="Association VS Collection"></a>Association VS Collection</h3><p>1:1 =&gt; Association<br>1:N =&gt; Collection</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&lt;select id=<span class="string">"findAll"</span> resultMap=<span class="string">"resultMap_Professor"</span>&gt;</span><br><span class="line">  SELECT p.*, d.departmentName </span><br><span class="line">  FROM Professor p LEFT JOIN department d ON p.departmentId = d.id </span><br><span class="line">&lt;/select&gt;</span><br><span class="line"></span><br><span class="line">&lt;resultMap id=<span class="string">"resultMap_Professor"</span> type=<span class="string">"Professor"</span>&gt;</span><br><span class="line">  &lt;id property=<span class="string">"id"</span> column=<span class="string">"id"</span> /&gt;</span><br><span class="line">  &lt;result property=<span class="string">"professorName"</span> column=<span class="string">"professorName"</span>/&gt;</span><br><span class="line">  &lt;result property=<span class="string">"departmentId"</span> column=<span class="string">"departmentId"</span>/&gt;</span><br><span class="line">  &lt;association property=<span class="string">"department"</span> javaType=<span class="string">"Department"</span>&gt;</span><br><span class="line">    &lt;id property=<span class="string">"id"</span> column=<span class="string">"departmentId"</span> /&gt;</span><br><span class="line">    &lt;result property=<span class="string">"departmentName"</span> column=<span class="string">"departmentName"</span> /&gt;</span><br><span class="line">  &lt;/association&gt;</span><br><span class="line">&lt;/resultMap&gt;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;ORM-Object-Relational-Mapping&quot;&gt;&lt;a href=&quot;#ORM-Object-Relational-Mapping&quot; class=&quot;headerlink&quot; title=&quot;ORM(Object Relational Mapping)&quot;&gt;&lt;/
      
    
    </summary>
    
    
      <category term="Spring" scheme="https://khs9628.github.io/categories/Spring/"/>
    
    
      <category term="Spring" scheme="https://khs9628.github.io/tags/Spring/"/>
    
  </entry>
  
  <entry>
    <title>Hexo Google Adsense</title>
    <link href="https://khs9628.github.io/2020/11/06/adsense/"/>
    <id>https://khs9628.github.io/2020/11/06/adsense/</id>
    <published>2020-11-06T06:41:00.000Z</published>
    <updated>2020-11-06T06:49:36.779Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Google-Adsense"><a href="#Google-Adsense" class="headerlink" title="Google Adsense"></a>Google Adsense</h1><h2 id="Hexo-Butterfly-테마에서-적용-pug"><a href="#Hexo-Butterfly-테마에서-적용-pug" class="headerlink" title="Hexo Butterfly 테마에서 적용(.pug)"></a>Hexo Butterfly 테마에서 적용(.pug)</h2><ol><li><p><a href="https://www.google.co.kr/intl/ko/adsense/start/" rel="external nofollow noopener noreferrer" target="_blank">Google Adsense</a> 홈페이지 접속</p></li><li><p>시작하기 클릭</p></li></ol><p><img alt="img1" data-src="/img/ETC/adsense_start.PNG" class="lozad"></p><ol start="3"><li><p>필요 정보 입력<br><img alt="img2" data-src="/img/ETC/adsense_setting.PNG" class="lozad"></p></li><li><p>해당 정보 확인<br><img alt="img3" data-src="/img/ETC/adsense_data.PNG" class="lozad"></p></li><li><p>Hexo 환경 설정</p></li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">## /theme/Butterfly/config.yml</span><br><span class="line">show_ad_post: true </span><br><span class="line"></span><br><span class="line">## /theme/Butterfly/includes/widget/head.pug</span><br><span class="line">if theme.show_ad_post</span><br><span class="line">  script(async=&apos;&apos;, src=&apos;//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js&apos;)</span><br><span class="line">  script.</span><br><span class="line">    (adsbygoogle = window.adsbygoogle || []).push(&#123;google_ad_client: &quot;ca-pub-번호&quot;,enable_page_level_ads: true&#125;);</span><br></pre></td></tr></table></figure><p><strong><em>해당 위치에 해당 코드 작성</em></strong></p><ol start="6"><li>승인신청 및 기다리기</li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Google-Adsense&quot;&gt;&lt;a href=&quot;#Google-Adsense&quot; class=&quot;headerlink&quot; title=&quot;Google Adsense&quot;&gt;&lt;/a&gt;Google Adsense&lt;/h1&gt;&lt;h2 id=&quot;Hexo-Butterfly-테마
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>Java CodeTest 연습 (Heap)</title>
    <link href="https://khs9628.github.io/2020/11/06/201106-codeTest-j/"/>
    <id>https://khs9628.github.io/2020/11/06/201106-codeTest-j/</id>
    <published>2020-11-06T04:12:23.000Z</published>
    <updated>2020-11-06T06:24:51.434Z</updated>
    
    <content type="html"><![CDATA[<h1 id="힙-HEAP"><a href="#힙-HEAP" class="headerlink" title="힙(HEAP)"></a>힙(HEAP)</h1><h1 id="더-맵게"><a href="#더-맵게" class="headerlink" title="더 맵게"></a><a href="https://programmers.co.kr/learn/courses/30/lessons/42626" rel="external nofollow noopener noreferrer" target="_blank">더 맵게</a></h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.PriorityQueue;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">solution</span><span class="params">(<span class="keyword">int</span>[] scoville, <span class="keyword">int</span> K)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> cnt = <span class="number">0</span>;</span><br><span class="line">        PriorityQueue&lt;Integer&gt; heap = <span class="keyword">new</span> PriorityQueue();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 큐에 원소 삽입</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> s: scoville) &#123;</span><br><span class="line">            heap.offer(s);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span>(heap.peek() &lt;= K) &#123;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// scoville의 길이는 2 이상 이므로</span></span><br><span class="line">            <span class="keyword">if</span>(heap.size() == <span class="number">1</span>) &#123;</span><br><span class="line">                <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">int</span> a = heap.poll();</span><br><span class="line">            <span class="keyword">int</span> b = heap.poll();</span><br><span class="line"></span><br><span class="line">            <span class="keyword">int</span> result = a + (b * <span class="number">2</span>);</span><br><span class="line"></span><br><span class="line">            heap.offer(result);</span><br><span class="line">            cnt++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> cnt;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>heap.peek()</code><br>root return (제거 X)</p><p><code>heap.poll()</code><br>root return (제거 O)</p><p><code>heap.offer(int i)</code><br>i값 삽입</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;힙-HEAP&quot;&gt;&lt;a href=&quot;#힙-HEAP&quot; class=&quot;headerlink&quot; title=&quot;힙(HEAP)&quot;&gt;&lt;/a&gt;힙(HEAP)&lt;/h1&gt;&lt;h1 id=&quot;더-맵게&quot;&gt;&lt;a href=&quot;#더-맵게&quot; class=&quot;headerlink&quot; title=
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>Java CodeTest 연습 (스택/큐)</title>
    <link href="https://khs9628.github.io/2020/11/04/201105-codeTest-j/"/>
    <id>https://khs9628.github.io/2020/11/04/201105-codeTest-j/</id>
    <published>2020-11-04T10:01:15.000Z</published>
    <updated>2020-11-09T08:44:14.957Z</updated>
    
    <content type="html"><![CDATA[<h1 id="스택-큐"><a href="#스택-큐" class="headerlink" title="스택/큐"></a>스택/큐</h1><h1 id="주식가격"><a href="#주식가격" class="headerlink" title="주식가격"></a><a href="https://programmers.co.kr/learn/courses/30/lessons/42584?language=java" rel="external nofollow noopener noreferrer" target="_blank">주식가격</a></h1><h2 id="1차-답안"><a href="#1차-답안" class="headerlink" title="1차 답안"></a>1차 답안</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">int</span>[] solution(<span class="keyword">int</span>[] prices) &#123;</span><br><span class="line">        <span class="keyword">int</span> n = prices.length;</span><br><span class="line"><span class="keyword">int</span>[] answer = <span class="keyword">new</span> <span class="keyword">int</span>[n];</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++) &#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=i+<span class="number">1</span>; j&lt;n;j++) &#123;</span><br><span class="line">        answer[i] += <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span>(prices[i] &gt; prices[j]) &#123;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> answer;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>Arrays.toString(배열 이름)</code><br>배열의 원소를 print하기 위해서는 java.utill.Arrays의 toString 메소드를 사용해야합니다.</p><p>System.out.println(Arrays.toString(arr));</p><h1 id="기능개발"><a href="#기능개발" class="headerlink" title="기능개발"></a><a href="https://programmers.co.kr/learn/courses/30/lessons/42586?language=java" rel="external nofollow noopener noreferrer" target="_blank">기능개발</a></h1><h2 id="1차-답안-1"><a href="#1차-답안-1" class="headerlink" title="1차 답안"></a>1차 답안</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.LinkedList;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">int</span>[] solution(<span class="keyword">int</span>[] progresses, <span class="keyword">int</span>[] speeds) &#123;</span><br><span class="line">        <span class="keyword">int</span> length = progresses.length;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span>[] days = <span class="keyword">new</span> <span class="keyword">int</span>[length];</span><br><span class="line"><span class="keyword">int</span> max = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">LinkedList&lt;<span class="keyword">int</span>[]&gt; result = <span class="keyword">new</span> LinkedList&lt;&gt;();</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;length; i++) &#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 소요시간이 담긴 배열 days 생성</span></span><br><span class="line">days[i] = Math.ceil((<span class="number">100</span>-progresses[i]) / speeds[i]);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 최대값 보다 크다면 다음 원소에 1 삽입</span></span><br><span class="line"><span class="keyword">if</span>(days[i]&gt;max) &#123;</span><br><span class="line">max = days[i];</span><br><span class="line">result.add(<span class="keyword">new</span> <span class="keyword">int</span>[] &#123;<span class="number">1</span>&#125;);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 최대값 보다 작다면 해당 원소에 +1</span></span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line">result.getLast()[<span class="number">0</span>]++;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 일반 배열로 복사 후 리턴</span></span><br><span class="line"><span class="keyword">int</span> size = result.size();</span><br><span class="line"><span class="keyword">int</span>[] answer = <span class="keyword">new</span> <span class="keyword">int</span>[size];</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; size; i++) &#123;</span><br><span class="line">answer[i] = result.pollFirst()[<span class="number">0</span>];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> answer;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>테스트케이스 11통과 불가</code></p><p><code>Math.ceil(x)</code></p><p>올림</p><p><strong><em>days[i] = (int)Math.ceil((100-progresses[i])/speeds[i]);</em></strong></p><p>100-progresses[i] = 정수 / speeds[i] = 정수 이기 때문에</p><p>정수 나누기 정수 를 한다면 정수가 나옵니다. 따라서 올림효과가 일어나지 않습니다.</p><p>days[i] = (int)Math.ceil(((double)100-progresses[i])/speeds[i]);</p><p>혹은 days[i] = (int)Math.ceil((100-progresses[i])/(double)speeds[i]);</p><p>이렇게 해서 올림을 할 수 있도록 만들어주어야 합니다.</p><p><code>Array vs ArrayList vs LinkedList</code></p><table><thead><tr><th align="center">리스트</th><th align="center">설명</th><th align="center">특징</th></tr></thead><tbody><tr><td align="center">Array</td><td align="center">정적인 길이를 제공하는 배열</td><td align="center">크기를 지정(고정)</td></tr><tr><td align="center">Vector</td><td align="center">동기화 기능이 제공되는 가변이 가능한 자료구조</td><td align="center">저장순서 유지/중복허용</td></tr><tr><td align="center">ArrayList</td><td align="center">동기화가 제공되지 않음 가변이 가능한 자료구조.</td><td align="center">+ 검색 -데이터의 추가, 삭제</td></tr><tr><td align="center">LinkedList</td><td align="center">연결리스트 라고도 불리며 노드 간에 연결을 통해서 리스트로 구현된 객체</td><td align="center">+ 데이터의 추가, 삭제 - 검색(인덱스르 가지고 있지 않음)</td></tr></tbody></table><h2 id="2차-답안"><a href="#2차-답안" class="headerlink" title="2차 답안"></a>2차 답안</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">int</span>[] solution(<span class="keyword">int</span>[] progresses, <span class="keyword">int</span>[] speeds) &#123;</span><br><span class="line">        <span class="keyword">int</span> length = progresses.length;</span><br><span class="line"><span class="keyword">int</span> max = <span class="number">0</span>;</span><br><span class="line">        </span><br><span class="line">ArrayList&lt;Integer&gt; result = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;length; i++) &#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 소요시간이 담긴 배열 days 생성</span></span><br><span class="line"><span class="keyword">int</span> time = (<span class="keyword">int</span>)Math.ceil(((<span class="keyword">double</span>)<span class="number">100</span>-progresses[i])/speeds[i]);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 최대값 보다 크다면 다음 원소에 1 삽입</span></span><br><span class="line"><span class="keyword">if</span>(time&gt;max) &#123;</span><br><span class="line">max = time;</span><br><span class="line">result.add(<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 최대값 보다 작다면 해당 원소에 +1</span></span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line">result.set(result.size() - <span class="number">1</span>, result.get(result.size() - <span class="number">1</span>) + <span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 일반 배열로 복사 후 리턴</span></span><br><span class="line"><span class="keyword">int</span> size = result.size();</span><br><span class="line"><span class="keyword">int</span>[] answer = <span class="keyword">new</span> <span class="keyword">int</span>[size];</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; size; i++) &#123;</span><br><span class="line">answer[i] = result.get(i);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> answer;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="다리를-지나는-트럭"><a href="#다리를-지나는-트럭" class="headerlink" title="다리를 지나는 트럭"></a><a href="https://programmers.co.kr/learn/courses/30/lessons/42583" rel="external nofollow noopener noreferrer" target="_blank">다리를 지나는 트럭</a></h1><h2 id="1차-답안-2"><a href="#1차-답안-2" class="headerlink" title="1차 답안"></a>1차 답안</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.LinkedList;</span><br><span class="line"><span class="keyword">import</span> java.util.Queue;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">solution</span><span class="params">(<span class="keyword">int</span> bridge_length, <span class="keyword">int</span> weight, <span class="keyword">int</span>[] truck_weights)</span> </span>&#123;</span><br><span class="line">        Queue&lt;Integer&gt; bridge = <span class="keyword">new</span> LinkedList&lt;&gt;();</span><br><span class="line"><span class="keyword">int</span> sec = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> max = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> w :truck_weights) &#123;</span><br><span class="line">        <span class="keyword">while</span>(<span class="keyword">true</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span>(bridge.isEmpty())&#123;</span><br><span class="line">        bridge.offer(w);</span><br><span class="line">        max+= w;</span><br><span class="line">        sec++;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span>(bridge.size() == bridge_length)&#123;</span><br><span class="line">        max -= bridge.poll();</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(max+w &gt; weight) &#123;</span><br><span class="line">        bridge.offer(<span class="number">0</span>);</span><br><span class="line">        sec++;</span><br><span class="line">        &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">        bridge.offer(w);</span><br><span class="line">        max += w;</span><br><span class="line">        sec++;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> sec + bridge_length;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>Queue</code></p><table><thead><tr><th align="center">메소드</th><th align="center">설명</th></tr></thead><tbody><tr><td align="center">public void offer(Element data);</td><td align="center">순차보관</td></tr><tr><td align="center">public Element poll();</td><td align="center">가장 먼저 보관한 값 꺼내고 반환</td></tr><tr><td align="center">public Element peek();</td><td align="center">가장 먼저 보관한 값 단순 참조, 꺼내지 않음</td></tr><tr><td align="center">public boolean empty();</td><td align="center">비어있는지 판별</td></tr></tbody></table><h1 id="프린터"><a href="#프린터" class="headerlink" title="프린터"></a><a href="https://programmers.co.kr/learn/courses/30/lessons/42587?language=java" rel="external nofollow noopener noreferrer" target="_blank">프린터</a></h1><h2 id="1차-답안-3"><a href="#1차-답안-3" class="headerlink" title="1차 답안"></a>1차 답안</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.PriorityQueue;</span><br><span class="line"><span class="keyword">import</span> java.util.Collections;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">solution</span><span class="params">(<span class="keyword">int</span>[] priorities, <span class="keyword">int</span> location)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> answer = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">        PriorityQueue&lt;Integer&gt; queue = <span class="keyword">new</span> PriorityQueue(Collections.reverseOrder());</span><br><span class="line">    </span><br><span class="line"><span class="comment">// 순서에 따라 요소 삽입</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> priority:priorities) &#123;</span><br><span class="line">    queue.offer(priority);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">while</span>(!queue.isEmpty()) &#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;priorities.length;i++) &#123;</span><br><span class="line">    <span class="keyword">if</span>(queue.peek() == priorities[i]) &#123;</span><br><span class="line">    queue.poll();</span><br><span class="line">    answer++;</span><br><span class="line">                    </span><br><span class="line">                    <span class="keyword">if</span>(location == i) &#123;</span><br><span class="line">                        queue.clear();</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> answer;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>PriorityQueue&lt;Integer&gt; queue</code><br>우선순위에 따라 뽑아야하는 문제 =&gt; 우선순위 큐</p><p><code>Collections.reverseOrder()</code><br>우선순위가 높을수록 숫자가 크기 때문에 해당 요소 삽입</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;스택-큐&quot;&gt;&lt;a href=&quot;#스택-큐&quot; class=&quot;headerlink&quot; title=&quot;스택/큐&quot;&gt;&lt;/a&gt;스택/큐&lt;/h1&gt;&lt;h1 id=&quot;주식가격&quot;&gt;&lt;a href=&quot;#주식가격&quot; class=&quot;headerlink&quot; title=&quot;주식가격&quot;&gt;&lt;/a
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>Java 공부사항 정리</title>
    <link href="https://khs9628.github.io/2020/11/04/201104-Java/"/>
    <id>https://khs9628.github.io/2020/11/04/201104-Java/</id>
    <published>2020-11-04T05:52:53.000Z</published>
    <updated>2020-11-05T06:53:49.385Z</updated>
    
    <content type="html"><![CDATA[<h1 id="자바-특이사항-정리"><a href="#자바-특이사항-정리" class="headerlink" title="자바 특이사항 정리"></a>자바 특이사항 정리</h1><h2 id="2020-11-04"><a href="#2020-11-04" class="headerlink" title="2020-11-04"></a>2020-11-04</h2><h3 id="문자열-포함여부-관련-함수"><a href="#문자열-포함여부-관련-함수" class="headerlink" title="문자열 포함여부 관련 함수"></a><code>문자열 포함여부 관련 함수</code></h3><table><thead><tr><th align="center">구분</th><th align="center">설명</th><th align="center">포함</th><th align="center">미포함</th></tr></thead><tbody><tr><td align="center">contains</td><td align="center">문자열에 검색하고자 하는 문자가 있는지 확인</td><td align="center">true</td><td align="center">false</td></tr><tr><td align="center">indexOf</td><td align="center">문자열에서 검색하는 문자의 위치를 반환</td><td align="center">문자 위치</td><td align="center">-1</td></tr><tr><td align="center">matches</td><td align="center">정규식을 이용하여 문자열을 검색한다.</td><td align="center">true</td><td align="center">false</td></tr></tbody></table><p><code>startsWith()</code></p><ul><li>boolean startsWith(String prefix)</li><li>startsWith() 함수는 대상 문자열이 특정 문자 또는 문자열로 시작하는지 체크하는 함수이다.</li><li>해당 문자열로 시작되는지 여부를 확인하고 boolean 에 맞춰 true/false 값을 리턴한다.</li></ul><h3 id="Set-집합"><a href="#Set-집합" class="headerlink" title="Set - 집합"></a><code>Set</code> - 집합</h3><ul><li>요소는 중복될 수 없다.</li><li>순서가 있을 수도 있다.</li><li>정렬될 수도 있다.</li></ul><table><thead><tr><th align="center">클래스</th><th align="center">특징</th><th align="center">성능</th></tr></thead><tbody><tr><td align="center">HashSet</td><td align="center">순서가 필요없는 데이터를 hash table에 저장.</td><td align="center">Set 중에 가장 성능이 좋음</td></tr><tr><td align="center">TreeSet</td><td align="center">저장된 데이터의 값에 따라 정렬됨. red-black tree 타입으로 값이 저장.</td><td align="center">HashSet보다 성능이 느림</td></tr><tr><td align="center">LinkedHashSet</td><td align="center">연결된 목록 타입으로 구현된 hash table에 데이터 저장. 저장된 순서에 따라 값이 정렬.</td><td align="center">셋 중 가장 느림</td></tr></tbody></table><p><code>Arrays.toString(배열 이름)</code><br>배열의 원소를 print하기 위해서는 java.utill.Arrays의 toString 메소드를 사용해야합니다.</p><p>System.out.println(Arrays.toString(arr));</p><ul><li>Collection</li></ul><p>여러 요소의 그룹을 하나의 단위로 엮는 객체이고 다양한 인터페이스를 제공합니다. 주로 집계 데이터를 저장, 검색, 수정 및 전달하는 데 사용됩니다.</p><p><code>Array vs ArrayList vs LinkedList</code></p><table><thead><tr><th align="center">리스트</th><th align="center">설명</th><th align="center">특징</th></tr></thead><tbody><tr><td align="center">Array</td><td align="center">정적인 길이를 제공하는 배열</td><td align="center">크기를 지정(고정)</td></tr><tr><td align="center">Vector</td><td align="center">동기화 기능이 제공되는 가변이 가능한 자료구조</td><td align="center">저장순서 유지/중복허용</td></tr><tr><td align="center">ArrayList</td><td align="center">동기화가 제공되지 않음 가변이 가능한 자료구조.</td><td align="center">+ 검색 -데이터의 추가, 삭제</td></tr><tr><td align="center">LinkedList</td><td align="center">연결리스트 라고도 불리며 노드 간에 연결을 통해서 리스트로 구현된 객체</td><td align="center">+ 데이터의 추가, 삭제 - 검색(인덱스르 가지고 있지 않음)</td></tr></tbody></table><p><code>length() vs size()</code><br>length() 메소드는 문자열의 길이를 반환하는 메소드입니다.<br>size() 메소드도 length() 메소드와 언제나 같은 값을 반환하지만, 해당 string 객체가 메모리에서 실제 사용하고 있는 크기를 나타냅니다.</p><p><code>Queue</code></p><table><thead><tr><th align="center">메소드</th><th align="center">설명</th></tr></thead><tbody><tr><td align="center">public void offer(Element data)</td><td align="center">순차보관</td></tr><tr><td align="center">public Element poll()</td><td align="center">가장 먼저 보관한 값 꺼내고 반환</td></tr><tr><td align="center">public Element peek()</td><td align="center">가장 먼저 보관한 값 단순 참조, 꺼내지 않음</td></tr><tr><td align="center">public boolean empty()</td><td align="center">비어있는지 판별</td></tr></tbody></table>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;자바-특이사항-정리&quot;&gt;&lt;a href=&quot;#자바-특이사항-정리&quot; class=&quot;headerlink&quot; title=&quot;자바 특이사항 정리&quot;&gt;&lt;/a&gt;자바 특이사항 정리&lt;/h1&gt;&lt;h2 id=&quot;2020-11-04&quot;&gt;&lt;a href=&quot;#2020-11-04&quot;
      
    
    </summary>
    
    
      <category term="java" scheme="https://khs9628.github.io/categories/java/"/>
    
    
      <category term="java" scheme="https://khs9628.github.io/tags/java/"/>
    
  </entry>
  
  <entry>
    <title>Java CodeTest 연습 (Hash)</title>
    <link href="https://khs9628.github.io/2020/11/03/201103-codeTest-j/"/>
    <id>https://khs9628.github.io/2020/11/03/201103-codeTest-j/</id>
    <published>2020-11-03T09:57:09.000Z</published>
    <updated>2020-11-04T05:52:17.646Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Hash"><a href="#Hash" class="headerlink" title="Hash"></a>Hash</h1><ul><li>데이터를 다루는 기법 중에 하나</li><li>검색과 저장이 아주 빠르게 진행 </li><li>데이터를 검색할 때 사용할 key와 실제 데이터의 값이 (value가)  한 쌍으로 존재하고, key값이 배열의 인덱스로 변환</li><li>검색과 저장의 평균적인 시간 복잡도가 O(1)에 수렴 </li></ul><h1 id="완주하지-못한-선수"><a href="#완주하지-못한-선수" class="headerlink" title="완주하지 못한 선수"></a>완주하지 못한 선수</h1><h2 id="1차-답안"><a href="#1차-답안" class="headerlink" title="1차 답안"></a>1차 답안</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">solution</span><span class="params">(String[] participant, String[] completion)</span> </span>&#123;</span><br><span class="line">        </span><br><span class="line">        Arrays.sort(participant);</span><br><span class="line">        Arrays.sort(completion);</span><br><span class="line">        <span class="keyword">int</span> i;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span> ( i=<span class="number">0</span>; i&lt;completion.length; i++)&#123;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (!participant[i].equals(completion[i]))&#123;</span><br><span class="line">                <span class="keyword">return</span> participant[i];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> participant[i];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>int i</code></p><p>바깥에 i를 선언하는 이유는 completion의 순서하고 participant순서가 똑같을 때(탈락자가 제일 마지막 일때) 처리를 하려고 바깥에 선언</p><p>문제 자체는 맞았지만 Hash를 사용하지 않았기 때문에 해당 문제에 관한 HashMap을 사용한 코드를 분석해보았습니다.</p><h2 id="다른사람-풀이"><a href="#다른사람-풀이" class="headerlink" title="다른사람 풀이"></a>다른사람 풀이</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">solution</span><span class="params">(String[] participant, String[] completion)</span> </span>&#123;</span><br><span class="line">        String answer = <span class="string">""</span>;</span><br><span class="line">        HashMap&lt;String, Integer&gt; hm = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span> (String player : participant) hm.put(player, hm.getOrDefault(player, <span class="number">0</span>) + <span class="number">1</span>);</span><br><span class="line">        <span class="keyword">for</span> (String player : completion) hm.put(player, hm.get(player) - <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (String key : hm.keySet()) &#123;</span><br><span class="line">            <span class="keyword">if</span> (hm.get(key) != <span class="number">0</span>)&#123;</span><br><span class="line">                answer = key;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> answer;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>getOrDefault(player, 0)</code></p><p>getOrDefault를 넣어주지 않으면 중복 체크가 되지 않는다.<br>HashMap의 put은 key가 존재하면 value를 새로운 값으로 바꿔버리기 때문이다.<br>이미 등록된 동명이인이 있다면 hm.getOrDefault로 인해서 2라는 값이 들어가게 된다.</p><h1 id="전화번호부"><a href="#전화번호부" class="headerlink" title="전화번호부"></a><a href="https://programmers.co.kr/learn/courses/30/lessons/42577" rel="external nofollow noopener noreferrer" target="_blank">전화번호부</a></h1><h2 id="1차-답안-1"><a href="#1차-답안-1" class="headerlink" title="1차 답안"></a>1차 답안</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">solution</span><span class="params">(String[] phone_book)</span> </span>&#123;</span><br><span class="line">        Arrays.sort(phone_book);</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i&lt;phone_book.length - <span class="number">1</span>; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span>(phone_book[i+<span class="number">1</span>].contains(phone_book[i]))&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;   </span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>문자열 포함여부 관련 함수</code></p><table><thead><tr><th align="center">구분</th><th align="center">설명</th><th align="center">포함</th><th align="center">미포함</th></tr></thead><tbody><tr><td align="center">contains</td><td align="center">문자열에 검색하고자 하는 문자가 있는지 확인</td><td align="center">true</td><td align="center">false</td></tr><tr><td align="center">indexOf</td><td align="center">문자열에서 검색하는 문자의 위치를 반환</td><td align="center">문자 위치</td><td align="center">-1</td></tr><tr><td align="center">matches</td><td align="center">정규식을 이용하여 문자열을 검색한다.</td><td align="center">true</td><td align="center">false</td></tr></tbody></table><h2 id="다른사람풀이"><a href="#다른사람풀이" class="headerlink" title="다른사람풀이"></a>다른사람풀이</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">solution</span><span class="params">(String[] phone_book)</span> </span>&#123;</span><br><span class="line">        Arrays.sort(phone_book);</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i&lt;phone_book.length - <span class="number">1</span>; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span>(phone_book[i+<span class="number">1</span>].startsWith(phone_book[i]))&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;   </span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>contains()</code> 는 접두사가 아닌 내부의 요소도 비교하기 때문에 위에 답이 결과상으로 맞더라도 틀린답이다. </p><p><code>startsWith()</code></p><ul><li><p>boolean startsWith(String prefix)</p></li><li><p>startsWith() 함수는 대상 문자열이 특정 문자 또는 문자열로 시작하는지 체크하는 함수이다.</p></li><li><p>해당 문자열로 시작되는지 여부를 확인하고 boolean 에 맞춰 true/false 값을 리턴한다.</p></li></ul><h1 id="위장"><a href="#위장" class="headerlink" title="위장"></a><a href="https://programmers.co.kr/learn/courses/30/lessons/42578" rel="external nofollow noopener noreferrer" target="_blank">위장</a></h1><h2 id="1차-답안-2"><a href="#1차-답안-2" class="headerlink" title="1차 답안"></a>1차 답안</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.Set;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">solution</span><span class="params">(String[][] clothes)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> answer = <span class="number">1</span>; </span><br><span class="line">        HashMap&lt;String, Integer&gt; clothesMap = <span class="keyword">new</span> HashMap&lt;String, Integer&gt;();</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i =<span class="number">0</span>; i&lt;clothes.length; i++)&#123;</span><br><span class="line">           clothesMap.put(clothes[i][<span class="number">1</span>], clothesMap.getOrDefault(clothes[i][<span class="number">1</span>], <span class="number">0</span>)+<span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        Set&lt;String&gt; keySet = clothesMap.keySet();         </span><br><span class="line">        <span class="keyword">for</span>(String key : keySet) &#123;</span><br><span class="line">        answer *= clothesMap.get(key)+<span class="number">1</span>; </span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> answer-<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>getOrDefault(Object key, V defaultValue)</code></p><p>찾는 키가 존재한다면 찾는 키의 값을 반환하고 없다면 기본 값을 반환한다.</p><p><code>Set</code> - 집합</p><ul><li>요소는 중복될 수 없다.</li><li>순서가 있을 수도 있다.</li><li>정렬될 수도 있다.</li></ul><table><thead><tr><th align="center">클래스</th><th align="center">특징</th><th align="center">성능</th></tr></thead><tbody><tr><td align="center">HashSet</td><td align="center">순서가 필요없는 데이터를 hash table에 저장.</td><td align="center">Set 중에 가장 성능이 좋음</td></tr><tr><td align="center">TreeSet</td><td align="center">저장된 데이터의 값에 따라 정렬됨. red-black tree 타입으로 값이 저장.</td><td align="center">HashSet보다 성능이 느림</td></tr><tr><td align="center">LinkedHashSet</td><td align="center">연결된 목록 타입으로 구현된 hash table에 데이터 저장. 저장된 순서에 따라 값이 정렬.</td><td align="center">셋 중 가장 느림</td></tr></tbody></table>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Hash&quot;&gt;&lt;a href=&quot;#Hash&quot; class=&quot;headerlink&quot; title=&quot;Hash&quot;&gt;&lt;/a&gt;Hash&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;데이터를 다루는 기법 중에 하나&lt;/li&gt;
&lt;li&gt;검색과 저장이 아주 빠르게 진행 &lt;/li&gt;
&lt;li&gt;데
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>스프링 기본개념</title>
    <link href="https://khs9628.github.io/2020/11/03/201103-Spring/"/>
    <id>https://khs9628.github.io/2020/11/03/201103-Spring/</id>
    <published>2020-11-03T06:16:44.000Z</published>
    <updated>2020-11-03T09:06:13.527Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Spring"><a href="#Spring" class="headerlink" title="Spring"></a>Spring</h1><p>스프링 퀵스타트를 이용해서 스프링 기초를 연습하는 글입니다.</p><h2 id="프레임워크"><a href="#프레임워크" class="headerlink" title="프레임워크"></a>프레임워크</h2><p>프레임워크란 뼈대 혹은 틀로서 소프트웨어 관점에서 접근하면 아키텍처에 해당하는 골격 코드이다.</p><p><code>아키텍쳐 일관성</code> - &gt; <code>골격코드 제공</code></p><p><code>장점</code></p><ol><li>빠른 구현시간</li><li>쉬운관리</li><li>개발자들의 역량 획일화</li><li>검증된 아키텍처의 재사용과 일관성 유지</li></ol><h2 id="Spring-프레임워크"><a href="#Spring-프레임워크" class="headerlink" title="Spring 프레임워크"></a>Spring 프레임워크</h2><p><code>특징</code></p><ol><li>경량(Lightweight)<br>POJO형태의 객체 관리 - 특별한 규칙이 없는 단순하고 가벼운 객체 사용</li></ol><p>cf) 토막 상식<br><code>POJO (Plain Old Java Object) vs EJB(Enterprise Java Beans)</code></p><p>POJO를 이해 하기 전  POJO라는 단어가 만들어진 역사적 배경을 살펴볼 필요가 잇다. POJO는 마틴 파울러가  2000년 가을에 열렸던 어느 컨퍼런스의 발표를 준비하면서 처음 만들어낸 말이다. 마틴 파울러는 EJB(Enterprise JavaBean)보다는 단순한 자바 오브젝트에 도메인 로직을 넣어 사용하는 것이 여러가지 장점이 있는데도 왜 사람들이 그 EJB가 아닌 ‘평범한자바 오브젝트’를 사용하기를 꺼려 하는지에 대해 의문을 가졌다. 그리고 그는 단순한 오브젝트에는 EJB와 같은 그럴듯한 이름이 없어어서 그 사용을 주저하는 것이라고 결론 내렸다.</p><p>그래서 만든 단어가 POJO라는 용어인 것이다. POJO기반의 기술을 사용한다고 말하면 왠지 첨단 기술을 사용하는 앞선 개발자인 듯한 인상을 주기 때문인다.</p><p>POJO기반의 프로그래밍 기술이 EJB의 강력한 대안으로 등장했고 ,POJO 기반 프레임워크 ,POJO 애플리케이션을 위한 플랫폼 등이 점점 인기를 끌게 되었고, 결국 POJO가 배제하려고 했던 EJB는 POJO기반의 기술에 밀려 이제 레거시 기술로 사라질 위기에 처했다. 그렇다면 단지 EJB를 사용하지 않으면 모두 POJO라고 할 수 있을까? 그렇지 않다. POJO프로그래밍이라는 개념은 단지 “EJB가 아닌 자바”이상의 특징을 가지고 있는 프로그래밍 모델이다. POJO기반의 개발은 생각보다 단순하지 않다.</p><p>POJO를 좀더 이해하려면 EJB의 장단점을 함께 이해해야 한다. 그것은 POJO 프로그래밍이 다시 EJB시대이전으로 돌아 가자는 것이 아니고 ,EJB를 넘어 그보다 더 앞으로 나아가자는 것이기 때문이다. </p><p>EJB를 사용하지 말고 POJO를 쓰자는 것은  EJB이전의 방식으로 돌아 가는 것을 의미한다면 또 다른 문제가 발생 할 수 밖에 없다. 여전히 복잡한 로우레벨의 API를 이용해 코드를 작성해야 하고, 많은 기술적인 문제를 애플리케이션 코드에 그대로 노출시켜 개발해야 한다면 기껏 POJO로의 복귀 덕분에 얻는 많은 장점들을 놓칠 수 밖에 없다. </p><p>그래서 등장한 것이 POJO 기반의 프레임워크이다. POJO프레임워크는 POJO를 이용한 애플리케이션 개발이 가진 특징과 장점을 그대로 살리면서 EJB에서 제공하는 엔터프라이즈 서비스와 기술을 그대로 사용할 수 있도록 도와주느 프레임워크이다. 나아가 이는 기존의 EJB에서보다 훨씬 더 세련되고 나은 방법이다.</p><p>cf) Not POJO? -&gt; Servelt</p><ul><li>javax.servelt, javax.servelt.http 패키지를 import 해야한다.</li><li>public 클래스로 선언해야한다.</li><li>Servelt, GenericServelt, HttpServelt 중 하나를 상속 받아야한다.</li><li>기본 생성자(Default Constructor)가 있어야한다.</li><li>생명주기에 해당하는 메소드를 재정의(Overriding)한다.</li></ul><p><strong><em>비지니스 컴포넌트를 개발할 때 <code>낮은 결합도</code> ,<code>높은 응집도</code> 이 두가지가 중요</em></strong></p><ol start="2"><li>IoC(Inversion of Control) - 제어의 역행</li></ol><p>스프링 프레임워크는 IoC를 통해 <code>낮은 결합도</code> 유지</p><ul><li><p>IoC를 통해 객체 생성을 자바코드로 직접 처리하는 것이 아닌 컨테이너가 대신처리 </p></li><li><p>객체와 객체 사이이 의존관계를 컨테이너가 처리</p></li></ul><p>-&gt; 소스에 의존관계가 명시되지 않으므로 곃합도가 떨어져 유지보수가 편리해진다.</p><ol start="3"><li>AOP(Aspect Oriented Programming) - 관점 지향 프로그래밍</li></ol><p>핵심 비지니스 로직과 각 비지니스 메소드마다 반복해서 등장하는 공통로직을 분리함으로써 개발의 <code>높은 응집도</code> 지원</p><ol start="4"><li>컨테이너</li></ol><p>컨테이너 : 특정 객체의 생성과 관리를 담당 / 객체 운용의 필요한 다양한 기능을 제공</p><p>객체를 생성하고 객체 간의 의존관계를 관리하는 점에서 스프링도 일종의 <code>컨테이너</code> 이다.</p><h3 id="스프링-컨테이너-종류"><a href="#스프링-컨테이너-종류" class="headerlink" title="스프링 컨테이너 종류"></a>스프링 컨테이너 종류</h3><ol><li>BeanFactory<br><bean> 객체를 생성하고 관리하는 가장 기본적인 컨테이너 제공</bean></li></ol><p>cf) 클라이언트의 요청에 의해서만 <bean> 객체 생성 (Lazy Loading - 지연로딩)</bean></p><ol start="2"><li>ApplicationContext<br><bean> 객체 관리 이외에 트랜잭션 관리나 메시지 기반의 다국어 처리 등 다양한 기능 제공한다.</bean></li></ol><h3 id="어노테이션"><a href="#어노테이션" class="headerlink" title="어노테이션"></a>어노테이션</h3><p>어노테이션은 클래스나 메서드, 변수 등의 메타 데이터, <code>데이터의 정의를 설정하는 데이터</code>라고 할 수 있습니다.</p><p>즉, 어노테이션의 데이터로는 실제 데이터를 적용하는 것은 아니고, 클래스, 메서드, 변수를 구분하기 위한 데이터라고 할 수 있습니다.</p><ul><li>@Autowired : 주로 변수 위에 설정항 해당타입이 객체를 찾아서 자동으로 할당</li><li>@Qualifier : 특정 객체의 이름을 이용하여 의존성을 주입할 때 사용</li><li>@Inject : @Autowired 와 동일</li><li>@Resource : @Autowired @Qualifier의 기능을 결합</li><li>@Service : 비즈니스 로직을 처리하는 Service 클래스</li><li>@Repository : 데이터베이스 연동을 처리하는 DAO 클래스</li><li>@Controller : 사용자 요청을 제어하는 Controller 클래스</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Spring&quot;&gt;&lt;a href=&quot;#Spring&quot; class=&quot;headerlink&quot; title=&quot;Spring&quot;&gt;&lt;/a&gt;Spring&lt;/h1&gt;&lt;p&gt;스프링 퀵스타트를 이용해서 스프링 기초를 연습하는 글입니다.&lt;/p&gt;
&lt;h2 id=&quot;프레임워크&quot;&gt;&lt;
      
    
    </summary>
    
    
      <category term="Spring" scheme="https://khs9628.github.io/categories/Spring/"/>
    
    
      <category term="Spring" scheme="https://khs9628.github.io/tags/Spring/"/>
    
  </entry>
  
  <entry>
    <title>스프링 기본</title>
    <link href="https://khs9628.github.io/2020/11/03/201104-Spring2/"/>
    <id>https://khs9628.github.io/2020/11/03/201104-Spring2/</id>
    <published>2020-11-03T06:16:44.000Z</published>
    <updated>2020-11-10T07:00:14.267Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Spring"><a href="#Spring" class="headerlink" title="Spring"></a>Spring</h1><p>스프링 퀵스타트를 이용해서 스프링 기초를 연습하는 글입니다.</p><p><a href="https://github.com/khs9628/SPRING_QUICK_START" rel="external nofollow noopener noreferrer" target="_blank">git 소스 주소</a></p><h2 id="Oracle-사용자-등록"><a href="#Oracle-사용자-등록" class="headerlink" title="Oracle 사용자 등록"></a>Oracle 사용자 등록</h2><p><img alt="img" data-src="/img/Spring/create_user.PNG" class="lozad"></p><h2 id="권한-부여"><a href="#권한-부여" class="headerlink" title="권한 부여"></a>권한 부여</h2><p><img alt="img" data-src="/img/Spring/grant_user.PNG" class="lozad"></p><h2 id="JSP-MODEL-1방식-테스트"><a href="#JSP-MODEL-1방식-테스트" class="headerlink" title="JSP MODEL 1방식 테스트"></a>JSP MODEL 1방식 테스트</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.springbook.biz.common;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.sql.Connection;</span><br><span class="line"><span class="keyword">import</span> java.sql.DriverManager;</span><br><span class="line"><span class="keyword">import</span> java.sql.PreparedStatement;</span><br><span class="line"><span class="keyword">import</span> java.sql.ResultSet;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JDBCUtil</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Connection <span class="title">getConnection</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">Class.forName(<span class="string">"oracle.jdbc.driver.OracleDriver"</span>);</span><br><span class="line"><span class="keyword">return</span> DriverManager.getConnection(<span class="string">"jdbc:oracle:thin:@localhost:1521:xe"</span>, <span class="string">"admin"</span>, <span class="string">"1234"</span>);</span><br><span class="line">&#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">close</span><span class="params">(PreparedStatement stmt, Connection conn)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (stmt != <span class="keyword">null</span>) &#123;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line"><span class="keyword">if</span> (!stmt.isClosed())</span><br><span class="line">stmt.close();</span><br><span class="line">&#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">stmt = <span class="keyword">null</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (conn != <span class="keyword">null</span>) &#123;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line"><span class="keyword">if</span> (!conn.isClosed())</span><br><span class="line">conn.close();</span><br><span class="line">&#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">conn = <span class="keyword">null</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">close</span><span class="params">(ResultSet rs, PreparedStatement stmt, Connection conn)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (rs != <span class="keyword">null</span>) &#123;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line"><span class="keyword">if</span> (!rs.isClosed())</span><br><span class="line">rs.close();</span><br><span class="line">&#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">rs = <span class="keyword">null</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (stmt != <span class="keyword">null</span>) &#123;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line"><span class="keyword">if</span> (!stmt.isClosed())</span><br><span class="line">stmt.close();</span><br><span class="line">&#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">stmt = <span class="keyword">null</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (conn != <span class="keyword">null</span>) &#123;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line"><span class="keyword">if</span> (!conn.isClosed())</span><br><span class="line">conn.close();</span><br><span class="line">&#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">conn = <span class="keyword">null</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Spring&quot;&gt;&lt;a href=&quot;#Spring&quot; class=&quot;headerlink&quot; title=&quot;Spring&quot;&gt;&lt;/a&gt;Spring&lt;/h1&gt;&lt;p&gt;스프링 퀵스타트를 이용해서 스프링 기초를 연습하는 글입니다.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http
      
    
    </summary>
    
    
      <category term="Spring" scheme="https://khs9628.github.io/categories/Spring/"/>
    
    
      <category term="Spring" scheme="https://khs9628.github.io/tags/Spring/"/>
    
  </entry>
  
  <entry>
    <title>TIL 10월</title>
    <link href="https://khs9628.github.io/2020/10/31/2010_TIL/"/>
    <id>https://khs9628.github.io/2020/10/31/2010_TIL/</id>
    <published>2020-10-31T07:27:38.000Z</published>
    <updated>2020-11-05T07:04:36.321Z</updated>
    
    <content type="html"><![CDATA[<h1 id="하루를-기록하다"><a href="#하루를-기록하다" class="headerlink" title="하루를 기록하다"></a>하루를 기록하다</h1><h2 id="좋은-습관은-좋은사람을-만든다"><a href="#좋은-습관은-좋은사람을-만든다" class="headerlink" title="좋은 습관은 좋은사람을 만든다."></a>좋은 습관은 좋은사람을 만든다.</h2><h1 id="TO-DO"><a href="#TO-DO" class="headerlink" title="TO-DO"></a>TO-DO</h1><ol><li>일 1회 알고리즘 문제 1개 이상 풀기</li><li>Spring 프로젝트 </li><li>Django Rest-Framework 구조 연습</li><li>Nosql 공부</li><li>면접 준비 및 자소서 준비</li><li>포트폴리오 준비</li></ol><h2 id="2020-10-19"><a href="#2020-10-19" class="headerlink" title="2020-10-19"></a>2020-10-19</h2><ol><li><del>정렬알고리즘 풀이</del></li></ol><ul><li><del>K번째수</del></li><li><del>가장 큰 수</del></li></ul><ol start="2"><li><del>Django Mongo DB 세팅</del></li><li><del>회사 리스트업</del></li></ol><h2 id="2020-10-20"><a href="#2020-10-20" class="headerlink" title="2020-10-20"></a>2020-10-20</h2><ol><li><del>알고리즘 풀이</del></li></ol><ul><li><del>H-Index(정렬)</del></li><li><del>모의고사(완전탐색)</del></li></ul><ol start="2"><li><del>Django Mongo DB 테스트</del></li></ol><h2 id="2020-10-21"><a href="#2020-10-21" class="headerlink" title="2020-10-21"></a>2020-10-21</h2><ol><li><del>알고리즘 풀이</del></li></ol><ul><li><del>소수 찾기(완전탐색)</del></li><li><del>카펫(완전탐색)</del></li></ul><ol start="2"><li><del>TDD 연습</del></li></ol><h2 id="2020-10-22"><a href="#2020-10-22" class="headerlink" title="2020-10-22"></a>2020-10-22</h2><ol><li><del>알고리즘 2개 풀이</del></li></ol><ul><li><del>체육복</del></li><li><del>큰 수 만들기</del></li></ul><ol start="2"><li><del>단순복사 vs 얕은복사 vs 깊은복사</del></li></ol><h2 id="2020-10-23"><a href="#2020-10-23" class="headerlink" title="2020-10-23"></a>2020-10-23</h2><ol><li>알고리즘 풀이</li></ol><ul><li><del>조이스틱</del></li><li><del>구명보트</del></li></ul><ol start="2"><li><del>이력서 작성</del></li><li><del>FitFinder 포트폴리오 작성</del></li></ol><h2 id="2020-10-26"><a href="#2020-10-26" class="headerlink" title="2020-10-26"></a>2020-10-26</h2><ol><li>알고리즘 풀이</li></ol><ul><li><del>섬 연결하기</del></li><li><del>타겟 넘버</del></li></ul><ol start="2"><li><del>DRF 연습</del><br><a href="https://github.com/Nifled/drf-cheat-sheet" rel="external nofollow noopener noreferrer" target="_blank">URL</a></li><li><del>사진찍기</del></li></ol><h2 id="2020-10-27"><a href="#2020-10-27" class="headerlink" title="2020-10-27"></a>2020-10-27</h2><ol><li>알고리즘 풀기</li></ol><ul><li><del>네트워크</del></li></ul><h2 id="2020-10-28"><a href="#2020-10-28" class="headerlink" title="2020-10-28"></a>2020-10-28</h2><ol><li>알고리즘 풀기</li></ol><ul><li><del>단어 변환</del></li></ul><h2 id="2020-10-29"><a href="#2020-10-29" class="headerlink" title="2020-10-29"></a>2020-10-29</h2><ol><li>알고리즘 풀이</li></ol><ul><li><del>축구 팀 선택 알고리즘</del></li><li><del>여행경로</del></li></ul><h2 id="2020-10-30"><a href="#2020-10-30" class="headerlink" title="2020-10-30"></a>2020-10-30</h2><ol><li><del>자소서 작성</del></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;하루를-기록하다&quot;&gt;&lt;a href=&quot;#하루를-기록하다&quot; class=&quot;headerlink&quot; title=&quot;하루를 기록하다&quot;&gt;&lt;/a&gt;하루를 기록하다&lt;/h1&gt;&lt;h2 id=&quot;좋은-습관은-좋은사람을-만든다&quot;&gt;&lt;a href=&quot;#좋은-습관은-좋은사람을-
      
    
    </summary>
    
    
      <category term="TIL" scheme="https://khs9628.github.io/categories/TIL/"/>
    
    
      <category term="TIL" scheme="https://khs9628.github.io/tags/TIL/"/>
    
  </entry>
  
  <entry>
    <title>DRF 주요개념</title>
    <link href="https://khs9628.github.io/2020/10/22/201023-DRF/"/>
    <id>https://khs9628.github.io/2020/10/22/201023-DRF/</id>
    <published>2020-10-22T09:11:36.000Z</published>
    <updated>2020-10-26T10:24:47.607Z</updated>
    
    <content type="html"><![CDATA[<h1 id="REST-Framework란"><a href="#REST-Framework란" class="headerlink" title="REST Framework란?"></a>REST Framework란?</h1><ul><li><p><code>REST</code> 란 <code>Representational State Transfer</code> 의 약자이다. 월드 와이드 웹과 같은 분산 하이퍼미디어 시스템을 위한 소프트웨어 아키텍처의 한 형식이다.</p></li><li><p>REST란, “웹에 존재하는 모든 자원(이미지, 동영상, DB 자원)에 고유한 <code>URI</code>를 부여해 활용”하는 것으로, 자원을 정의하고 자원에 대한 주소를 지정하는 방법론을 의미한다고 한다.</p></li><li><p>이런 REST의 형식을 따른 시스템을 RESTful 이라고 부른다.</p></li><li><p>HTTP URI 를 통해 자원을 명시하고 HTTP Method를 통해 해당 자원의 대한 CRUD Operation을 적용한다.</p></li></ul><h2 id="CRUD-Operation-HTTP-Method"><a href="#CRUD-Operation-HTTP-Method" class="headerlink" title="CRUD Operation , HTTP Method"></a>CRUD Operation , HTTP Method</h2><ul><li>Create : POST (자원 생성)</li><li>Read : GET (자원의 정보 조회)</li><li>Update : PUT (자원의 정보 업데이트)</li><li>Delete : DELETE (자원 삭제)</li></ul><h2 id="REST-구성요소"><a href="#REST-구성요소" class="headerlink" title="REST 구성요소"></a>REST 구성요소</h2><ul><li>자원(Resource) , URI<br>모든 자원은 고유한 ID를 가지고 ID는 서버에 존재하고 클라이언트는 각 자원의 상태를 조작하기 위해 요청을 보낸다. HTTP에서 이러한 자원을 구별하는 ID는 ‘Students/1’ 같은 HTTP URI 이다.</li></ul><p><code>cf) URI : 통합 자원 식별자(Uniform Resource Identifier, URI)는 인터넷에 있는 자원을 나타내는 유일한 주소이다.</code></p><ul><li><p>행위(Verb) , Method<br>클라이언트는 URI를 이용해 자원을 지정하고 자원을 조작하기 위해 Method를 사용한다. HTTP 프로토콜에서는 GET , POST , PUT , DELETE 같은 Method를 제공한다.</p></li><li><p>표현(Representation)<br>클라이언트가 서버로 요청을 보냈을 때 서버가 응답으로 보내주는 자원의 상태를 Representation이라고 한다. REST에서 하나의 자원은 JSON , XML , TEXT , RSS 등 여러형태의 Representation으로 나타낼수 있다.</p></li></ul><h2 id="REST-의-특징"><a href="#REST-의-특징" class="headerlink" title="REST 의 특징"></a>REST 의 특징</h2><ul><li><p>클라이언트 / 서버 구조 (Client-Server)<br>자원이 있는 Server , 자원을 요청하는 Client의 구조를 가진다.</p></li><li><p>무상태 (Stateless)<br>HTTP는 Stateless 프로토콜 이므로 REST 역시 무상태성을 가진다. 클라이언트의 Context 를 서버에 저장하지 않는다.</p></li><li><p>캐시 처리 가능 (Cachealble)<br>웹 표준 HTTP 프로토콜을 그대로 사용하므로 , 웹에서 사용하는 기존의 인프라를 그대로 활용 가능하다.</p></li><li><p>계층화<br>API 서버는 순수 비즈니스 로직을 수행하고 그 앞단에 사용자 인증 , 암호화 , 로드밸런싱 등을 하는 계층을 추가하여 구조상의 유연성을 줄 수 있다.</p></li><li><p>인터페이스 일관성(Uniform Interface)<br>URI로 지정한 자원에 대한 조작을 통일되고 한정적인 인터페이스로 수행한다. HTTP 표준에만 따른다면 모든 플랫폼에 사용이 가능하다.</p></li><li><p>자체 표현 구조<br>동사(Method) + 명사(URI) 로 이루어져있어 어떤 메서드에 무슨 행위를 하는지 알 수 있으며 REST API 자체가 매우 쉬워서 API 메세지 자체만 보고도 API를 이해할 수 있다</p></li></ul><h2 id="REST의-장단점"><a href="#REST의-장단점" class="headerlink" title="REST의 장단점"></a>REST의 장단점</h2><h3 id="장점"><a href="#장점" class="headerlink" title="장점"></a><code>장점</code></h3><ul><li><p>쉬운 사용<br>HTTP 프로토콜 인프라를 그대로 사용하므로 별도의 인프라를 구축할 필요가 없다.</p></li><li><p>클라이언트-서버 역할의 명확한 분리<br>클라이언트는 REST API를 통해 서버와 정보를 주고받는다. REST의 특징인 Stateless에 따라 서버는 클라이언트의 Context를 유지할 필요가 없다.</p></li><li><p>특정 데이터 표현을 사용가능<br>REST API는 헤더 부분에 URI 처리 메소드를 명시하고 필요한 실제 데이터를 ‘body’에 표현할 수 있도록 분리시켰다. JSON , XML 등 원하는 Representation 언어로 사용 가능하다.</p></li></ul><h3 id="단점"><a href="#단점" class="headerlink" title="단점"></a><code>단점</code></h3><ul><li><p>메소드의 한계<br>REST는 HTTP 메소드를 이용하여 URI를 표현한다. 이러한 표현은 쉬운 사용이 가능하다는 장점이 있지만 반대로 메소드 형태가 제한적인 단점이 있다.</p></li><li><p>표준이 없음<br>REST는 설계 가이드 일 뿐이지 표준이 아니다. 명확한 표준이 없다.</p></li></ul><h1 id="실제-DRF-구현"><a href="#실제-DRF-구현" class="headerlink" title="실제 DRF 구현"></a>실제 DRF 구현</h1><p><a href="https://github.com/Nifled/drf-cheat-sheet" rel="external nofollow noopener noreferrer" target="_blank">참고 URL</a></p><p><code>ModelSerializer</code> VS <code>HyperlinkedModelSerializer</code></p><p>The only difference is, as in citation you included, that primary and foreign keys are represented by URLs that point to those resources, instead of just actual key values.</p><p>RestFramework는 URI 즉 자원들이 URI 형태로 지정되기 때문에 Frontend에서 해당 자원을 요청하기 쉽게 url 형태로 리턴하는 것이 바람직하다.</p><p><strong><em>그러므로 DRF에서는 ModelSerializer보다 HyperlinkedModelSerializer를 권장하고 있다.</em></strong></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;REST-Framework란&quot;&gt;&lt;a href=&quot;#REST-Framework란&quot; class=&quot;headerlink&quot; title=&quot;REST Framework란?&quot;&gt;&lt;/a&gt;REST Framework란?&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;R
      
    
    </summary>
    
    
      <category term="Django" scheme="https://khs9628.github.io/categories/Django/"/>
    
    
      <category term="Django" scheme="https://khs9628.github.io/tags/Django/"/>
    
  </entry>
  
  <entry>
    <title>CodeTest 연습 (DFS/BFS)</title>
    <link href="https://khs9628.github.io/2020/10/22/201026-codeTest/"/>
    <id>https://khs9628.github.io/2020/10/22/201026-codeTest/</id>
    <published>2020-10-22T04:55:30.000Z</published>
    <updated>2020-10-29T10:07:03.979Z</updated>
    
    <content type="html"><![CDATA[<h1 id="깊이-너비-우선탐색"><a href="#깊이-너비-우선탐색" class="headerlink" title="깊이/너비 우선탐색"></a>깊이/너비 우선탐색</h1><p><a href="https://itholic.github.io/python-bfs-dfs/" rel="external nofollow noopener noreferrer" target="_blank">참고 URL</a></p><p><img alt="DFS/BFS" data-src="/img/codingtest/DFS.png" class="lozad"></p><ol><li><p>A - B - C - H - D - I - J - M - E - G - K - F - L</p></li><li><p>A - B- C - D - E - F - G - H - I - J - K - L - M</p></li></ol><p>1번 방식은 한 단계씩 나아가면서 해당 노드와 같은 레벨에 있는 노드들(즉, 형제 노드들)을 먼저 순회하는 방식이다.</p><p>이러한 방식을 <code>Breath First Search (너비 우선 탐색, BFS)</code> 라고 한다.</p><p>2번 방식은 한 노드의 자식을 타고 끝까지 순회한 다음에, 다시 돌아와서 다른 형제의 자식을 타고 내려가며 순회하는 방식이다.</p><p>이러한 방식은 <code>Depth First Search (깊이 우선 탐색, DFS)</code> 라고 한다.</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">graph = &#123;</span><br><span class="line">    <span class="string">'A'</span>: [<span class="string">'B'</span>],</span><br><span class="line">    <span class="string">'B'</span>: [<span class="string">'A'</span>, <span class="string">'C'</span>, <span class="string">'H'</span>],</span><br><span class="line">    <span class="string">'C'</span>: [<span class="string">'B'</span>, <span class="string">'D'</span>],</span><br><span class="line">    <span class="string">'D'</span>: [<span class="string">'C'</span>, <span class="string">'E'</span>, <span class="string">'G'</span>],</span><br><span class="line">    <span class="string">'E'</span>: [<span class="string">'D'</span>, <span class="string">'F'</span>],</span><br><span class="line">    <span class="string">'F'</span>: [<span class="string">'E'</span>],</span><br><span class="line">    <span class="string">'G'</span>: [<span class="string">'D'</span>],</span><br><span class="line">    <span class="string">'H'</span>: [<span class="string">'B'</span>, <span class="string">'I'</span>, <span class="string">'J'</span>, <span class="string">'M'</span>],</span><br><span class="line">    <span class="string">'I'</span>: [<span class="string">'H'</span>],</span><br><span class="line">    <span class="string">'J'</span>: [<span class="string">'H'</span>, <span class="string">'K'</span>],</span><br><span class="line">    <span class="string">'K'</span>: [<span class="string">'J'</span>, <span class="string">'L'</span>],</span><br><span class="line">    <span class="string">'L'</span>: [<span class="string">'K'</span>],</span><br><span class="line">    <span class="string">'M'</span>: [<span class="string">'H'</span>]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="BFS-Python"><a href="#BFS-Python" class="headerlink" title="BFS (Python)"></a>BFS (Python)</h2><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">bfs</span><span class="params">(graph, start_node)</span>:</span></span><br><span class="line">    visit = list()</span><br><span class="line">    queue = list()</span><br><span class="line"></span><br><span class="line">    queue.append(start_node)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> queue:</span><br><span class="line">        node = queue.pop(<span class="number">0</span>)</span><br><span class="line">        <span class="keyword">if</span> node <span class="keyword">not</span> <span class="keyword">in</span> visit:</span><br><span class="line">            visit.append(node)</span><br><span class="line">            queue.extend(graph[node])</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> visit</span><br></pre></td></tr></table></figure><h2 id="DFS-Python"><a href="#DFS-Python" class="headerlink" title="DFS (Python)"></a>DFS (Python)</h2><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">dfs</span><span class="params">(graph, start_node)</span>:</span></span><br><span class="line">    visit = list()</span><br><span class="line">    stack = list()</span><br><span class="line"></span><br><span class="line">    stack.append(start_node)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> stack:</span><br><span class="line">        node = stack.pop()</span><br><span class="line">        <span class="keyword">if</span> node <span class="keyword">not</span> <span class="keyword">in</span> visit:</span><br><span class="line">            visit.append(node)</span><br><span class="line">            stack.extend(graph[node])</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> visit</span><br></pre></td></tr></table></figure><p><code>cf) append() vs extend()</code></p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">x = [<span class="string">"my"</span>, <span class="string">"name"</span>, <span class="string">"is"</span>]</span><br><span class="line">y = [<span class="string">"kim"</span>, <span class="string">"hyun"</span>, <span class="string">"soo"</span>]</span><br><span class="line">x.append(y)</span><br><span class="line"><span class="comment"># x: ["my", "name", "is", ["kim", "hyun", "soo"]]</span></span><br><span class="line">x.extend(y)</span><br><span class="line"><span class="comment"># x: ["my", "name", "is", "kim", "hyun", "soo"]</span></span><br></pre></td></tr></table></figure><h1 id="타겟-넘버"><a href="#타겟-넘버" class="headerlink" title="타겟 넘버"></a><a href="https://programmers.co.kr/learn/courses/30/lessons/43165" rel="external nofollow noopener noreferrer" target="_blank">타겟 넘버</a></h1><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">solution</span><span class="params">(numbers, target)</span>:</span></span><br><span class="line">    tree = [<span class="number">0</span>]</span><br><span class="line">    <span class="keyword">for</span> num <span class="keyword">in</span> numbers:</span><br><span class="line">        sub_tree = []</span><br><span class="line">        <span class="keyword">for</span> tree_num <span class="keyword">in</span> tree:</span><br><span class="line">            sub_tree.append(tree_num + num)</span><br><span class="line">            sub_tree.append(tree_num - num)</span><br><span class="line">        tree = sub_tree</span><br><span class="line"></span><br><span class="line">        <span class="comment"># print("Tree : "+ str(tree))</span></span><br><span class="line">    <span class="keyword">return</span> tree.count(target)</span><br></pre></td></tr></table></figure><p>그래프의 깊이 만큼 더한 값을 리스트에 저장 후 해당 합이 target값과 같다면 count 한다.</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">numbers = [<span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>]</span><br><span class="line">target = <span class="number">3</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 1 : Tree : [1, -1]</span></span><br><span class="line"><span class="comment"># 2 : Tree : [2, 0, 0, -2]</span></span><br><span class="line"><span class="comment"># 3 : Tree : [3, 1, 1, -1, 1, -1, -1, -3]</span></span><br><span class="line"><span class="comment"># 4: Tree : [4, 2, 2, 0, 2, 0, 0, -2, 2, 0, 0, -2, 0, -2, -2, -4]</span></span><br><span class="line"><span class="comment"># 5 : Tree : [5, 3, 3, 1, 3, 1, 1, -1, 3, 1, 1, -1, 1, -1, -1, -3, 3, 1, 1, -1, 1, -1, -1, -3, 1, -1, -1, -3, -1, -3, -3, -5]</span></span><br><span class="line"><span class="comment"># return tree.count(target) = 3</span></span><br></pre></td></tr></table></figure><h1 id="네트워크"><a href="#네트워크" class="headerlink" title="네트워크"></a><a href="https://programmers.co.kr/learn/courses/30/lessons/43162" rel="external nofollow noopener noreferrer" target="_blank">네트워크</a></h1><h2 id="1차-답안"><a href="#1차-답안" class="headerlink" title="1차 답안"></a>1차 답안</h2><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">solution</span><span class="params">(n, computers)</span>:</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 1. 네트워크으 상태를 가지고 있는 배열 생성</span></span><br><span class="line">    <span class="comment"># A = [0] * n</span></span><br><span class="line">    <span class="comment"># 2. 서로 연결되어 있다면 해당 네트워크의 제외한 나머지 1로 지정</span></span><br><span class="line">    <span class="comment"># 0의 개수 + 1 개 =&gt; 네트워크의 수</span></span><br><span class="line">    </span><br><span class="line">    netStat = [<span class="number">0</span>] * n</span><br><span class="line">    i = <span class="number">-1</span> </span><br><span class="line">    <span class="keyword">for</span> computer <span class="keyword">in</span> computers:</span><br><span class="line">        i += <span class="number">1</span></span><br><span class="line">        j = <span class="number">-1</span></span><br><span class="line">        <span class="keyword">for</span> net <span class="keyword">in</span> computer:</span><br><span class="line"></span><br><span class="line">            j += <span class="number">1</span></span><br><span class="line">            <span class="keyword">if</span> j != i <span class="keyword">and</span> net == <span class="number">1</span>:</span><br><span class="line">                netStat[j] = <span class="number">1</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> netStat.count(<span class="number">0</span>) + <span class="number">1</span></span><br></pre></td></tr></table></figure><p><code>테스트 케이스 4, 5, 7 실패</code></p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">n = <span class="number">5</span></span><br><span class="line"></span><br><span class="line">computers = [[<span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>], [<span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>],[<span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>], [<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>], [<span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>]]</span><br></pre></td></tr></table></figure><p><strong><em>해당 경우 [A, B] , [C, E], [D] 3개의 네트워크가 생성되지만 return 값은 2로 결과가 다르게 나옵니다.</em></strong></p><h2 id="다른-사람-답안"><a href="#다른-사람-답안" class="headerlink" title="다른 사람 답안"></a>다른 사람 답안</h2><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">solution</span><span class="params">(n, computers)</span>:</span></span><br><span class="line">    answer = <span class="number">0</span></span><br><span class="line">    visit = [<span class="number">0</span> <span class="keyword">for</span> _ <span class="keyword">in</span> range(n)]</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">dfs</span><span class="params">(start)</span>:</span></span><br><span class="line">        st = [start]</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">while</span> st:</span><br><span class="line">            com_num = st.pop()</span><br><span class="line">            <span class="keyword">if</span> visit[com_num] == <span class="number">0</span>:</span><br><span class="line">                visit[com_num] = <span class="number">1</span></span><br><span class="line">            <span class="keyword">for</span> i <span class="keyword">in</span> range(len(computers[<span class="number">0</span>])):</span><br><span class="line">                <span class="keyword">if</span> computers[com_num][i] == <span class="number">1</span> <span class="keyword">and</span> visit[i] == <span class="number">0</span>:</span><br><span class="line">                    st.append(i)</span><br><span class="line">                    </span><br><span class="line">    i = <span class="number">0</span></span><br><span class="line">    <span class="keyword">while</span> <span class="number">0</span> <span class="keyword">in</span> visit:</span><br><span class="line">        <span class="keyword">if</span> visit[i] == <span class="number">0</span>:</span><br><span class="line">            dfs(i)</span><br><span class="line">            answer += <span class="number">1</span></span><br><span class="line">        i += <span class="number">1</span></span><br><span class="line">    <span class="keyword">return</span> answer</span><br></pre></td></tr></table></figure><p>DFS/BFS의 개념에 대해 이해하지 않고 문제만 풀다보니 계속 잘못된 풀이로 이어졌다.</p><p>DFS/BFS를 이용하지 않고 해당 문제를 풀어보려 했지만 시간상 너무 오래걸려 해당 문제를 해결하지 못하고 DFS/BFS 개념 정리 후 해당 답안을 참고해 문제를 풀었다.</p><h1 id="단어-변환"><a href="#단어-변환" class="headerlink" title="단어 변환"></a><a href="https://programmers.co.kr/learn/courses/30/lessons/43163" rel="external nofollow noopener noreferrer" target="_blank">단어 변환</a></h1><h2 id="1차답안"><a href="#1차답안" class="headerlink" title="1차답안"></a>1차답안</h2><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">solution</span><span class="params">(begin, target, words)</span>:</span></span><br><span class="line">    visited = [<span class="number">0</span>] * len(words)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># target이 words에 없다면 바로 0 리턴</span></span><br><span class="line">    <span class="keyword">if</span> target <span class="keyword">not</span> <span class="keyword">in</span> words:</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line"></span><br><span class="line">    answer = <span class="number">0</span></span><br><span class="line">    sm_idx = <span class="number">0</span></span><br><span class="line">    stack = [begin]</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> stack:</span><br><span class="line">        st = stack.pop()</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> begin == target:</span><br><span class="line">            <span class="keyword">return</span> answer</span><br><span class="line"></span><br><span class="line">        idx = - <span class="number">1</span></span><br><span class="line">        break_idx = <span class="literal">False</span></span><br><span class="line">        <span class="keyword">for</span> word <span class="keyword">in</span> words:</span><br><span class="line">            <span class="keyword">if</span> break_idx == <span class="literal">True</span>:</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">            idx += <span class="number">1</span></span><br><span class="line">            sm_idx = <span class="number">0</span></span><br><span class="line">            tg_idx = <span class="number">0</span></span><br><span class="line">            </span><br><span class="line">            <span class="keyword">for</span> i <span class="keyword">in</span> range(len(begin)):</span><br><span class="line">                </span><br><span class="line">                <span class="keyword">if</span> target[i] == st[i]:</span><br><span class="line">                    tg_idx += <span class="number">1</span></span><br><span class="line">                <span class="comment"># 문자열 중 같은지</span></span><br><span class="line">                <span class="keyword">if</span> word[i] == st[i]:</span><br><span class="line">                    sm_idx += <span class="number">1</span></span><br><span class="line">                </span><br><span class="line">                <span class="keyword">if</span> tg_idx == len(word) - <span class="number">1</span>:</span><br><span class="line">                    answer += <span class="number">1</span></span><br><span class="line">                    <span class="keyword">return</span> answer</span><br><span class="line">                </span><br><span class="line">                <span class="keyword">elif</span> sm_idx == len(word) - <span class="number">1</span> <span class="keyword">and</span> visited[idx] == <span class="number">0</span>:</span><br><span class="line">                    visited[idx] = <span class="number">1</span></span><br><span class="line">                    stack.append(word)</span><br><span class="line">                    answer += <span class="number">1</span></span><br><span class="line">                    break_idx = <span class="literal">True</span></span><br><span class="line">                    <span class="keyword">break</span></span><br><span class="line">    <span class="keyword">return</span> answer</span><br></pre></td></tr></table></figure><p><code>테스트 케이스 1번 통과 불가</code></p><h2 id="2차-답안"><a href="#2차-답안" class="headerlink" title="2차 답안"></a>2차 답안</h2><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">answer = <span class="number">0</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">dfs</span><span class="params">(begin,target,words,visited)</span>:</span></span><br><span class="line">    <span class="keyword">global</span> answer</span><br><span class="line">    stacks = [begin]</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">while</span> stacks:</span><br><span class="line">        <span class="comment"># 스택을 활용한 dfs 구현</span></span><br><span class="line">        stack = stacks.pop()</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span> stack == target:</span><br><span class="line">            <span class="keyword">return</span> answer</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span> w <span class="keyword">in</span> range(<span class="number">0</span>,len(words)):</span><br><span class="line">            <span class="comment"># 조건 1. 한 개의 알파벳만 다른 경우</span></span><br><span class="line">            <span class="keyword">if</span> len([i <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">0</span>,len(words[w])) <span class="keyword">if</span> words[w][i]!=stack[i]]) == <span class="number">1</span>:</span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span> visited[w] != <span class="number">0</span>:</span><br><span class="line">                    <span class="keyword">continue</span></span><br><span class="line"> </span><br><span class="line">                visited[w] = <span class="number">1</span></span><br><span class="line"> </span><br><span class="line">                <span class="comment"># stack에 추가</span></span><br><span class="line">                stacks.append(words[w])</span><br><span class="line">                print(stack)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># depth +</span></span><br><span class="line">        answer +=<span class="number">1</span></span><br><span class="line">        </span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">solution</span><span class="params">(begin, target, words)</span>:</span></span><br><span class="line">    <span class="keyword">global</span> answer</span><br><span class="line">    <span class="keyword">if</span> target <span class="keyword">not</span> <span class="keyword">in</span> words:</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">    </span><br><span class="line">    visited = [<span class="number">0</span> <span class="keyword">for</span> i <span class="keyword">in</span> words]</span><br><span class="line">    dfs(begin,target,words,visited)</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">return</span> answer</span><br></pre></td></tr></table></figure><h1 id="여행경로"><a href="#여행경로" class="headerlink" title="여행경로"></a><a href="https://programmers.co.kr/learn/courses/30/lessons/43164" rel="external nofollow noopener noreferrer" target="_blank">여행경로</a></h1><h2 id="1차답안-1"><a href="#1차답안-1" class="headerlink" title="1차답안"></a>1차답안</h2><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">dfs</span><span class="params">(tickets, begin, visited)</span>:</span></span><br><span class="line">    </span><br><span class="line">    answer = [begin]</span><br><span class="line">    stack = [begin]</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">while</span>(stack):</span><br><span class="line">        st = stack.pop()</span><br><span class="line">        idx = <span class="number">-1</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> ticket <span class="keyword">in</span> tickets:</span><br><span class="line">            idx += <span class="number">1</span></span><br><span class="line">            <span class="keyword">if</span> ticket[<span class="number">0</span>] == st <span class="keyword">and</span> visited[idx] == <span class="number">0</span>:</span><br><span class="line">                visited[idx] = <span class="number">1</span></span><br><span class="line">                stack.append(ticket[<span class="number">1</span>])</span><br><span class="line">                answer.append(ticket[<span class="number">1</span>])</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">                </span><br><span class="line">    <span class="keyword">return</span> answer</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">solution</span><span class="params">(tickets)</span>:</span></span><br><span class="line">    tickets.sort(key= <span class="keyword">lambda</span> x: x[<span class="number">1</span>])</span><br><span class="line">    visited = [<span class="number">0</span>] * len(tickets)</span><br><span class="line">    begin = <span class="string">"ICN"</span></span><br><span class="line">    answer = dfs(tickets, begin, visited)</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> answer</span><br></pre></td></tr></table></figure><p><code>테스트 1 ,테스트 2 통과불가</code></p><p>case : [[ICN, A], [A, C], [A, D], [D, B], [B, A]]<br>return : [ICN, A, D, B, A, C]</p><p><strong>* [INC, A, C] 가 되버리면 해당 경로가 끊기기 때문에 다음 경로가 있는지 판단하는 조건을 생각해야한다.*</strong></p><h2 id="2차-답안-1"><a href="#2차-답안-1" class="headerlink" title="2차 답안"></a>2차 답안</h2><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">dfs</span><span class="params">(tickets, begin, visited, plist)</span>:</span></span><br><span class="line">    answer = [begin]</span><br><span class="line">    stack = [begin]</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">while</span>(stack):</span><br><span class="line">        st = stack.pop()</span><br><span class="line">        idx = <span class="number">-1</span></span><br><span class="line">        <span class="keyword">for</span> ticket <span class="keyword">in</span> tickets:</span><br><span class="line">            idx += <span class="number">1</span></span><br><span class="line">            <span class="keyword">if</span> ticket[<span class="number">0</span>] == st <span class="keyword">and</span> visited[idx] == <span class="number">0</span>:</span><br><span class="line">                <span class="keyword">if</span> sum(visited) != len(visited) <span class="keyword">and</span> ticket[<span class="number">1</span>] <span class="keyword">in</span> plist:</span><br><span class="line">                    visited[idx] = <span class="number">1</span></span><br><span class="line">                    stack.append(ticket[<span class="number">1</span>])</span><br><span class="line">                    answer.append(ticket[<span class="number">1</span>])</span><br><span class="line">                    <span class="keyword">break</span></span><br><span class="line">                <span class="keyword">elif</span> sum(visited) == len(visited) <span class="number">-1</span>:</span><br><span class="line">                    stack.append(ticket[<span class="number">1</span>])</span><br><span class="line">                    answer.append(ticket[<span class="number">1</span>])</span><br><span class="line">                    <span class="keyword">break</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> answer</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">solution</span><span class="params">(tickets)</span>:</span></span><br><span class="line">    tickets.sort(key= <span class="keyword">lambda</span> x: x[<span class="number">1</span>])</span><br><span class="line">    visited = [<span class="number">0</span>] * len(tickets)</span><br><span class="line">    begin = <span class="string">"ICN"</span></span><br><span class="line">    plist = list(map(<span class="keyword">lambda</span> x: x[<span class="number">0</span>] , tickets))</span><br><span class="line">    answer = dfs(tickets, begin, visited, plist)</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> answer</span><br></pre></td></tr></table></figure><p><code>테스트 1 통과 불가</code></p><p>tickets = [[“ICN”, “COO”], [“ICN”, “BOO”], [“COO”, “ICN”], [“BOO”, “DOO”]]</p><p><strong>* 모든 요소를 사용하지 않고 [ICN, ,BOO] 리턴*</strong></p><h2 id="3차-답안"><a href="#3차-답안" class="headerlink" title="3차 답안"></a>3차 답안</h2><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">solution</span><span class="params">(tickets)</span>:</span></span><br><span class="line">    answer = []</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">dfs</span><span class="params">(start,ticList,path)</span>:</span></span><br><span class="line">        path.append(start)</span><br><span class="line">        <span class="keyword">if</span> len(ticList)==<span class="number">1</span>:</span><br><span class="line">            path.append(ticList[<span class="number">0</span>][<span class="number">1</span>])</span><br><span class="line">            answer.append(path)</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line">        <span class="keyword">for</span> t <span class="keyword">in</span> ticList:</span><br><span class="line">            <span class="keyword">if</span> t[<span class="number">0</span>]==start:</span><br><span class="line">                ticList_copy = ticList.copy()</span><br><span class="line">                ticList_copy.remove(t)</span><br><span class="line">                dfs(t[<span class="number">1</span>],ticList_copy,path.copy())</span><br><span class="line">                </span><br><span class="line">    dfs(<span class="string">"ICN"</span>,tickets,[])</span><br><span class="line">    <span class="keyword">return</span> min(answer)</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;깊이-너비-우선탐색&quot;&gt;&lt;a href=&quot;#깊이-너비-우선탐색&quot; class=&quot;headerlink&quot; title=&quot;깊이/너비 우선탐색&quot;&gt;&lt;/a&gt;깊이/너비 우선탐색&lt;/h1&gt;&lt;p&gt;&lt;a href=&quot;https://itholic.github.io/pyt
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>CodeTest 연습 (탐욕법)</title>
    <link href="https://khs9628.github.io/2020/10/22/201022-codeTest/"/>
    <id>https://khs9628.github.io/2020/10/22/201022-codeTest/</id>
    <published>2020-10-22T04:54:30.000Z</published>
    <updated>2020-10-27T05:32:25.203Z</updated>
    
    <content type="html"><![CDATA[<h1 id="탐욕법-Greedy"><a href="#탐욕법-Greedy" class="headerlink" title="탐욕법 (Greedy)"></a>탐욕법 (Greedy)</h1><ul><li>탐욕적인 방법이란?<br>결정 할 때마다 그 순간에 가장 좋다고 생각되는 것을 선택하며 최적의 해답에 도달하는 것<br>탐욕적인 방법은 그 순간에는 최적이지만, 전체적인 관점에서 최적이라는 보장이 없기 때문에 반드시 검증해야 한다.</li></ul><h1 id="체육복"><a href="#체육복" class="headerlink" title="체육복"></a><a href="https://programmers.co.kr/learn/courses/30/lessons/42862" rel="external nofollow noopener noreferrer" target="_blank">체육복</a></h1><h2 id="1차-답안"><a href="#1차-답안" class="headerlink" title="1차 답안"></a>1차 답안</h2><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">solution</span><span class="params">(n, lost, reserve)</span>:</span></span><br><span class="line">    tmp = lost.copy()</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> lost:</span><br><span class="line">        <span class="keyword">if</span> i <span class="keyword">in</span> reserve:</span><br><span class="line">            tmp.remove(i)</span><br><span class="line">            reserve.remove(i)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">elif</span> i - <span class="number">1</span> <span class="keyword">in</span> reserve:</span><br><span class="line">            tmp.remove(i)</span><br><span class="line">            reserve.remove(i<span class="number">-1</span>)</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">elif</span> i + <span class="number">1</span> <span class="keyword">in</span> reserve <span class="keyword">and</span> i + <span class="number">1</span> <span class="keyword">not</span> <span class="keyword">in</span> lost:</span><br><span class="line">            tmp.remove(i)</span><br><span class="line">            reserve.remove(i+<span class="number">1</span>)</span><br><span class="line">        </span><br><span class="line">    <span class="keyword">return</span>  n - len(tmp)</span><br></pre></td></tr></table></figure><p><code>tmp = lost.copy()</code><br>초기에 tmp = lost로 리스트 자체를 복사했더니<br>tmp.remove(value)를 해버리니 lost의 값도 삭제가 되는 문제가 발생했다.</p><p><code>단순복사 vs 얕은복사 vs 깊은복사</code></p><p><code>단순 복사</code></p><p>단순 복사는 완전히 동일한 객체를 복사합니다.</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">a = [<span class="number">1</span>, [<span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>]]</span><br><span class="line">b = a</span><br><span class="line">b[<span class="number">0</span>] = <span class="number">100</span></span><br><span class="line">b[<span class="number">1</span>][<span class="number">0</span>] = <span class="number">100</span></span><br><span class="line">print(a)</span><br><span class="line"><span class="comment"># [100, [100, 3, 4]]</span></span><br><span class="line">print(b)</span><br><span class="line"><span class="comment"># [100, [100, 3, 4]]</span></span><br></pre></td></tr></table></figure><p><code>얕은 복사(shallow copy)</code></p><ul><li>복합개체 ([1, [2, 3, 4]])만 새로운 객체로 복사하고 내부객체 ([2, 3, 4])는 동일한 객체를 참조합니다.</li></ul><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">a = [<span class="number">1</span>, [<span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>]]</span><br><span class="line">b = a.copy()</span><br><span class="line"></span><br><span class="line">b[<span class="number">0</span>] = <span class="number">100</span></span><br><span class="line">b[<span class="number">1</span>][<span class="number">0</span>] = <span class="number">100</span></span><br><span class="line"></span><br><span class="line">print(a)</span><br><span class="line"><span class="comment"># [1, [100, 3, 4]]</span></span><br><span class="line">print(b)</span><br><span class="line"><span class="comment"># [100, [100, 3, 4]]</span></span><br></pre></td></tr></table></figure><p><code>깊은 복사(deep copy)</code></p><ul><li>깊은복사는 복합객체와 내부객체를 재귀적으로 복사합니다.</li><li>둘다 완전 다른 객체로 기존 객체의 값 변경에 영향 받지 않습니다. (객체 전체를 복사하여 새로운 객체를 만듭니다.)</li></ul><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">a = [<span class="number">1</span>, [<span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>]]</span><br><span class="line">b = a.copy()</span><br><span class="line"></span><br><span class="line">b[<span class="number">0</span>] = <span class="number">100</span></span><br><span class="line">b[<span class="number">1</span>][<span class="number">0</span>] = <span class="number">100</span></span><br><span class="line"></span><br><span class="line">print(a)</span><br><span class="line"><span class="comment"># [1, [2, 3, 4]]</span></span><br><span class="line">print(b)</span><br><span class="line"><span class="comment"># [100, [100, 3, 4]]</span></span><br></pre></td></tr></table></figure><p><code>복사방식이 두가지인 이유는?</code></p><ul><li>자기 자신을 참조하는 객체를 복사하면 recursive loop가 발생할 수 있기 때문입니다.</li><li>깊은 복사는 원본과 공유해야 하는 데이터까지 새로운 객체로 복사하기 때문입니다.</li></ul><h2 id="큰-수-만들기"><a href="#큰-수-만들기" class="headerlink" title="큰 수 만들기"></a><a href="https://programmers.co.kr/learn/courses/30/lessons/42883" rel="external nofollow noopener noreferrer" target="_blank">큰 수 만들기</a></h2><h2 id="1차-답안-1"><a href="#1차-답안-1" class="headerlink" title="1차 답안"></a>1차 답안</h2><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> itertools <span class="keyword">import</span> permutations</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">solution</span><span class="params">(number, k)</span>:</span></span><br><span class="line">    list_num = list(number)</span><br><span class="line">    idx = <span class="number">-1</span></span><br><span class="line">    max_num = <span class="number">0</span></span><br><span class="line">    answer_list = []</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(len(list_num) - k, <span class="number">0</span> , <span class="number">-1</span>):</span><br><span class="line"></span><br><span class="line">        max_num = max(list_num[idx+<span class="number">1</span>: len(list_num) - i +<span class="number">1</span>])</span><br><span class="line">        </span><br><span class="line">        idx = list_num.index(max_num)</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(idx+<span class="number">1</span>):</span><br><span class="line">            list_num[i] = <span class="number">0</span></span><br><span class="line"></span><br><span class="line">        answer_list.append(max_num)</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="string">''</span>.join(answer_list)</span><br></pre></td></tr></table></figure><p>효율성 문제로 실패</p><h2 id="2차-답안"><a href="#2차-답안" class="headerlink" title="2차 답안"></a>2차 답안</h2><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> itertools <span class="keyword">import</span> permutations</span><br><span class="line"><span class="keyword">import</span> operator</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">solution</span><span class="params">(number, k)</span>:</span></span><br><span class="line">    list_num = list(map(int, number))</span><br><span class="line"></span><br><span class="line">    idx = <span class="number">-1</span></span><br><span class="line">    max_num = <span class="number">0</span></span><br><span class="line">    answer_list = []</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(len(list_num) - k, <span class="number">0</span> , <span class="number">-1</span>):</span><br><span class="line">        idx, max_num, = max(enumerate(list_num[idx+<span class="number">1</span>: len(list_num) - i +<span class="number">1</span>], idx+<span class="number">1</span>), key=operator.itemgetter(<span class="number">1</span>))</span><br><span class="line">        answer_list.append(str(max_num))</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="string">''</span>.join(answer_list)</span><br></pre></td></tr></table></figure><p><code>enumerate</code>를 사용해서 해당 max인 값의 idx와 max_num을 가져와 저장 -&gt; 0으로 초기화했던 값들 해결</p><p>테스트 케이스 10 시간초과로 통과 x</p><p>테스트 케이스 10 : 99999999999999999999999999999999 , 9999999999999 -&gt; max를 사용하다면  시간초과 발생</p><h2 id="3차-답안"><a href="#3차-답안" class="headerlink" title="3차 답안"></a>3차 답안</h2><p>max 함수를 사용하게 된다면 시간초과가 발생함 (테스트 케이스 10 통과 불가)</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">solution</span><span class="params">(number, k)</span>:</span></span><br><span class="line">    answer = <span class="string">''</span></span><br><span class="line">    stack=<span class="string">''</span></span><br><span class="line">    <span class="keyword">while</span> k!=<span class="number">0</span>:</span><br><span class="line">        <span class="keyword">if</span> number!=<span class="string">''</span>:</span><br><span class="line">            stack+=number[<span class="number">0</span>]   </span><br><span class="line">            number=number[<span class="number">1</span>:]   </span><br><span class="line">            len_stack=len(stack)</span><br><span class="line">            <span class="keyword">for</span> i <span class="keyword">in</span> reversed(range(len_stack)):</span><br><span class="line">                <span class="keyword">if</span> number==<span class="string">''</span>:</span><br><span class="line">                    <span class="keyword">break</span></span><br><span class="line">                <span class="keyword">if</span> number[<span class="number">0</span>]&gt;stack[i]:</span><br><span class="line">                    stack=stack[:i]</span><br><span class="line">                    k-=<span class="number">1</span></span><br><span class="line">                    <span class="keyword">if</span> k==<span class="number">0</span>:</span><br><span class="line">                        <span class="keyword">break</span></span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                    <span class="keyword">break</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            stack=stack[:<span class="number">-1</span>]</span><br><span class="line">            k-=<span class="number">1</span></span><br><span class="line">    answer=stack+number</span><br><span class="line">    <span class="keyword">return</span> answer</span><br></pre></td></tr></table></figure><h1 id="조이스틱"><a href="#조이스틱" class="headerlink" title="조이스틱"></a><a href="https://programmers.co.kr/learn/courses/30/lessons/42860" rel="external nofollow noopener noreferrer" target="_blank">조이스틱</a></h1><h2 id="1차-답안-2"><a href="#1차-답안-2" class="headerlink" title="1차 답안"></a>1차 답안</h2><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">solution</span><span class="params">(name)</span>:</span></span><br><span class="line"></span><br><span class="line">    idx , answer = <span class="number">0</span>, <span class="number">0</span></span><br><span class="line">    str_Alpabet = <span class="string">"ABCDEFGHIJKLMNOPQRSTUVWXYZ"</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 모두 A로 이루어진 이름이라면 움직일 필요 X</span></span><br><span class="line">    <span class="keyword">if</span> name  == <span class="string">"A"</span> * len(name):</span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="comment"># 오른쪽으로 갈지 왼쪽으로 갈지 나타내주는 지표</span></span><br><span class="line">        l_index = <span class="number">0</span> <span class="comment">#1이면 왼쪽방향</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(len(name)):</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> i == <span class="number">0</span>:</span><br><span class="line">                idx = str_Alpabet.index(name[i])</span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span> idx &lt; len(str_Alpabet) / <span class="number">2</span>: </span><br><span class="line">                    answer += idx</span><br><span class="line">                <span class="comment"># z에 더 가까울 경우</span></span><br><span class="line">                <span class="keyword">else</span>: </span><br><span class="line">                    idx = len(str_Alpabet) - idx</span><br><span class="line">                    answer += idx</span><br><span class="line"></span><br><span class="line">                </span><br><span class="line">                <span class="keyword">if</span> name[i<span class="number">-1</span>] == name[i+<span class="number">1</span>]:</span><br><span class="line">                    answer += <span class="number">1</span></span><br><span class="line">                    l_index = <span class="number">0</span></span><br><span class="line">                <span class="keyword">elif</span> name[i+<span class="number">1</span>] == <span class="string">'A'</span>:</span><br><span class="line">                <span class="comment"># 왼쪽으로 커서 이동</span></span><br><span class="line">                    answer += <span class="number">1</span></span><br><span class="line">                    l_index = <span class="number">1</span></span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                <span class="comment"># 오른쪽으로 커서 이동</span></span><br><span class="line">                    answer += <span class="number">1</span></span><br><span class="line">                    l_index = <span class="number">1</span></span><br><span class="line"></span><br><span class="line">            <span class="keyword">elif</span> l_index == <span class="number">0</span>:</span><br><span class="line">                idx = str_Alpabet.index(name[i])</span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span> idx  &lt; len(str_Alpabet) / <span class="number">2</span>:</span><br><span class="line">                    answer += idx</span><br><span class="line">                <span class="comment"># z에 더 가까울 경우</span></span><br><span class="line">                <span class="keyword">else</span>: </span><br><span class="line">                    idx = len(str_Alpabet) - idx</span><br><span class="line">                    answer += idx</span><br><span class="line"></span><br><span class="line">                <span class="comment"># 커서 이동</span></span><br><span class="line">                <span class="keyword">if</span> i == len(name) <span class="number">-1</span> <span class="keyword">and</span> name[i+<span class="number">1</span>] == <span class="string">"A"</span>:</span><br><span class="line">                    <span class="comment"># 1. 마지막 요소가 A일 경우 옮기지 않아도 완성</span></span><br><span class="line">                    <span class="keyword">break</span></span><br><span class="line">                <span class="keyword">elif</span> i == len(name) <span class="number">-1</span>:</span><br><span class="line">                    <span class="comment"># 마지막요소일 경우 + 1 하지 않는다.</span></span><br><span class="line">                    <span class="keyword">break</span></span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                    <span class="comment"># 오른쪽으로 커서 1</span></span><br><span class="line">                    answer += <span class="number">1</span></span><br><span class="line"></span><br><span class="line">            <span class="keyword">elif</span> l_index == <span class="number">1</span>:</span><br><span class="line">                idx = str_Alpabet.index((name[len(name)-i]))</span><br><span class="line">                <span class="keyword">if</span> idx &lt; len(str_Alpabet) / <span class="number">2</span>: </span><br><span class="line">                    answer += idx</span><br><span class="line">                <span class="keyword">else</span>: </span><br><span class="line">                    idx = len(str_Alpabet) - idx</span><br><span class="line">                    answer += idx</span><br><span class="line"></span><br><span class="line">                <span class="comment"># 왼쪽으로 커서 이동</span></span><br><span class="line">                <span class="keyword">if</span> i == len(name) <span class="number">-2</span> <span class="keyword">and</span> name[len(name)-i <span class="number">-1</span>] == <span class="string">"A"</span>:</span><br><span class="line">                    <span class="keyword">break</span></span><br><span class="line">                <span class="keyword">elif</span> i == len(name) - <span class="number">1</span>:</span><br><span class="line">                    <span class="comment"># 마지막 요소일 경우 + 1 안한다. </span></span><br><span class="line">                    <span class="keyword">break</span></span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                    <span class="comment"># 왼쪽 으로 커서 이동</span></span><br><span class="line">                    answer += <span class="number">1</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> answer</span><br></pre></td></tr></table></figure><p><code>테스트 케이스 10, 11 통과 X</code></p><p><code>name = &quot;AZAAAAAAAZZ&quot;</code> 일 경우 오른쪽으로 처리 후 왼쪽으로 돌아가 처리를 하는 것이 효율적이다.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">A▶(1) Z▼(2) ◀◀(4) Z▼(5) ◀(6) Z▼(7)</span><br><span class="line"></span><br><span class="line">A▶(1) Z▼(2) ▶▶▶▶▶▶▶(9) Z▼(10) ▶(10) Z▼(11)</span><br></pre></td></tr></table></figure><h2 id="2차-답안-1"><a href="#2차-답안-1" class="headerlink" title="2차 답안"></a>2차 답안</h2><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">solution</span><span class="params">(name)</span>:</span></span><br><span class="line">    answer = <span class="number">0</span></span><br><span class="line">    name=list(name)</span><br><span class="line">    index=<span class="number">0</span></span><br><span class="line">    <span class="keyword">while</span>(<span class="literal">True</span>):</span><br><span class="line">        right=<span class="number">1</span></span><br><span class="line">        left=<span class="number">1</span></span><br><span class="line">        <span class="keyword">if</span> name[index] != <span class="string">'A'</span>: </span><br><span class="line">            updown = min(ord(name[index])-ord(<span class="string">'A'</span>),(ord(<span class="string">'Z'</span>)-ord(name[index])+<span class="number">1</span>))</span><br><span class="line">            answer += updown</span><br><span class="line">        name[index] = <span class="string">'A'</span></span><br><span class="line">        <span class="keyword">if</span> name == [<span class="string">"A"</span>]*len(name): <span class="keyword">break</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>,len(name)):</span><br><span class="line">            <span class="keyword">if</span> name[index+i]==<span class="string">"A"</span>: right+=<span class="number">1</span></span><br><span class="line">            <span class="keyword">else</span>: <span class="keyword">break</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>,len(name)):</span><br><span class="line">            <span class="keyword">if</span> name[index-i]==<span class="string">"A"</span>: left+=<span class="number">1</span></span><br><span class="line">            <span class="keyword">else</span>: <span class="keyword">break</span></span><br><span class="line">        <span class="keyword">if</span> right&gt;left:</span><br><span class="line">            answer+=left</span><br><span class="line">            index-=left</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            answer+=right</span><br><span class="line">            index+=right</span><br><span class="line">    <span class="keyword">return</span> answer</span><br></pre></td></tr></table></figure><p><code>ord()</code><br>특정 한 문자를 아스키 코드 값으로 변환해 주는 함수</p><p>cf) <code>chr()</code><br>아스키 코드 값을 문자로 변환해 주는 함수</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">print(ord(<span class="string">'A'</span>))</span><br><span class="line"><span class="comment"># 65</span></span><br><span class="line">print(ord(<span class="string">'a'</span>))</span><br><span class="line"><span class="comment"># 97</span></span><br><span class="line">print(hex(ord(<span class="string">'b'</span>)))</span><br><span class="line"><span class="comment"># 0x62</span></span><br><span class="line"></span><br><span class="line">print(chr(<span class="number">65</span>))</span><br><span class="line"><span class="comment"># 'A'</span></span><br><span class="line">print(chr(<span class="number">97</span>))</span><br><span class="line"><span class="comment"># 'a'</span></span><br><span class="line">print(chr(<span class="number">0x62</span>))</span><br><span class="line"><span class="comment"># 'b'</span></span><br></pre></td></tr></table></figure><h1 id="구명보트"><a href="#구명보트" class="headerlink" title="구명보트"></a><a href>구명보트</a></h1><ol><li>한 번에 최대 2명씩 밖에 탈 수 없고</li><li>구명보트의 무게 제한은 항상 사람들의 몸무게 중 최댓값보다 크게 주어지므로 사람들을 구출할 수 없는 경우는 없습니다.</li></ol><p>-&gt; 한번에 최대 2명이 탄다 -&gt; 정렬 후 최소값과 최대값을 더해 limit 보다 작다면 2명타고 크다면 1명만 타도록 알고리즘 구현</p><h2 id="1차-답안-3"><a href="#1차-답안-3" class="headerlink" title="1차 답안"></a>1차 답안</h2><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">solution</span><span class="params">(people, limit)</span>:</span></span><br><span class="line">    people.sort()</span><br><span class="line">    cnt = <span class="number">0</span></span><br><span class="line">    i, j = <span class="number">0</span>, len(people) <span class="number">-1</span></span><br><span class="line">    <span class="keyword">while</span>(i &lt;= j):</span><br><span class="line">        cnt += <span class="number">1</span></span><br><span class="line">        <span class="keyword">if</span> people[j] + people[i] &lt;= limit:</span><br><span class="line">            i+=<span class="number">1</span></span><br><span class="line">        j -= <span class="number">1</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> cnt</span><br></pre></td></tr></table></figure><p><code>통과</code></p><h1 id="섬-연결하기"><a href="#섬-연결하기" class="headerlink" title="섬 연결하기"></a><a href="https://programmers.co.kr/learn/courses/30/lessons/42861" rel="external nofollow noopener noreferrer" target="_blank">섬 연결하기</a></h1><p><code>Kruskal 알고리즘</code></p><ul><li>탐욕적인 방법(greedy method) 을 이용하여 가중치를 간선에 할당한 그래프(네트워크)의 모든 정점을 최소 비용으로 연결하는 최적 해답을 구하는 것</li></ul><p><code>Kruskal 전재조건</code><br>1) 최소 비용 신장 트리(MST)가 최소 비용의 간선으로 구성되었는가<br>2) 사이클을 포함하지 않음 의 조건에 근거하여 각 단계에서 사이클을 이루지 않는 최소 비용 간선을 선택 한다. </p><p><img alt="img" data-src="/img/codingtest/kruskal.png" class="lozad"></p><p><a href="https://gmlwjd9405.github.io/2018/08/29/algorithm-kruskal-mst.html" rel="external nofollow noopener noreferrer" target="_blank">참고URL</a></p><h2 id="1차답안"><a href="#1차답안" class="headerlink" title="1차답안"></a>1차답안</h2><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">solution</span><span class="params">(n, costs)</span>:</span></span><br><span class="line">    answer = <span class="number">0</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 순서대로  (거리순)</span></span><br><span class="line">    costs.sort(key = <span class="keyword">lambda</span> x : x[<span class="number">2</span>])</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 연결된 섬 리스트</span></span><br><span class="line">    islands = []</span><br><span class="line">    cost_islands = []</span><br><span class="line">    <span class="keyword">while</span> n != len(islands):</span><br><span class="line">        <span class="keyword">for</span> cost <span class="keyword">in</span> costs:</span><br><span class="line">            print(cost)</span><br><span class="line">            <span class="comment"># 아예 두 요소가 islands에 없다면 두요소의 최솟값 더하고 섬연결  </span></span><br><span class="line">            <span class="keyword">if</span> cost[<span class="number">0</span>] <span class="keyword">not</span> <span class="keyword">in</span> islands <span class="keyword">and</span> cost[<span class="number">1</span>] <span class="keyword">not</span> <span class="keyword">in</span> islands:</span><br><span class="line">                islands.append(cost[<span class="number">0</span>])</span><br><span class="line">                islands.append(cost[<span class="number">1</span>])</span><br><span class="line">                answer += cost[<span class="number">2</span>]</span><br><span class="line">                cost_islands.append(cost)</span><br><span class="line">            <span class="comment"># cost[0] 가 없다면 cost[0 넣고]</span></span><br><span class="line">            <span class="keyword">elif</span> cost[<span class="number">0</span>] <span class="keyword">not</span> <span class="keyword">in</span> islands:</span><br><span class="line">                islands.append(cost[<span class="number">0</span>])</span><br><span class="line">                answer += cost[<span class="number">2</span>]</span><br><span class="line">                cost_islands.append(cost)</span><br><span class="line">            <span class="keyword">elif</span> cost[<span class="number">1</span>] <span class="keyword">not</span> <span class="keyword">in</span> islands:</span><br><span class="line">                islands.append(cost[<span class="number">1</span>])</span><br><span class="line">                answer += cost[<span class="number">2</span>]</span><br><span class="line">                cost_islands.append(cost)</span><br><span class="line">                </span><br><span class="line">    <span class="keyword">return</span> answer</span><br></pre></td></tr></table></figure><p>테스트케이스 2,3,4,5,6,7 통과 불가 25점…</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">n = <span class="number">5</span></span><br><span class="line">costs = [[<span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>], [<span class="number">2</span>, <span class="number">3</span>, <span class="number">1</span>], [<span class="number">3</span>, <span class="number">4</span>, <span class="number">2</span>], [<span class="number">1</span>, <span class="number">2</span>, <span class="number">2</span>], [<span class="number">0</span>, <span class="number">4</span> <span class="number">100</span>]]</span><br></pre></td></tr></table></figure><p>위 와 같은 사례에 <code>[024]</code> <code>[13]</code> 두 영역이 연결된 상태가 아니지만 다 연결되었다고 표시가 되어 오류가 발생한다.</p><h2 id="2차-답안-2"><a href="#2차-답안-2" class="headerlink" title="2차 답안"></a>2차 답안</h2><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line">parent = &#123;&#125;</span><br><span class="line">rank = &#123;&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">make_set</span><span class="params">(v)</span>:</span></span><br><span class="line">    parent[v] = v</span><br><span class="line">    rank[v] = <span class="number">0</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">find_root</span><span class="params">(v)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> parent[v] != v:</span><br><span class="line">        parent[v] = find_root(parent[v])</span><br><span class="line">    <span class="keyword">return</span> parent[v]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">union</span><span class="params">(r1, r2)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> r1 != r2:</span><br><span class="line">        <span class="keyword">if</span> rank[r1] &gt; rank[r2]:</span><br><span class="line">            parent[r2] = r1</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            parent[r1] = r2</span><br><span class="line">            <span class="keyword">if</span> rank[r1] == rank[r2]:</span><br><span class="line">                rank[r2] += <span class="number">1</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">solution</span><span class="params">(n, costs)</span>:</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(n):</span><br><span class="line">        make_set(i)</span><br><span class="line">    s = <span class="number">0</span></span><br><span class="line">    costs = sorted(costs, key=<span class="keyword">lambda</span> x: x[<span class="number">2</span>])</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> costs:</span><br><span class="line">        v, u, w = j</span><br><span class="line">        r1 = find_root(v)</span><br><span class="line">        r2 = find_root(u)</span><br><span class="line">        <span class="keyword">if</span> r1 != r2:</span><br><span class="line">            union(r1, r2)</span><br><span class="line">            s += w</span><br><span class="line">    <span class="keyword">return</span> s</span><br></pre></td></tr></table></figure><p>2차 답안은 Union의 개념을 코드로 적용하기 힘들어<br>Kruskal 알고리즘 코드를 참고해서 작성했다..</p><h2 id="다른사람-풀이"><a href="#다른사람-풀이" class="headerlink" title="다른사람 풀이"></a>다른사람 풀이</h2><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">ancestor</span><span class="params">(node, parents)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> parents[node] == node:</span><br><span class="line">        <span class="keyword">return</span> node</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> ancestor(parents[node], parents)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">solution</span><span class="params">(n, costs)</span>:</span></span><br><span class="line">    answer = <span class="number">0</span></span><br><span class="line">    edges = sorted([(x[<span class="number">2</span>], x[<span class="number">0</span>], x[<span class="number">1</span>]) <span class="keyword">for</span> x <span class="keyword">in</span> costs])</span><br><span class="line">    parents = [i <span class="keyword">for</span> i <span class="keyword">in</span> range(n)]</span><br><span class="line">    bridges = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> w, f, t <span class="keyword">in</span> edges:</span><br><span class="line">        <span class="keyword">if</span> ancestor(f, parents) != ancestor(t, parents):</span><br><span class="line">            answer += w</span><br><span class="line">            parents[ancestor(f, parents)] = t</span><br><span class="line">            bridges += <span class="number">1</span></span><br><span class="line">        <span class="keyword">if</span> bridges == n - <span class="number">1</span>:</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">    <span class="keyword">return</span> answer</span><br></pre></td></tr></table></figure><p>Kruskal 알고리즘에서 Rank 개념을 삭제해 더 간소한 코드를 작성했다.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;탐욕법-Greedy&quot;&gt;&lt;a href=&quot;#탐욕법-Greedy&quot; class=&quot;headerlink&quot; title=&quot;탐욕법 (Greedy)&quot;&gt;&lt;/a&gt;탐욕법 (Greedy)&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;탐욕적인 방법이란?&lt;br&gt;결정 할 때마다 그 순간에
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>Django TDD (UnitTest)</title>
    <link href="https://khs9628.github.io/2020/10/21/201021-TDD/"/>
    <id>https://khs9628.github.io/2020/10/21/201021-TDD/</id>
    <published>2020-10-21T07:21:33.000Z</published>
    <updated>2020-10-22T09:17:18.659Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Unit-Test-란"><a href="#Unit-Test-란" class="headerlink" title="Unit Test 란?"></a>Unit Test 란?</h2><ul><li><p>Unit test란 내가 작성한 코드의 <code>가장 작은 단위</code>인 함수를 테스트 하는 메소드이다. </p></li><li><p>작성한 로직을 테스트하는 유닛테스트 코드를 작성하여 테스트 하게 된다.</p></li><li><p>TestCase : Unit Test 프레임 워크의 테스트 조직 기본 단위</p></li><li><p>Fixture : 테스트 진행 시 필요한 데이터 혹은 설정을 의미</p></li><li><p>assertion : Unit Test시 검증이 제대로 되었는지 확인 하는 부분</p></li></ul><h2 id="테스트-방법"><a href="#테스트-방법" class="headerlink" title="테스트 방법"></a>테스트 방법</h2><p>시스템을 테스트 할때 크게 3가지 방법으로 나눌 수 있습니다.</p><ul><li><p>UI Testing / End-To-End Testing</p></li><li><p>Integration Testing</p></li><li><p>Unit Testing</p></li><li><p>이중 UI Testing이 가장 어렵고 까다롭습니다.</p></li><li><p>Manual Testing은 실행하기 쉽다는 장점이 있지만 비용이 많이 들고 부정확 하며 실행 시간이 오래 걸립니다.</p></li><li><p>자동화 할 수 있지만 UI Testing은 자동화 하기가 가장 까다랍고 또 실행하기도 까다롭습니다.</p></li><li><p>Integration Testing이 그 다음으로 공수가 많이 듭니다.</p></li><li><p>Unit Testing이 가장 쉬우며 가장 효과가 좋습니다.</p></li></ul><p>cf) UI Testing은 10%, Integrating Testing은 20%, 그리고 Unit Testing을 70% 전체 테스트 coverage를 구현 하는것이 권장</p><h2 id="실제-적용"><a href="#실제-적용" class="headerlink" title="실제 적용"></a>실제 적용</h2><p>해당 Unit Test는 MongoDB CRUD 프로젝트에 적용되었습니다.</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment"># tests.py</span></span><br><span class="line"><span class="comment"># Post 글을 쓰고 읽고 수정하고 삭제하는 test 코드 </span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> django.test <span class="keyword">import</span> TestCase</span><br><span class="line"><span class="keyword">import</span> unittest</span><br><span class="line"></span><br><span class="line"><span class="comment"># http 통신을 위해 import</span></span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> json</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> time <span class="keyword">import</span> sleep</span><br><span class="line"><span class="comment"># Create your tests here.</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">UnitTestCase</span><span class="params">(unittest.TestCase)</span>:</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># UnitTest 하기전 사전 준비 작업을 하는 Method</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment"># def setUp(self):</span></span><br><span class="line">    <span class="comment">#     print("SetUP Unit Test")</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># # clean up 처리를 위해 작업하는 Method</span></span><br><span class="line">    <span class="comment"># def tearDown(self):</span></span><br><span class="line">    <span class="comment">#     print("Cleaning Unit Test")</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">test_01_addPost</span><span class="params">(self)</span>:</span></span><br><span class="line">        print(<span class="string">"============test_addPost================"</span>)</span><br><span class="line">        url = <span class="string">"http://127.0.0.1:8000/add_post/"</span></span><br><span class="line"></span><br><span class="line">        data = &#123;</span><br><span class="line">            <span class="string">"post_title"</span> : <span class="string">"First Post"</span>,</span><br><span class="line">            <span class="string">"post_description"</span> :  <span class="string">"Test TDD"</span>,</span><br><span class="line">            <span class="string">"comment"</span> : <span class="string">"commnet2, commnet3"</span>,</span><br><span class="line">            <span class="string">"tags"</span> : <span class="string">"1,2"</span>,</span><br><span class="line">            <span class="string">"user_details"</span> : &#123; <span class="string">"first_name"</span> : <span class="string">"KIM"</span>, <span class="string">"last_name"</span> : <span class="string">"hyunsoo"</span>&#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        response = requests.post(url, json= data).json()</span><br><span class="line">        <span class="keyword">global</span> id </span><br><span class="line">        id = response[<span class="string">'id'</span>]</span><br><span class="line">        </span><br><span class="line">        print(<span class="string">"response: "</span>)</span><br><span class="line">        print(response)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">test_02_readPost</span><span class="params">(self)</span>:</span></span><br><span class="line">        </span><br><span class="line">        print(<span class="string">"============test_readPost================"</span>)</span><br><span class="line"></span><br><span class="line">        url = <span class="string">"http://127.0.0.1:8000/read_post/"</span> + str(id)</span><br><span class="line">    </span><br><span class="line">        response = requests.get(url).json()</span><br><span class="line"></span><br><span class="line">        print(<span class="string">"response: "</span>)</span><br><span class="line">        print(response)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">test_03_updatePost</span><span class="params">(self)</span>:</span></span><br><span class="line"></span><br><span class="line">        print(<span class="string">"============test_updatePost================"</span>)</span><br><span class="line"></span><br><span class="line">        url = <span class="string">"http://127.0.0.1:8000/update_post/"</span> + str(id)</span><br><span class="line">        </span><br><span class="line">        data = &#123;</span><br><span class="line">            <span class="string">"post_title"</span> : <span class="string">"First Post_Update"</span>,</span><br><span class="line">            <span class="string">"post_description"</span> :  <span class="string">"Test TDD_Update"</span>,</span><br><span class="line">            <span class="string">"comment"</span> : <span class="string">"commnet2, commnet3"</span> ,</span><br><span class="line">            <span class="string">"tags"</span> : <span class="string">"1,2"</span> ,</span><br><span class="line">            <span class="string">"user_details"</span> : &#123; <span class="string">"first_name"</span> : <span class="string">"LEE"</span>, <span class="string">"last_name"</span> : <span class="string">"hyunsoo"</span>&#125;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        response = requests.post(url, json=data).json()</span><br><span class="line"></span><br><span class="line">        print(<span class="string">"response: "</span>)</span><br><span class="line">        print(response)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">test_04_deletePost</span><span class="params">(self)</span>:</span></span><br><span class="line"></span><br><span class="line">        print(<span class="string">"============test_deletePost================"</span>)</span><br><span class="line">        url = <span class="string">"http://127.0.0.1:8000/delete_post/"</span> + str(id)</span><br><span class="line"></span><br><span class="line">        response = requests.get(url).json()</span><br><span class="line"></span><br><span class="line">        print(<span class="string">"response: "</span>)</span><br><span class="line">        print(response)</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;Unit-Test-란&quot;&gt;&lt;a href=&quot;#Unit-Test-란&quot; class=&quot;headerlink&quot; title=&quot;Unit Test 란?&quot;&gt;&lt;/a&gt;Unit Test 란?&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Unit test란 내가 작성한 코드의 &lt;
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>CodeTest 연습 (완전탐색)</title>
    <link href="https://khs9628.github.io/2020/10/20/201020-codeTest/"/>
    <id>https://khs9628.github.io/2020/10/20/201020-codeTest/</id>
    <published>2020-10-20T04:54:30.000Z</published>
    <updated>2020-11-10T06:00:41.771Z</updated>
    
    <content type="html"><![CDATA[<h1 id="완전탐색"><a href="#완전탐색" class="headerlink" title="완전탐색"></a>완전탐색</h1><h1 id="모의고사"><a href="#모의고사" class="headerlink" title="모의고사"></a><a href="https://programmers.co.kr/learn/courses/30/lessons/42840" rel="external nofollow noopener noreferrer" target="_blank">모의고사</a></h1><h2 id="1차-답안"><a href="#1차-답안" class="headerlink" title="1차 답안"></a>1차 답안</h2><ol><li><p><code>first</code>, <code>second</code>, <code>third</code><br>먼저 수포자들 1, 2, 3이 찍는 패턴을 분석해서 3개의 리스트를 만들 었습니다.</p></li><li><p><code>f_idx</code>, <code>s_idx</code>, <code>t_idx</code><br>각 수포자들의 패턴이 담겨있는 리스트의 길이가 다르기 때문에 해당 리스트 크기를 answer리스트의 인덱스로 나눈 나머지를 가지고 해당 답을 비교하려고 계획했습니다.</p></li><li><p><code>answer_cnt = [0,0,0]</code><br>수포자들의 답을 맞춘 개수를 저장하는 리스트를 하나더 만들어 가장 많이 맞춘 사람의 값을 비교하려고 계획했습니다.</p></li><li><p>모든 반복문이 끝나게 되면 수포자마다 정답을 맞춘 개수가 <code>answer_cnt</code>에 저장되게되고 max 값을 구한 후 해당 개수와 같은 리스트의 인덱스를 리턴하면 답을 구하게 됩니다.</p></li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">solution</span><span class="params">(answers)</span>:</span></span><br><span class="line">    first = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>]</span><br><span class="line">    second = [<span class="number">2</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">2</span>, <span class="number">4</span>, <span class="number">2</span>, <span class="number">5</span>]</span><br><span class="line">    third = [<span class="number">3</span>, <span class="number">3</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">4</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">5</span>]</span><br><span class="line">    </span><br><span class="line">    answer_cnt = [<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>]</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span> i,k <span class="keyword">in</span> enumerate(answers):</span><br><span class="line">        </span><br><span class="line">        f_idx = i % <span class="number">5</span></span><br><span class="line">        s_idx = i % <span class="number">8</span></span><br><span class="line">        t_idx = i % <span class="number">10</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> first[f_idx] == k:</span><br><span class="line">            answer_cnt[<span class="number">0</span>] += <span class="number">1</span></span><br><span class="line">        <span class="keyword">if</span> second[s_idx] == k:</span><br><span class="line">            answer_cnt[<span class="number">1</span>] += <span class="number">1</span></span><br><span class="line">        <span class="keyword">if</span> third[t_idx] == k:</span><br><span class="line">            answer_cnt[<span class="number">2</span>] += <span class="number">1</span></span><br><span class="line">            </span><br><span class="line">    m = max(answer_cnt)</span><br><span class="line"></span><br><span class="line">    answer  = [i <span class="keyword">for</span> i, j <span class="keyword">in</span> enumerate(answer_cnt,<span class="number">1</span>) <span class="keyword">if</span> j == m]</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> answer</span><br></pre></td></tr></table></figure><h2 id="다른사람-풀이"><a href="#다른사람-풀이" class="headerlink" title="다른사람 풀이"></a>다른사람 풀이</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> itertools <span class="keyword">import</span> cycle</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">solution</span><span class="params">(answers)</span>:</span></span><br><span class="line">    giveups = [</span><br><span class="line">        cycle([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>]),</span><br><span class="line">        cycle([<span class="number">2</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">2</span>,<span class="number">4</span>,<span class="number">2</span>,<span class="number">5</span>]),</span><br><span class="line">        cycle([<span class="number">3</span>,<span class="number">3</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">2</span>,<span class="number">4</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">5</span>]),</span><br><span class="line">    ]</span><br><span class="line">    scores = [<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>]</span><br><span class="line">    <span class="keyword">for</span> num <span class="keyword">in</span> answers:</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">3</span>):</span><br><span class="line">            <span class="keyword">if</span> next(giveups[i]) == num:</span><br><span class="line">                scores[i] += <span class="number">1</span></span><br><span class="line">    highest = max(scores)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> [i + <span class="number">1</span> <span class="keyword">for</span> i, v <span class="keyword">in</span> enumerate(scores) <span class="keyword">if</span> v == highest]</span><br></pre></td></tr></table></figure><p>동작 방식은 동일하나 <code>cycle</code> 함수를 통해서 해당 리스트가 반복되도록 구현하는 점이 인상 깊었습니다. </p><h1 id="소수-찾기"><a href="#소수-찾기" class="headerlink" title="소수 찾기"></a><a href="https://programmers.co.kr/learn/courses/30/lessons/42839" rel="external nofollow noopener noreferrer" target="_blank">소수 찾기</a></h1><h2 id="1차-답안-1"><a href="#1차-답안-1" class="headerlink" title="1차 답안"></a>1차 답안</h2><ol><li><p>문자열로된 숫자조합을 하나씩 나누어 순열로 모든 배열의 개수를 만들어야한다.</p></li><li><p>중복된 요소는 제거해야하므로 set을 사용해서 제거한다.</p></li></ol><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> itertools <span class="keyword">import</span> permutations</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">solution</span><span class="params">(numbers)</span>:</span></span><br><span class="line">    </span><br><span class="line">    list_num = list(numbers)</span><br><span class="line"></span><br><span class="line">    list_numbers = list(map(<span class="string">''</span>.join, permutations(list_num)))</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 모든 원소 합치기</span></span><br><span class="line">    list_numbers = list_num + list_numbers</span><br><span class="line"></span><br><span class="line">    <span class="comment"># int 배열로 변환 및 set으로 중복 제거</span></span><br><span class="line">    list_numbers = list(set([int(x) <span class="keyword">for</span> x <span class="keyword">in</span> list_numbers]))</span><br><span class="line"></span><br><span class="line">    answer = len(list_numbers)</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> list_numbers:</span><br><span class="line">        j = <span class="number">0</span></span><br><span class="line">    </span><br><span class="line">        <span class="keyword">if</span> i == <span class="number">0</span> <span class="keyword">or</span> i == <span class="number">1</span>:</span><br><span class="line">            answer -= <span class="number">1</span></span><br><span class="line">    </span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">while</span>(j&lt;i):</span><br><span class="line">                j = j+<span class="number">1</span></span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span> j == <span class="number">1</span>:</span><br><span class="line">                    <span class="keyword">pass</span></span><br><span class="line">                </span><br><span class="line">                <span class="keyword">elif</span> i == j:</span><br><span class="line">                    <span class="keyword">pass</span> </span><br><span class="line">                </span><br><span class="line">                <span class="keyword">elif</span> i%j == <span class="number">0</span>:</span><br><span class="line">                    answer -= <span class="number">1</span></span><br><span class="line">                    <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> answer</span><br></pre></td></tr></table></figure><p>테스트케이스 7, 9, 10 ,11, 12 실패<br>-&gt; <code>permutations</code>은 모든 요소가 포함된 것만 리턴하기 때문에 포함안된 부분에 대해서는 트래킹할 수 없음 </p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">## ex) </span></span><br><span class="line"></span><br><span class="line">list a = [<span class="number">0</span>,<span class="number">1</span>,<span class="number">2</span>]</span><br><span class="line"></span><br><span class="line">list_numbers = list(map(<span class="string">''</span>.join, permutations(list_num)))</span><br><span class="line"></span><br><span class="line">print(list_numbers)</span><br><span class="line"><span class="comment"># ['123', '132', '213', '231', '312', '321']</span></span><br><span class="line"><span class="comment">## -&gt; 12, 13과 같이 2개만 사용하는 요소 포함 x</span></span><br></pre></td></tr></table></figure><h2 id="2차-답안"><a href="#2차-답안" class="headerlink" title="2차 답안"></a>2차 답안</h2><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> itertools <span class="keyword">import</span> permutations</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">solution</span><span class="params">(numbers)</span>:</span></span><br><span class="line"></span><br><span class="line">    list_numbers = []</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>, len(numbers)+<span class="number">1</span>):</span><br><span class="line">        list_numbers += list(map(<span class="string">''</span>.join, permutations(numbers,i)))</span><br><span class="line"></span><br><span class="line">    list_numbers = list(set([int(x) <span class="keyword">for</span> x <span class="keyword">in</span> list_numbers]))</span><br><span class="line"></span><br><span class="line">    answer = len(list_numbers)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> list_numbers:</span><br><span class="line">        j = <span class="number">0</span></span><br><span class="line">        <span class="keyword">if</span> i == <span class="number">0</span> <span class="keyword">or</span> i == <span class="number">1</span>:</span><br><span class="line">            answer -= <span class="number">1</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">while</span>(j&lt;i):</span><br><span class="line">                j = j+<span class="number">1</span></span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span> j == <span class="number">1</span>:</span><br><span class="line">                    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line">                <span class="keyword">elif</span> i == j:</span><br><span class="line">                    <span class="keyword">pass</span> </span><br><span class="line"></span><br><span class="line">                <span class="keyword">elif</span> i%j == <span class="number">0</span>:</span><br><span class="line">                    answer -= <span class="number">1</span></span><br><span class="line">                    <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> answer</span><br></pre></td></tr></table></figure><p><code>set(집합)</code><br>파이썬 2.3부터 지원된 자료형으로 중복이 없고, 집합형태의 자료형을 편리하게 관리 할 수 있도록 만들어진 자료형 입니다.</p><p><code>순열 Permutation</code><br>순열이란 순서를 정해서 나열한 것을 말합니다.<br>nPr로 표시하며 n * (n-1) * (n-2) * … * (n-r+1)로 계산됩니다.</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> itertools <span class="keyword">import</span> permutations</span><br><span class="line">permutations(list, idx)</span><br></pre></td></tr></table></figure><p><code>조합 Combination</code><br>조합이란 서로 다른 n개에서 순서를 생각하지 않고 r개를 뽑는 것을 말합니다.<br>nCr로 표시하며 n! / r(n-r)!로 계산됩니다.</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> itertools <span class="keyword">import</span> combinations</span><br><span class="line">combinations(list, idx)</span><br></pre></td></tr></table></figure><h1 id="카펫"><a href="#카펫" class="headerlink" title="카펫"></a><a href="https://programmers.co.kr/learn/courses/30/lessons/42842" rel="external nofollow noopener noreferrer" target="_blank">카펫</a></h1><h2 id="1차풀이"><a href="#1차풀이" class="headerlink" title="1차풀이"></a>1차풀이</h2><ol><li><p>total 블록의 개수는 brown 블록과  yellow 블록의 총합이다. (total)</p></li><li><p>total 블록의 약수들을 구해 가로와 세로가 될 수 있는 집합을 저장한다 (div)</p></li><li><p>brown은 사각형의 둘레이므로 가로 x 2 + (세로 - 2) x 2 를 하면 브라운 블록의 개수와 동일하다.</p></li><li><p>약수의 집합에서 큰 수가 가로의 길이이기 때문에 둘레를 고려해 브라운 블록과 비교한다.</p></li></ol><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">solution</span><span class="params">(brown, yellow)</span>:</span></span><br><span class="line">    total = brown + yellow</span><br><span class="line">    div = []</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>, total+<span class="number">1</span>):</span><br><span class="line">        <span class="keyword">if</span> total % i == <span class="number">0</span> <span class="keyword">and</span> i &lt;= total//i:</span><br><span class="line">            div.append([i, total//i])</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> j, k <span class="keyword">in</span> div:</span><br><span class="line">        <span class="keyword">if</span> brown == k * <span class="number">2</span>  + (j - <span class="number">2</span>) * <span class="number">2</span>:</span><br><span class="line">            <span class="keyword">return</span> [k,j]</span><br></pre></td></tr></table></figure><p>수학적 생각이 중요한 문제였던 것 같다.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;완전탐색&quot;&gt;&lt;a href=&quot;#완전탐색&quot; class=&quot;headerlink&quot; title=&quot;완전탐색&quot;&gt;&lt;/a&gt;완전탐색&lt;/h1&gt;&lt;h1 id=&quot;모의고사&quot;&gt;&lt;a href=&quot;#모의고사&quot; class=&quot;headerlink&quot; title=&quot;모의고사&quot;&gt;&lt;/a
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>MongoDB</title>
    <link href="https://khs9628.github.io/2020/10/19/201019_MongoDB/"/>
    <id>https://khs9628.github.io/2020/10/19/201019_MongoDB/</id>
    <published>2020-10-19T07:40:02.000Z</published>
    <updated>2020-10-22T09:35:22.178Z</updated>
    
    <content type="html"><![CDATA[<h1 id="NoSQL"><a href="#NoSQL" class="headerlink" title="NoSQL??"></a>NoSQL??</h1><p>Not Only SQL’이라고 해석하는 게 더 적절하다.<br>그리고 NoSQL은 “관계형 데이터베이스이지 않은” 모든 데이터베이스의 데이터 모델과 제품을 아우른다.</p><h2 id="Nosql-특징"><a href="#Nosql-특징" class="headerlink" title="Nosql 특징?"></a>Nosql 특징?</h2><ul><li><p><code>유연성</code><br>NoSQL 데이터베이스는 일반적으로 유연한 스키마를 제공하여 보다 빠르고 반복적인 개발을 가능하게 해줍니다. 이같은 유연한 데이터 모델은 NoSQL 데이터베이스를 반정형 및 비정형 데이터에 이상적으로 만들어 줍니다.</p></li><li><p><code>확장성</code><br>NoSQL 데이터베이스는 일반적으로 고가의 강력한 서버를 추가하는 대신 분산형 하드웨어 클러스터를 이용해 확장하도록 설계되었습니다. 일부 클라우드 제공자들은 완전관리형 서비스로서 이런 운영 작업을 보이지 않게 처리합니다.</p></li><li><p><code>고성능</code><br>NoSQL 데이터베이스는 특정 데이터 모델 및 액세스 패턴에 대해 최적화되어 관계형 데이터베이스를 통해 유사한 기능을 충족하려 할 때보다 뛰어난 성능을 얻게 해줍니다.</p></li><li><p><code>고기능성</code><br>NoSQL 데이터베이스는 각 데이터 모델에 맞춰 특별히 구축된 뛰어난 기능의 API와 데이터 유형을 제공합니다.</p></li></ul><h1 id="MongoDB"><a href="#MongoDB" class="headerlink" title="MongoDB"></a>MongoDB</h1><h2 id="MongoDB-설정"><a href="#MongoDB-설정" class="headerlink" title="MongoDB 설정"></a>MongoDB 설정</h2><ol><li><a href="https://www.mongodb.com/" rel="external nofollow noopener noreferrer" target="_blank">URL</a>을 클릭 후 해당 사이트 이동</li><li>Start free 클릭 후 or 부분에 input box 입력</li><li>무료버전의 Cluster 생성 후 Get Start 버튼의 순서대로 생성 시나리오 진행 </li></ol><h2 id="Django-프로젝트-및-APP-생성"><a href="#Django-프로젝트-및-APP-생성" class="headerlink" title="Django 프로젝트 및 APP 생성"></a>Django 프로젝트 및 APP 생성</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># MongoDB라는 프로젝트 생성</span></span><br><span class="line">$ django-admin startproject MongoDB</span><br><span class="line"></span><br><span class="line"><span class="comment"># 해당 폴더로 진입</span></span><br><span class="line">$ <span class="built_in">cd</span> MongoDB</span><br><span class="line"></span><br><span class="line"><span class="comment"># nosql이라는 app 생성</span></span><br><span class="line">$ python manage.py startapp nosql</span><br></pre></td></tr></table></figure><h2 id="DRF-설치-및-MongoDB-설치"><a href="#DRF-설치-및-MongoDB-설치" class="headerlink" title="DRF 설치 및 MongoDB 설치"></a>DRF 설치 및 MongoDB 설치</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ pip install djangorestframework</span><br><span class="line">$ pip install djongo</span><br><span class="line">$ pip install django-cors-headers</span><br><span class="line">$ pip install dnspython</span><br></pre></td></tr></table></figure><h2 id="settings-py-INSTALLED-APPS에-APP-등록-및-설정"><a href="#settings-py-INSTALLED-APPS에-APP-등록-및-설정" class="headerlink" title="settings.py INSTALLED_APPS에 APP 등록 및 설정"></a>settings.py INSTALLED_APPS에 APP 등록 및 설정</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">INSTALLED_APPS = [</span><br><span class="line">    <span class="string">'django.contrib.admin'</span>,</span><br><span class="line">    <span class="string">'django.contrib.auth'</span>,</span><br><span class="line">    <span class="string">'django.contrib.contenttypes'</span>,</span><br><span class="line">    <span class="string">'django.contrib.sessions'</span>,</span><br><span class="line">    <span class="string">'django.contrib.messages'</span>,</span><br><span class="line">    <span class="string">'django.contrib.staticfiles'</span>,</span><br><span class="line">    <span class="string">'nosql'</span>, <span class="comment"># app등록</span></span><br><span class="line">    <span class="string">'rest_framework'</span>, <span class="comment"># DRF</span></span><br><span class="line">    <span class="string">'corsheaders'</span>, <span class="comment"># CORS</span></span><br><span class="line">]</span><br><span class="line"></span><br><span class="line"><span class="comment"># CORS 설정</span></span><br><span class="line">CORS_ORIGIN_ALLOW_ALL = <span class="literal">False</span></span><br><span class="line">CORS_ORIGIN_WHITELIST = (</span><br><span class="line">    <span class="string">'http://localhost:8000'</span>,</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment"># DB 설정</span></span><br><span class="line">DATABASES = &#123;</span><br><span class="line"><span class="string">"default"</span>: &#123;</span><br><span class="line">    <span class="string">"ENGINE"</span>: <span class="string">"djongo"</span>,</span><br><span class="line">    <span class="string">"CLIENT"</span>: &#123;</span><br><span class="line">        <span class="string">"host"</span>: <span class="string">"mongodb+srv://&lt;db id&gt;:&lt;db pw&gt;@hyunsoo.dagbh.mongodb.net/&lt;db name&gt;?retryWrites=true&amp;w=majority"</span>,</span><br><span class="line">        <span class="string">"username"</span>: <span class="string">"&lt;db id&gt;"</span>,</span><br><span class="line">        <span class="string">"password"</span>: <span class="string">"&lt;db pw&gt;"</span>,</span><br><span class="line">        <span class="string">"name"</span>: <span class="string">"&lt;db name&gt;"</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">&#125;&#125;</span><br></pre></td></tr></table></figure><h2 id="models-py-설정"><a href="#models-py-설정" class="headerlink" title="models.py 설정"></a>models.py 설정</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> djongo <span class="keyword">import</span> models</span><br><span class="line"></span><br><span class="line"><span class="comment"># Create your models here.</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Posts</span><span class="params">(models.Model)</span>:</span></span><br><span class="line">    id = models.ObjectIdField()</span><br><span class="line">    post_title = models.CharField(max_length=<span class="number">255</span>)</span><br><span class="line">    post_description = models.TextField()</span><br><span class="line">    comment = models.JSONField()</span><br><span class="line">    tags = models.JSONField()</span><br><span class="line">    user_details = models.JSONField()</span><br><span class="line">    objects= models.DjongoManager()</span><br></pre></td></tr></table></figure><h2 id="urls-py"><a href="#urls-py" class="headerlink" title="urls.py"></a>urls.py</h2><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.urls <span class="keyword">import</span> path</span><br><span class="line"><span class="keyword">from</span> nosql <span class="keyword">import</span> views </span><br><span class="line"></span><br><span class="line">urlpatterns = [ </span><br><span class="line">    path(<span class="string">'add_post/'</span>, views.add_post),</span><br><span class="line">    path(<span class="string">'update_post/&lt;int:id&gt;'</span>, views.update_post),</span><br><span class="line">    path(<span class="string">'delete_post/&lt;int:id&gt;'</span>, views.delete_post),</span><br><span class="line">    path(<span class="string">'read_post/&lt;int:id&gt;'</span>, views.read_post),</span><br><span class="line">    path(<span class="string">'read_posts/'</span>, views.read_posts),</span><br><span class="line">]</span><br></pre></td></tr></table></figure><h2 id="views-py-설정"><a href="#views-py-설정" class="headerlink" title="views.py 설정"></a>views.py 설정</h2><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.shortcuts <span class="keyword">import</span> render</span><br><span class="line"><span class="keyword">from</span> .models <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> django.views.decorators.csrf <span class="keyword">import</span> csrf_exempt</span><br><span class="line"><span class="keyword">from</span> bson <span class="keyword">import</span> ObjectId</span><br><span class="line"><span class="keyword">from</span> django.http <span class="keyword">import</span> HttpResponse</span><br><span class="line"></span><br><span class="line"><span class="meta">@csrf_exempt</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">add_post</span><span class="params">(requests)</span>:</span></span><br><span class="line">    comment = requests.POST.get(<span class="string">"comment"</span>).split(<span class="string">","</span>)</span><br><span class="line">    tags = requests.POST.get(<span class="string">"tags"</span>).split(<span class="string">","</span>)</span><br><span class="line">    user_details = &#123;<span class="string">"first_name"</span> : requests.POST.get(<span class="string">"first_name"</span>), <span class="string">"last_name"</span> : requests.POST.get(<span class="string">"last_name"</span>)&#125;</span><br><span class="line">    post = Posts(</span><br><span class="line">        post_title=requests.POST.get(<span class="string">"post_title"</span>),</span><br><span class="line">        post_description=requests.POST.get(<span class="string">"post_description"</span>),</span><br><span class="line">        comment =comment,</span><br><span class="line">        tags = tags,</span><br><span class="line">        user_details = user_details</span><br><span class="line">    )</span><br><span class="line">    post.save()</span><br><span class="line">    <span class="keyword">return</span> HttpResponse(<span class="string">"Inserted_ID"</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@csrf_exempt</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">update_post</span><span class="params">(requests,id)</span>:</span></span><br><span class="line">    post = Posts.objects.get(id=id)</span><br><span class="line">    post.user_details[<span class="string">"first_name"</span>] = requests.POST.get(<span class="string">"first_name"</span>)</span><br><span class="line">    post.save()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> HttpResponse(<span class="string">"Updated_UserDetail"</span>)</span><br><span class="line"></span><br><span class="line"><span class="meta">@csrf_exempt</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">delete_post</span><span class="params">(requests,id)</span>:</span></span><br><span class="line">    post = Posts.objects.get(id=id)</span><br><span class="line">    post.delete()</span><br><span class="line">    <span class="keyword">return</span> HttpResponse(<span class="string">"Deleted_Post"</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@csrf_exempt</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">read_post</span><span class="params">(requests,id)</span>:</span></span><br><span class="line">    post = Posts.objects.get(id=id)</span><br><span class="line">    stringval= <span class="string">"First Name: "</span> + post.user_details[<span class="string">'first_name'</span>] + <span class="string">"Last name: "</span> + post.user_details[<span class="string">'last_name'</span>] + <span class="string">" Post Title : "</span> + post.post_title</span><br><span class="line">    <span class="keyword">return</span> HttpResponse(stringval)</span><br><span class="line"></span><br><span class="line"><span class="meta">@csrf_exempt</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">read_posts</span><span class="params">(requests)</span>:</span></span><br><span class="line">    posts = Posts.objects.all()</span><br><span class="line">    stringval = <span class="string">''</span></span><br><span class="line">    <span class="keyword">for</span> post <span class="keyword">in</span> posts:</span><br><span class="line">        stringval += <span class="string">"First Name: "</span> + post.user_details[<span class="string">'first_name'</span>] + <span class="string">" Last name: "</span> + post.user_details[<span class="string">'last_name'</span>] + <span class="string">" Post Title : "</span> + post.post_title + <span class="string">"&lt;br&gt;"</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> HttpResponse(stringval)</span><br></pre></td></tr></table></figure><h2 id="Views-py-DRF-수정"><a href="#Views-py-DRF-수정" class="headerlink" title="Views.py(DRF 수정)"></a>Views.py(DRF 수정)</h2><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> .models <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> .serializers <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> django.shortcuts <span class="keyword">import</span> render</span><br><span class="line"><span class="keyword">from</span> rest_framework.parsers <span class="keyword">import</span> JSONParser</span><br><span class="line"><span class="keyword">from</span> rest_framework.decorators <span class="keyword">import</span> api_view</span><br><span class="line"><span class="keyword">from</span> django.views.decorators.csrf <span class="keyword">import</span> csrf_exempt</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> bson <span class="keyword">import</span> ObjectId</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> django.http <span class="keyword">import</span> HttpResponse, JsonResponse</span><br><span class="line"></span><br><span class="line"><span class="meta">@csrf_exempt</span></span><br><span class="line"><span class="meta">@api_view(['POST'])</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">add_post</span><span class="params">(request)</span>:</span></span><br><span class="line">    data = JSONParser().parse(request)</span><br><span class="line">    comment = data[<span class="string">'comment'</span>].split(<span class="string">","</span>)</span><br><span class="line">    tags = data[<span class="string">'tags'</span>].split(<span class="string">","</span>)</span><br><span class="line">    user_details = &#123;<span class="string">"first_name"</span> : data[<span class="string">'user_details'</span>][<span class="string">'first_name'</span>], <span class="string">"last_name"</span> : data[<span class="string">'user_details'</span>][<span class="string">'last_name'</span>],&#125;</span><br><span class="line">    post = Posts(</span><br><span class="line">        post_title= data[<span class="string">'post_title'</span>],</span><br><span class="line">        post_description= data[<span class="string">'post_description'</span>],</span><br><span class="line">        comment =comment,</span><br><span class="line">        tags = tags,</span><br><span class="line">        user_details = user_details</span><br><span class="line">    )</span><br><span class="line">    post.save()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        serializer = PostSerializer(post)</span><br><span class="line">        <span class="keyword">return</span> JsonResponse(serializer.data , status=<span class="number">201</span>)</span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">        <span class="keyword">return</span> JsonResponse(serializer.errors, status=<span class="number">400</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@csrf_exempt</span></span><br><span class="line"><span class="meta">@api_view(['POST'])</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">update_post</span><span class="params">(request,id)</span>:</span></span><br><span class="line"></span><br><span class="line">    data = JSONParser().parse(request)</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        post = Posts.objects.get(id=id)</span><br><span class="line"></span><br><span class="line">        post.comment = data[<span class="string">'comment'</span>].split(<span class="string">","</span>)</span><br><span class="line">        post.tags = data[<span class="string">'tags'</span>].split(<span class="string">","</span>)</span><br><span class="line">        post.user_details = &#123;<span class="string">"first_name"</span> : data[<span class="string">'user_details'</span>][<span class="string">'first_name'</span>], <span class="string">"last_name"</span> : data[<span class="string">'user_details'</span>][<span class="string">'last_name'</span>]&#125;</span><br><span class="line">        post.post_title= data[<span class="string">'post_title'</span>]</span><br><span class="line">        post.post_description= data[<span class="string">'post_description'</span>]</span><br><span class="line">        </span><br><span class="line">        post.save()</span><br><span class="line"></span><br><span class="line">        result = &#123;<span class="string">"received"</span>: <span class="literal">True</span>, <span class="string">"detail"</span> : <span class="string">"updated_"</span> + str(id)&#125;</span><br><span class="line">        <span class="keyword">return</span> JsonResponse(result, status=<span class="number">201</span>)  </span><br><span class="line"></span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">        result= &#123;<span class="string">"error"</span> : &#123;<span class="string">"code"</span>: <span class="number">404</span>, <span class="string">"detail"</span> : <span class="string">"Post Not Found"</span>&#125;&#125;</span><br><span class="line">        <span class="keyword">return</span> JsonResponse(result, status=<span class="number">400</span>)</span><br><span class="line"></span><br><span class="line"><span class="meta">@csrf_exempt</span></span><br><span class="line"><span class="meta">@api_view(['GET'])</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">delete_post</span><span class="params">(request,id)</span>:</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        post = Posts.objects.get(id=id)</span><br><span class="line">        post.delete()</span><br><span class="line"></span><br><span class="line">        result = &#123;<span class="string">"received"</span>: <span class="literal">True</span>, <span class="string">"detail"</span> : <span class="string">"deleted_"</span> + str(id) &#125;</span><br><span class="line">        <span class="keyword">return</span> JsonResponse(result, status=<span class="number">201</span>)   </span><br><span class="line">    <span class="keyword">except</span>: </span><br><span class="line">        result= &#123;<span class="string">"error"</span> : &#123;<span class="string">"code"</span>: <span class="number">404</span>, <span class="string">"detail"</span> : <span class="string">"Post Not Found"</span>&#125;&#125;</span><br><span class="line">        <span class="keyword">return</span> JsonResponse(result, status=<span class="number">201</span>)   </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@csrf_exempt</span></span><br><span class="line"><span class="meta">@api_view(['GET'])</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">read_post</span><span class="params">(requests,id)</span>:</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        post = Posts.objects.get(id=id)</span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">        result= &#123;<span class="string">"error"</span> : &#123;<span class="string">"code"</span>: <span class="number">404</span>, <span class="string">"detail"</span> : <span class="string">"Post Not Found"</span>&#125;&#125;</span><br><span class="line">        <span class="keyword">return</span> JsonResponse(result, status=<span class="number">201</span>)  </span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        serializer = PostSerializer(post)</span><br><span class="line">        <span class="keyword">return</span> JsonResponse(serializer.data , status=<span class="number">201</span>)</span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">        <span class="keyword">return</span> JsonResponse(serializer.errors, status=<span class="number">400</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@csrf_exempt</span></span><br><span class="line"><span class="meta">@api_view(['POST'])</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">read_posts</span><span class="params">(request)</span>:</span></span><br><span class="line">    posts = Posts.objects.all()</span><br><span class="line">    <span class="keyword">if</span> len(posts) == <span class="number">0</span>:</span><br><span class="line">        result= &#123;<span class="string">"error"</span> : &#123;<span class="string">"code"</span>: <span class="number">404</span>, <span class="string">"detail"</span> : <span class="string">"Post Not Found"</span>&#125;&#125;</span><br><span class="line">        <span class="keyword">return</span> JsonResponse(result, status=<span class="number">400</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        result = &#123;<span class="string">"answer"</span> : []&#125;</span><br><span class="line">        <span class="keyword">for</span> post <span class="keyword">in</span> posts:</span><br><span class="line">            serializer = PostSerializer(post)</span><br><span class="line">            result[<span class="string">'answer'</span>].append(serializer.data)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> JsonResponse(result , status=<span class="number">201</span>)</span><br></pre></td></tr></table></figure><h2 id="Serailizers-py"><a href="#Serailizers-py" class="headerlink" title="Serailizers.py"></a>Serailizers.py</h2><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> rest_framework <span class="keyword">import</span> serializers </span><br><span class="line"><span class="keyword">from</span> nosql.models <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">PostSerializer</span><span class="params">(serializers.ModelSerializer)</span>:</span></span><br><span class="line"></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Meta</span>:</span></span><br><span class="line">        model = Posts</span><br><span class="line">        fields = (<span class="string">'id'</span>, <span class="string">'post_title'</span>, <span class="string">'post_description'</span>, <span class="string">'comment'</span>, <span class="string">'tags'</span>, <span class="string">'user_details'</span>)</span><br></pre></td></tr></table></figure><h2 id="결과"><a href="#결과" class="headerlink" title="결과"></a>결과</h2><p><code>insert</code><br><img alt="insert" data-src="/img/Django/MongoDB/insert.PNG" class="lozad"><br><code>read</code><br><img alt="read" data-src="/img/Django/MongoDB/insert.PNG" class="lozad"><br><code>update</code><br><img alt="update" data-src="/img/Django/MongoDB/update.PNG" class="lozad"><br><code>delete</code><br><img alt="delete" data-src="/img/Django/MongoDB/delete.PNG" class="lozad"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;NoSQL&quot;&gt;&lt;a href=&quot;#NoSQL&quot; class=&quot;headerlink&quot; title=&quot;NoSQL??&quot;&gt;&lt;/a&gt;NoSQL??&lt;/h1&gt;&lt;p&gt;Not Only SQL’이라고 해석하는 게 더 적절하다.&lt;br&gt;그리고 NoSQL은 “관계형 데이터
      
    
    </summary>
    
    
      <category term="Django" scheme="https://khs9628.github.io/categories/Django/"/>
    
    
      <category term="Django" scheme="https://khs9628.github.io/tags/Django/"/>
    
  </entry>
  
  <entry>
    <title>CodeTest 연습 (Sort)</title>
    <link href="https://khs9628.github.io/2020/10/19/201019-codeTest/"/>
    <id>https://khs9628.github.io/2020/10/19/201019-codeTest/</id>
    <published>2020-10-19T04:54:30.000Z</published>
    <updated>2020-10-20T05:37:44.021Z</updated>
    
    <content type="html"><![CDATA[<h1 id="정렬"><a href="#정렬" class="headerlink" title="정렬"></a>정렬</h1><h1 id="K번째수"><a href="#K번째수" class="headerlink" title="K번째수"></a>K번째수</h1><h2 id="1차-답안"><a href="#1차-답안" class="headerlink" title="1차 답안"></a>1차 답안</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">solution</span><span class="params">(array, commands)</span>:</span></span><br><span class="line">    answer = []</span><br><span class="line">    tmp = []</span><br><span class="line">    <span class="keyword">for</span> command <span class="keyword">in</span> commands:</span><br><span class="line">        tmp = array[command[<span class="number">0</span>]<span class="number">-1</span>:command[<span class="number">1</span>]]</span><br><span class="line">        tmp.sort()</span><br><span class="line">        <span class="comment"># 정렬된 배열에서 answer 삽입</span></span><br><span class="line">        answer.append(tmp[command[<span class="number">2</span>]<span class="number">-1</span>])</span><br><span class="line">        </span><br><span class="line">    <span class="keyword">return</span> answer</span><br></pre></td></tr></table></figure><h2 id="다른사람-답안-1"><a href="#다른사람-답안-1" class="headerlink" title="다른사람 답안 1"></a>다른사람 답안 1</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">solution</span><span class="params">(array, commands)</span>:</span></span><br><span class="line">    answer = []</span><br><span class="line">    <span class="keyword">for</span> command <span class="keyword">in</span> commands:</span><br><span class="line">        i,j,k = command</span><br><span class="line">        answer.append(list(sorted(array[i<span class="number">-1</span>:j]))[k<span class="number">-1</span>])</span><br><span class="line">    <span class="keyword">return</span> answer</span><br></pre></td></tr></table></figure><p><code>i,j,k = command</code><br>원소를 3가지 변수로 저장한다는 아이디어 생각하기</p><h2 id="다른사람-답안-2"><a href="#다른사람-답안-2" class="headerlink" title="다른사람 답안 2"></a>다른사람 답안 2</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">solution</span><span class="params">(array, commands)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> list(map(<span class="keyword">lambda</span> x:sorted(array[x[<span class="number">0</span>]<span class="number">-1</span>:x[<span class="number">1</span>]])[x[<span class="number">2</span>]<span class="number">-1</span>], commands))</span><br></pre></td></tr></table></figure><p><code>map(적용시킬함수, 적용할 요소)</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">add_1</span><span class="params">(n)</span>:</span></span><br><span class="line">      <span class="keyword">return</span> n + <span class="number">1</span></span><br><span class="line"></span><br><span class="line">target = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>]</span><br><span class="line">result = map(add_1, target)</span><br><span class="line">print(result)</span><br><span class="line"><span class="comment"># [2,3,4,5,6]</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># use lamda</span></span><br><span class="line">result = map(<span class="keyword">lambda</span> x : x+<span class="number">1</span>, target)</span><br><span class="line">print(result)</span><br><span class="line"><span class="comment"># [2,3,4,5,6]</span></span><br></pre></td></tr></table></figure><p><code>filter(적용시킬 함수, 적용할 요소들)</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">target = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>, <span class="number">10</span>]</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">is_even</span><span class="params">(n)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">True</span> <span class="keyword">if</span> n % <span class="number">2</span> == <span class="number">0</span> <span class="keyword">else</span> <span class="literal">False</span></span><br><span class="line"></span><br><span class="line">result = filter(is_even, target)</span><br><span class="line">print(list(result))  </span><br><span class="line"><span class="comment"># [2, 4, 6, 8, 10]</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># use lamda</span></span><br><span class="line">result = filter(<span class="keyword">lambda</span> x : x%<span class="number">2</span>==<span class="number">0</span>, target)</span><br><span class="line">print(list(result))</span><br><span class="line"><span class="comment"># [2, 4, 6, 8, 10]</span></span><br></pre></td></tr></table></figure><p>람다 공부는 꼭해야할 것 같다.</p><h1 id="가장-큰-수"><a href="#가장-큰-수" class="headerlink" title="가장 큰 수"></a>가장 큰 수</h1><h2 id="1차-답안-1"><a href="#1차-답안-1" class="headerlink" title="1차 답안"></a>1차 답안</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">solution</span><span class="params">(numbers)</span>:</span></span><br><span class="line">    answer = <span class="string">''</span></span><br><span class="line"></span><br><span class="line">    number_str = list(map(<span class="keyword">lambda</span> x : str(x), numbers))</span><br><span class="line">    number_str.sort(reverse = <span class="literal">True</span>)</span><br><span class="line">    answer = answer.join(number_str)</span><br><span class="line">    <span class="keyword">return</span> answer</span><br></pre></td></tr></table></figure><p>6 / 60을 비교했을 때 60이 상위에 리스트되어 최대값이 출력되지 않습니다.</p><h2 id="2차답안"><a href="#2차답안" class="headerlink" title="2차답안"></a>2차답안</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">solution</span><span class="params">(numbers)</span>:</span></span><br><span class="line">    answer = <span class="string">''</span></span><br><span class="line"></span><br><span class="line">    numbers = list(map(str, numbers))</span><br><span class="line">    numbers.sort(key = <span class="keyword">lambda</span> x: x*<span class="number">3</span>, reverse = <span class="literal">True</span>)</span><br><span class="line">    answer = answer.join(numbers)</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> answer</span><br></pre></td></tr></table></figure><p><code>numbers.sort(key = lambda x: x*3, reverse = True)</code></p><p>핵심적인 것은 list는 str이기 때문에 1000이하의 수를 비교하기 위해서는 x3을 해 해당 문자열을 비교하면 된다는 점이 였다.</p><p>lambda를 이용해 x*3을 sort()의 키로 잡아 배열을 하게 된다며 문제가 해결 된다.</p><p><del>테스트 11 통과 실패</del></p><h2 id="3차-답안"><a href="#3차-답안" class="headerlink" title="3차 답안"></a>3차 답안</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">solution</span><span class="params">(numbers)</span>:</span></span><br><span class="line">    answer = <span class="string">''</span></span><br><span class="line"></span><br><span class="line">    numbers = list(map(str, numbers))</span><br><span class="line">    numbers.sort(key = <span class="keyword">lambda</span> x: x*<span class="number">3</span>, reverse = <span class="literal">True</span>)</span><br><span class="line">    answer = str(int(answer.join(numbers)))</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> answer</span><br></pre></td></tr></table></figure><p><code>answer = str(int(answer.join(numbers)))</code></p><p>테스트 11 통과 실패는 [0,0,0,0,0,0] 이렇게 있을 때 “0” 하나만 나와야 하는 케이스였습니다.</p><p>그렇기 때문에 join할때 int 타입으로 변환 후 join을 해줘야 해당 케이스에 통과할 수 있습니다.</p><h2 id="다른사람-풀이"><a href="#다른사람-풀이" class="headerlink" title="다른사람 풀이"></a>다른사람 풀이</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">import</span> functools</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">comparator</span><span class="params">(a,b)</span>:</span></span><br><span class="line">    t1 = a+b</span><br><span class="line">    t2 = b+a</span><br><span class="line">    <span class="keyword">return</span> (int(t1) &gt; int(t2)) - (int(t1) &lt; int(t2)) <span class="comment">#  t1이 크다면 1  // t2가 크다면 -1  //  같으면 0</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">solution</span><span class="params">(numbers)</span>:</span></span><br><span class="line">    numbers = [str(x) <span class="keyword">for</span> x <span class="keyword">in</span> numbers]</span><br><span class="line">    numbers = sorted(numbers, key=functools.cmp_to_key(comparator),reverse=<span class="literal">True</span>)</span><br><span class="line">    answer = str(int(<span class="string">''</span>.join(numbers)))</span><br><span class="line">    <span class="keyword">return</span> answer</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># use lambda</span></span><br><span class="line">    <span class="comment"># numbers = sorted(numbers, key = cmp_to_key(lambda x,y:int(x+y)-int(y+x)), reverse = True)</span></span><br></pre></td></tr></table></figure><h4 id="sorted-의-시간복잡도는-n-logn-이다"><a href="#sorted-의-시간복잡도는-n-logn-이다" class="headerlink" title="sorted()의 시간복잡도는 n * logn 이다"></a>sorted()의 시간복잡도는 n * logn 이다</h4><p><code>functools.cmp_to_key()</code></p><p>0 , 1 ,-1 3가지로 비교하는 비교문 0일경우 유지 1일경우 왼쪽요소가 앞으로 -1일경우 오른쪽요소가 앞으로 가도록 지정한다.</p><p>ex) 330, 303 비교시<br>(330&gt; 303 #1) -(330&lt;303 #0) -&gt; 값은 1이므로 [3,30]으로 배열된다.</p><h1 id="H-Index"><a href="#H-Index" class="headerlink" title="H-Index"></a>H-Index</h1><h2 id="1차-답안-2"><a href="#1차-답안-2" class="headerlink" title="1차 답안"></a>1차 답안</h2><p>문제가 너무어려워 이해하는데 시간이 오래걸렸다<br>중요한 점은 <code>h회 이상 인용된 논문의 개수가 h개이상</code> 이점을 코드로 구현하는 점이였다.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">solution</span><span class="params">(citations)</span>:</span></span><br><span class="line"></span><br><span class="line">    citations.sort(reverse=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> i,j <span class="keyword">in</span> enumerate(citations,<span class="number">1</span>):</span><br><span class="line">        <span class="keyword">if</span> i &lt;= j:</span><br><span class="line">            max = i</span><br><span class="line">            </span><br><span class="line">    <span class="keyword">if</span> max &gt; len(citations):</span><br><span class="line">        <span class="keyword">return</span> len(citations)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> max</span><br></pre></td></tr></table></figure><ol><li>먼저 citations 배열을 역순으로 한 뒤 enumerate를 통해 해당 원소보다 몇개 이상인 논문의 수를 구한다. (최대 H-Index를 구해야 하기 때문에)</li><li>citations = [22,24]인 경우 해당 H-index의 값은 배열의 개수인 2가 되므로 해당 케이스를 수정한다.</li><li>Case16번 통과실패 -&gt; 모든 원소가 0 인경우</li></ol><h2 id="2차-답안"><a href="#2차-답안" class="headerlink" title="2차 답안"></a>2차 답안</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">solution</span><span class="params">(citations)</span>:</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 모든 원소가 0일 경우</span></span><br><span class="line">    <span class="keyword">if</span> sum(citations) == <span class="number">0</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line"></span><br><span class="line">    citations.sort(reverse=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> i,j <span class="keyword">in</span> enumerate(citations,<span class="number">1</span>):</span><br><span class="line">        <span class="keyword">if</span> i &lt;= j:</span><br><span class="line">            max = i</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> max &gt; len(citations):</span><br><span class="line">        <span class="keyword">return</span> len(citations)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> max</span><br></pre></td></tr></table></figure><h2 id="다른사람풀이"><a href="#다른사람풀이" class="headerlink" title="다른사람풀이"></a>다른사람풀이</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">solution</span><span class="params">(citations)</span>:</span></span><br><span class="line">    citations.sort(reverse=<span class="literal">True</span>)</span><br><span class="line">    answer = max(map(min, enumerate(citations, start=<span class="number">1</span>)))</span><br><span class="line">    <span class="keyword">return</span> answer</span><br></pre></td></tr></table></figure><p><code>enumerate</code> 된 배열을 통해 두 요소중 작은 것을 가져오는 코드 풀이가 인상적이 였다.<br>내가 짠 코드와 비슷한 로직으로 구현했지만 훨씬 간편한 코드인 것 같다.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;정렬&quot;&gt;&lt;a href=&quot;#정렬&quot; class=&quot;headerlink&quot; title=&quot;정렬&quot;&gt;&lt;/a&gt;정렬&lt;/h1&gt;&lt;h1 id=&quot;K번째수&quot;&gt;&lt;a href=&quot;#K번째수&quot; class=&quot;headerlink&quot; title=&quot;K번째수&quot;&gt;&lt;/a&gt;K번째수&lt;/h
      
    
    </summary>
    
    
    
  </entry>
  
</feed>
